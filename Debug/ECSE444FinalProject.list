
ECSE444FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005fcc  08005fcc  00015fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006044  08006044  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006044  08006044  00016044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800604c  0800604c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006050  08006050  00016050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08006054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001184  200000d4  08006128  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08006128  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d15b  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000373b  00000000  00000000  0003d25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001950  00000000  00000000  000409a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a8  00000000  00000000  000422f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00005c17  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001472d  00000000  00000000  000496af  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010600e  00000000  00000000  0005dddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163dea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b20  00000000  00000000  00163e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005fb4 	.word	0x08005fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	08005fb4 	.word	0x08005fb4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004da:	2003      	movs	r0, #3
 80004dc:	f000 f8ff 	bl	80006de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e0:	2000      	movs	r0, #0
 80004e2:	f005 fc41 	bl	8005d68 <HAL_InitTick>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d002      	beq.n	80004f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004ec:	2301      	movs	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
 80004f0:	e001      	b.n	80004f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004f2:	f005 fab1 	bl	8005a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004f6:	79fb      	ldrb	r3, [r7, #7]
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x20>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_IncTick+0x24>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_IncTick+0x24>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000004 	.word	0x20000004
 8000524:	2000104c 	.word	0x2000104c

08000528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return uwTick;
 800052c:	4b03      	ldr	r3, [pc, #12]	; (800053c <HAL_GetTick+0x14>)
 800052e:	681b      	ldr	r3, [r3, #0]
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	2000104c 	.word	0x2000104c

08000540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000548:	f7ff ffee 	bl	8000528 <HAL_GetTick>
 800054c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000558:	d005      	beq.n	8000566 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <HAL_Delay+0x40>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000566:	bf00      	nop
 8000568:	f7ff ffde 	bl	8000528 <HAL_GetTick>
 800056c:	4602      	mov	r2, r0
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	429a      	cmp	r2, r3
 8000576:	d8f7      	bhi.n	8000568 <HAL_Delay+0x28>
  {
  }
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004

08000584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f003 0307 	and.w	r3, r3, #7
 8000592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <__NVIC_SetPriorityGrouping+0x44>)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	60d3      	str	r3, [r2, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <__NVIC_GetPriorityGrouping+0x18>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f003 0307 	and.w	r3, r3, #7
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 021f 	and.w	r2, r3, #31
 8000600:	4907      	ldr	r1, [pc, #28]	; (8000620 <__NVIC_EnableIRQ+0x38>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	; (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	; 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	; 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f7ff ff4c 	bl	8000584 <__NVIC_SetPriorityGrouping>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000706:	f7ff ff61 	bl	80005cc <__NVIC_GetPriorityGrouping>
 800070a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	68b9      	ldr	r1, [r7, #8]
 8000710:	6978      	ldr	r0, [r7, #20]
 8000712:	f7ff ffb1 	bl	8000678 <NVIC_EncodePriority>
 8000716:	4602      	mov	r2, r0
 8000718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff80 	bl	8000624 <__NVIC_SetPriority>
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff54 	bl	80005e8 <__NVIC_EnableIRQ>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d101      	bne.n	800075a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
 8000758:	e014      	b.n	8000784 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d105      	bne.n	8000770 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f005 f998 	bl	8005aa0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2202      	movs	r2, #2
 8000774:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000782:	2300      	movs	r3, #0
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800079e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007a2:	d120      	bne.n	80007e6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007b2:	d118      	bne.n	80007e6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2204      	movs	r2, #4
 80007b8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	f043 0201 	orr.w	r2, r3, #1
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80007de:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 f82d 	bl	8000840 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007f4:	d120      	bne.n	8000838 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000804:	d118      	bne.n	8000838 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	2204      	movs	r2, #4
 800080a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	f043 0202 	orr.w	r2, r3, #2
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000820:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000830:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f928 	bl	8000a88 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	795b      	ldrb	r3, [r3, #5]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d101      	bne.n	8000870 <HAL_DAC_ConfigChannel+0x1c>
 800086c:	2302      	movs	r3, #2
 800086e:	e107      	b.n	8000a80 <HAL_DAC_ConfigChannel+0x22c>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2201      	movs	r2, #1
 8000874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	2202      	movs	r2, #2
 800087a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d174      	bne.n	800096e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000884:	f7ff fe50 	bl	8000528 <HAL_GetTick>
 8000888:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d134      	bne.n	80008fa <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000890:	e011      	b.n	80008b6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000892:	f7ff fe49 	bl	8000528 <HAL_GetTick>
 8000896:	4602      	mov	r2, r0
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	2b01      	cmp	r3, #1
 800089e:	d90a      	bls.n	80008b6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	691b      	ldr	r3, [r3, #16]
 80008a4:	f043 0208 	orr.w	r2, r3, #8
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2203      	movs	r2, #3
 80008b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80008b2:	2303      	movs	r3, #3
 80008b4:	e0e4      	b.n	8000a80 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1e6      	bne.n	8000892 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80008c4:	2001      	movs	r0, #1
 80008c6:	f7ff fe3b 	bl	8000540 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	6992      	ldr	r2, [r2, #24]
 80008d2:	641a      	str	r2, [r3, #64]	; 0x40
 80008d4:	e01e      	b.n	8000914 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80008d6:	f7ff fe27 	bl	8000528 <HAL_GetTick>
 80008da:	4602      	mov	r2, r0
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	1ad3      	subs	r3, r2, r3
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d90a      	bls.n	80008fa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	f043 0208 	orr.w	r2, r3, #8
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2203      	movs	r2, #3
 80008f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80008f6:	2303      	movs	r3, #3
 80008f8:	e0c2      	b.n	8000a80 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000900:	2b00      	cmp	r3, #0
 8000902:	dbe8      	blt.n	80008d6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000904:	2001      	movs	r0, #1
 8000906:	f7ff fe1b 	bl	8000540 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	6992      	ldr	r2, [r2, #24]
 8000912:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f003 0310 	and.w	r3, r3, #16
 8000920:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	ea02 0103 	and.w	r1, r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	69da      	ldr	r2, [r3, #28]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	409a      	lsls	r2, r3
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	430a      	orrs	r2, r1
 8000940:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	21ff      	movs	r1, #255	; 0xff
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	ea02 0103 	and.w	r1, r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	6a1a      	ldr	r2, [r3, #32]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f003 0310 	and.w	r3, r3, #16
 8000964:	409a      	lsls	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	430a      	orrs	r2, r1
 800096c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d11d      	bne.n	80009b2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800097c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f003 0310 	and.w	r3, r3, #16
 8000984:	221f      	movs	r2, #31
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4013      	ands	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009b8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f003 0310 	and.w	r3, r3, #16
 80009c0:	2207      	movs	r2, #7
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	431a      	orrs	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	6819      	ldr	r1, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43da      	mvns	r2, r3
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	400a      	ands	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0310 	and.w	r3, r3, #16
 8000a26:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4013      	ands	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f003 0310 	and.w	r3, r3, #16
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	22c0      	movs	r2, #192	; 0xc0
 8000a64:	fa02 f303 	lsl.w	r3, r2, r3
 8000a68:	43da      	mvns	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	400a      	ands	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	2201      	movs	r2, #1
 8000a76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d101      	bne.n	8000aae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e098      	b.n	8000be0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b4d      	ldr	r3, [pc, #308]	; (8000bec <HAL_DMA_Init+0x150>)
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	d80f      	bhi.n	8000ada <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b4b      	ldr	r3, [pc, #300]	; (8000bf0 <HAL_DMA_Init+0x154>)
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a4b      	ldr	r2, [pc, #300]	; (8000bf4 <HAL_DMA_Init+0x158>)
 8000ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aca:	091b      	lsrs	r3, r3, #4
 8000acc:	009a      	lsls	r2, r3, #2
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a48      	ldr	r2, [pc, #288]	; (8000bf8 <HAL_DMA_Init+0x15c>)
 8000ad6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad8:	e00e      	b.n	8000af8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b46      	ldr	r3, [pc, #280]	; (8000bfc <HAL_DMA_Init+0x160>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a43      	ldr	r2, [pc, #268]	; (8000bf4 <HAL_DMA_Init+0x158>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <HAL_DMA_Init+0x164>)
 8000af6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2202      	movs	r2, #2
 8000afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b52:	d039      	beq.n	8000bc8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <HAL_DMA_Init+0x15c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d11a      	bne.n	8000b94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b5e:	4b29      	ldr	r3, [pc, #164]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 031c 	and.w	r3, r3, #28
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	4924      	ldr	r1, [pc, #144]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6859      	ldr	r1, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b84:	f003 031c 	and.w	r3, r3, #28
 8000b88:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8c:	491d      	ldr	r1, [pc, #116]	; (8000c04 <HAL_DMA_Init+0x168>)
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
 8000b92:	e019      	b.n	8000bc8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b94:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9c:	f003 031c 	and.w	r3, r3, #28
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	4917      	ldr	r1, [pc, #92]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000baa:	4013      	ands	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6859      	ldr	r1, [r3, #4]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f003 031c 	and.w	r3, r3, #28
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	4911      	ldr	r1, [pc, #68]	; (8000c08 <HAL_DMA_Init+0x16c>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	40020407 	.word	0x40020407
 8000bf0:	bffdfff8 	.word	0xbffdfff8
 8000bf4:	cccccccd 	.word	0xcccccccd
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	bffdfbf8 	.word	0xbffdfbf8
 8000c00:	40020400 	.word	0x40020400
 8000c04:	400200a8 	.word	0x400200a8
 8000c08:	400204a8 	.word	0x400204a8

08000c0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c28:	f003 031c 	and.w	r3, r3, #28
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	409a      	lsls	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d026      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x7a>
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 0304 	and.w	r3, r3, #4
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d021      	beq.n	8000c86 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f003 0320 	and.w	r3, r3, #32
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d107      	bne.n	8000c60 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f022 0204 	bic.w	r2, r2, #4
 8000c5e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c64:	f003 021c 	and.w	r2, r3, #28
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d071      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000c84:	e06c      	b.n	8000d60 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 031c 	and.w	r3, r3, #28
 8000c8e:	2202      	movs	r2, #2
 8000c90:	409a      	lsls	r2, r3
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d02e      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0xec>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d029      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0320 	and.w	r3, r3, #32
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 020a 	bic.w	r2, r2, #10
 8000cc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f003 021c 	and.w	r2, r3, #28
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cdc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d038      	beq.n	8000d60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000cf6:	e033      	b.n	8000d60 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	f003 031c 	and.w	r3, r3, #28
 8000d00:	2208      	movs	r2, #8
 8000d02:	409a      	lsls	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d02a      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d025      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f022 020e 	bic.w	r2, r2, #14
 8000d24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f003 021c 	and.w	r2, r3, #28
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2201      	movs	r2, #1
 8000d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
}
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	e17f      	b.n	800107c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8171 	beq.w	8001076 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d00b      	beq.n	8000db4 <HAL_GPIO_Init+0x48>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	f003 0201 	and.w	r2, r3, #1
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d118      	bne.n	8000e54 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e28:	2201      	movs	r2, #1
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	f003 0201 	and.w	r2, r3, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x128>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	6939      	ldr	r1, [r7, #16]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80ac 	beq.w	8001076 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b5e      	ldr	r3, [pc, #376]	; (8001098 <HAL_GPIO_Init+0x32c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	4a5d      	ldr	r2, [pc, #372]	; (8001098 <HAL_GPIO_Init+0x32c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	; (8001098 <HAL_GPIO_Init+0x32c>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f36:	4a59      	ldr	r2, [pc, #356]	; (800109c <HAL_GPIO_Init+0x330>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x242>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <HAL_GPIO_Init+0x334>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x23e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4d      	ldr	r2, [pc, #308]	; (80010a4 <HAL_GPIO_Init+0x338>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x23a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_GPIO_Init+0x33c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x236>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4b      	ldr	r2, [pc, #300]	; (80010ac <HAL_GPIO_Init+0x340>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x232>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_GPIO_Init+0x344>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x22e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a49      	ldr	r2, [pc, #292]	; (80010b4 <HAL_GPIO_Init+0x348>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x22a>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc0:	4936      	ldr	r1, [pc, #216]	; (800109c <HAL_GPIO_Init+0x330>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001022:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104c:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001070:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <HAL_GPIO_Init+0x34c>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f47f ae78 	bne.w	8000d7c <HAL_GPIO_Init+0x10>
  }
}
 800108c:	bf00      	nop
 800108e:	371c      	adds	r7, #28
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40021000 	.word	0x40021000
 800109c:	40010000 	.word	0x40010000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800
 80010a8:	48000c00 	.word	0x48000c00
 80010ac:	48001000 	.word	0x48001000
 80010b0:	48001400 	.word	0x48001400
 80010b4:	48001800 	.word	0x48001800
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
 80010c8:	4613      	mov	r3, r2
 80010ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d8:	e002      	b.n	80010e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010da:	887a      	ldrh	r2, [r7, #2]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f806 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e081      	b.n	8001248 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d106      	bne.n	800115e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f004 fd15 	bl	8005b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0201 	bic.w	r2, r2, #1
 8001174:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001182:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001192:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d107      	bne.n	80011ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	e006      	b.n	80011ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d104      	bne.n	80011cc <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6812      	ldr	r2, [r2, #0]
 80011d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011de:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68da      	ldr	r2, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	ea42 0103 	orr.w	r1, r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	021a      	lsls	r2, r3, #8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69d9      	ldr	r1, [r3, #28]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1a      	ldr	r2, [r3, #32]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0201 	orr.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b20      	cmp	r3, #32
 8001264:	d138      	bne.n	80012d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800126c:	2b01      	cmp	r3, #1
 800126e:	d101      	bne.n	8001274 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001270:	2302      	movs	r3, #2
 8001272:	e032      	b.n	80012da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2224      	movs	r2, #36	; 0x24
 8001280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 0201 	bic.w	r2, r2, #1
 8001292:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6819      	ldr	r1, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2220      	movs	r2, #32
 80012c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e000      	b.n	80012da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012d8:	2302      	movs	r3, #2
  }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d139      	bne.n	8001370 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001302:	2b01      	cmp	r3, #1
 8001304:	d101      	bne.n	800130a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001306:	2302      	movs	r3, #2
 8001308:	e033      	b.n	8001372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2201      	movs	r2, #1
 800130e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2224      	movs	r2, #36	; 0x24
 8001316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0201 	bic.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001338:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 0201 	orr.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2220      	movs	r2, #32
 8001360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001370:	2302      	movs	r3, #2
  }
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <HAL_PWREx_GetVoltageRange+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40007000 	.word	0x40007000

0800139c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013aa:	d130      	bne.n	800140e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ac:	4b23      	ldr	r3, [pc, #140]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013b8:	d038      	beq.n	800142c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013c2:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2232      	movs	r2, #50	; 0x32
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	3301      	adds	r3, #1
 80013de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e0:	e002      	b.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e8:	4b14      	ldr	r3, [pc, #80]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f4:	d102      	bne.n	80013fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d1f2      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001408:	d110      	bne.n	800142c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e00f      	b.n	800142e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800140e:	4b0b      	ldr	r3, [pc, #44]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800141a:	d007      	beq.n	800142c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40007000 	.word	0x40007000
 8001440:	200000d0 	.word	0x200000d0
 8001444:	431bde83 	.word	0x431bde83

08001448 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff f86a 	bl	8000528 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e063      	b.n	8001528 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f004 fbcb 	bl	8005c10 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800147a:	f241 3188 	movw	r1, #5000	; 0x1388
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f858 	bl	8001534 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	3b01      	subs	r3, #1
 8001494:	021a      	lsls	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	2120      	movs	r1, #32
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f850 	bl	8001550 <QSPI_WaitFlagStateUntilTimeout>
 80014b0:	4603      	mov	r3, r0
 80014b2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80014b4:	7afb      	ldrb	r3, [r7, #11]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d131      	bne.n	800151e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014c4:	f023 0310 	bic.w	r3, r3, #16
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6852      	ldr	r2, [r2, #4]
 80014cc:	0611      	lsls	r1, r2, #24
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68d2      	ldr	r2, [r2, #12]
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_QSPI_Init+0xe8>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6912      	ldr	r2, [r2, #16]
 80014ea:	0411      	lsls	r1, r2, #16
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6952      	ldr	r2, [r2, #20]
 80014f0:	4311      	orrs	r1, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6992      	ldr	r2, [r2, #24]
 80014f6:	4311      	orrs	r1, r2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8001526:	7afb      	ldrb	r3, [r7, #11]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	ffe0f8fe 	.word	0xffe0f8fe

08001534 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4613      	mov	r3, r2
 800155e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001560:	e01a      	b.n	8001598 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001568:	d016      	beq.n	8001598 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800156a:	f7fe ffdd 	bl	8000528 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	429a      	cmp	r2, r3
 8001578:	d302      	bcc.n	8001580 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2204      	movs	r2, #4
 8001584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800158c:	f043 0201 	orr.w	r2, r3, #1
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e00e      	b.n	80015b6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1d6      	bne.n	8001562 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3d4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d2:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015dc:	4b9e      	ldr	r3, [pc, #632]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 80e4 	beq.w	80017bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_RCC_OscConfig+0x4a>
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b0c      	cmp	r3, #12
 80015fe:	f040 808b 	bne.w	8001718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b01      	cmp	r3, #1
 8001606:	f040 8087 	bne.w	8001718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800160a:	4b93      	ldr	r3, [pc, #588]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x62>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e3ac      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1a      	ldr	r2, [r3, #32]
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_RCC_OscConfig+0x7c>
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800163a:	e005      	b.n	8001648 <HAL_RCC_OscConfig+0x88>
 800163c:	4b86      	ldr	r3, [pc, #536]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800163e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001642:	091b      	lsrs	r3, r3, #4
 8001644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001648:	4293      	cmp	r3, r2
 800164a:	d223      	bcs.n	8001694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 fd71 	bl	8002138 <RCC_SetFlashLatencyFromMSIRange>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e38d      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a7c      	ldr	r2, [pc, #496]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4977      	ldr	r1, [pc, #476]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b76      	ldr	r3, [pc, #472]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	4972      	ldr	r1, [pc, #456]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e025      	b.n	80016e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	4b70      	ldr	r3, [pc, #448]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6013      	str	r3, [r2, #0]
 80016a0:	4b6d      	ldr	r3, [pc, #436]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	496a      	ldr	r1, [pc, #424]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	4965      	ldr	r1, [pc, #404]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd31 	bl	8002138 <RCC_SetFlashLatencyFromMSIRange>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e34d      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e0:	f000 fc36 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 80016e4:	4601      	mov	r1, r0
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	f003 030f 	and.w	r3, r3, #15
 80016f0:	4a5a      	ldr	r2, [pc, #360]	; (800185c <HAL_RCC_OscConfig+0x29c>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	f003 031f 	and.w	r3, r3, #31
 80016f8:	fa21 f303 	lsr.w	r3, r1, r3
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_OscConfig+0x2a0>)
 80016fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x2a4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f004 fb2f 	bl	8005d68 <HAL_InitTick>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d052      	beq.n	80017ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	e331      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d032      	beq.n	8001786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001720:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a4c      	ldr	r2, [pc, #304]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800172c:	f7fe fefc 	bl	8000528 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7fe fef8 	bl	8000528 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e31a      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001746:	4b44      	ldr	r3, [pc, #272]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001752:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a40      	ldr	r2, [pc, #256]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001758:	f043 0308 	orr.w	r3, r3, #8
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	493b      	ldr	r1, [pc, #236]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800176c:	4313      	orrs	r3, r2
 800176e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	4936      	ldr	r1, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001780:	4313      	orrs	r3, r2
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	e01a      	b.n	80017bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001792:	f7fe fec9 	bl	8000528 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179a:	f7fe fec5 	bl	8000528 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e2e7      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ac:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1f0      	bne.n	800179a <HAL_RCC_OscConfig+0x1da>
 80017b8:	e000      	b.n	80017bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d074      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d005      	beq.n	80017da <HAL_RCC_OscConfig+0x21a>
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b0c      	cmp	r3, #12
 80017d2:	d10e      	bne.n	80017f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d10b      	bne.n	80017f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d064      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d160      	bne.n	80018b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e2c4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x24a>
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e01d      	b.n	8001846 <HAL_RCC_OscConfig+0x286>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001812:	d10c      	bne.n	800182e <HAL_RCC_OscConfig+0x26e>
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	e00b      	b.n	8001846 <HAL_RCC_OscConfig+0x286>
 800182e:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a09      	ldr	r2, [pc, #36]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <HAL_RCC_OscConfig+0x298>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01c      	beq.n	8001888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184e:	f7fe fe6b 	bl	8000528 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001854:	e011      	b.n	800187a <HAL_RCC_OscConfig+0x2ba>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	08005ffc 	.word	0x08005ffc
 8001860:	200000d0 	.word	0x200000d0
 8001864:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7fe fe5e 	bl	8000528 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e280      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4baf      	ldr	r3, [pc, #700]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x2a8>
 8001886:	e014      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7fe fe4e 	bl	8000528 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001890:	f7fe fe4a 	bl	8000528 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	; 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e26c      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a2:	4ba5      	ldr	r3, [pc, #660]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x2d0>
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d060      	beq.n	8001980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x310>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b0c      	cmp	r3, #12
 80018c8:	d119      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d116      	bne.n	80018fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d0:	4b99      	ldr	r3, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_OscConfig+0x328>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e249      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b93      	ldr	r3, [pc, #588]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	4990      	ldr	r1, [pc, #576]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	e040      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d023      	beq.n	800194e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a8b      	ldr	r2, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800190c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7fe fe09 	bl	8000528 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191a:	f7fe fe05 	bl	8000528 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e227      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b82      	ldr	r3, [pc, #520]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001938:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	497c      	ldr	r1, [pc, #496]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194e:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7fe fde5 	bl	8000528 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7fe fde1 	bl	8000528 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e203      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001974:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01c      	beq.n	80019ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	4a67      	ldr	r2, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7fe fdc0 	bl	8000528 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ac:	f7fe fdbc 	bl	8000528 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1de      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019be:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0ef      	beq.n	80019ac <HAL_RCC_OscConfig+0x3ec>
 80019cc:	e01b      	b.n	8001a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ce:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d4:	4a58      	ldr	r2, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019de:	f7fe fda3 	bl	8000528 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e6:	f7fe fd9f 	bl	8000528 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1c1      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f8:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ef      	bne.n	80019e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f000 80a6 	beq.w	8001b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a18:	4b47      	ldr	r3, [pc, #284]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10d      	bne.n	8001a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a28:	4a43      	ldr	r2, [pc, #268]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a30:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d118      	bne.n	8001a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a4c:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3a      	ldr	r2, [pc, #232]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a58:	f7fe fd66 	bl	8000528 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f7fe fd62 	bl	8000528 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e184      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x57c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_RCC_OscConfig+0x4d8>
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a96:	e024      	b.n	8001ae2 <HAL_RCC_OscConfig+0x522>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	d110      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x502>
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac0:	e00f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x522>
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001ada:	f023 0304 	bic.w	r3, r3, #4
 8001ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aea:	f7fe fd1d 	bl	8000528 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af2:	f7fe fd19 	bl	8000528 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e139      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x578>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0ed      	beq.n	8001af2 <HAL_RCC_OscConfig+0x532>
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b18:	f7fe fd06 	bl	8000528 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b1e:	e00f      	b.n	8001b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7fe fd02 	bl	8000528 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d906      	bls.n	8001b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e122      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1e8      	bne.n	8001b20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d105      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b54:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	4a8a      	ldr	r2, [pc, #552]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8108 	beq.w	8001d7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	f040 80d0 	bne.w	8001d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b74:	4b83      	ldr	r3, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d130      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	3b01      	subs	r3, #1
 8001b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d127      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d11f      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb4:	2a07      	cmp	r2, #7
 8001bb6:	bf14      	ite	ne
 8001bb8:	2201      	movne	r2, #1
 8001bba:	2200      	moveq	r2, #0
 8001bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d113      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	3b01      	subs	r3, #1
 8001be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d06e      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d069      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bf0:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d105      	bne.n	8001c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bfc:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0b7      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a5c      	ldr	r2, [pc, #368]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c18:	f7fe fc86 	bl	8000528 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe fc82 	bl	8000528 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e0a4      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <HAL_RCC_OscConfig+0x7c8>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4e:	3a01      	subs	r2, #1
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c58:	0212      	lsls	r2, r2, #8
 8001c5a:	4311      	orrs	r1, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c60:	0852      	lsrs	r2, r2, #1
 8001c62:	3a01      	subs	r2, #1
 8001c64:	0552      	lsls	r2, r2, #21
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c6c:	0852      	lsrs	r2, r2, #1
 8001c6e:	3a01      	subs	r2, #1
 8001c70:	0652      	lsls	r2, r2, #25
 8001c72:	4311      	orrs	r1, r2
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c78:	0912      	lsrs	r2, r2, #4
 8001c7a:	0452      	lsls	r2, r2, #17
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	4941      	ldr	r1, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c9c:	f7fe fc44 	bl	8000528 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe fc40 	bl	8000528 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e062      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc2:	e05a      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e059      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d152      	bne.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2a      	ldr	r2, [pc, #168]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cec:	f7fe fc1c 	bl	8000528 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe fc18 	bl	8000528 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e03a      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x734>
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d02d      	beq.n	8001d76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d32:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d38:	f023 0303 	bic.w	r3, r3, #3
 8001d3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7fe fbeb 	bl	8000528 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d56:	f7fe fbe7 	bl	8000528 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e009      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f0      	bne.n	8001d56 <HAL_RCC_OscConfig+0x796>
 8001d74:	e001      	b.n	8001d7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	f99d808c 	.word	0xf99d808c

08001d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0c8      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d910      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dae:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 0207 	bic.w	r2, r3, #7
 8001db6:	4961      	ldr	r1, [pc, #388]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b0      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d04c      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de4:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d121      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e09e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d115      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e092      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e086      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e24:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e07e      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e34:	4b42      	ldr	r3, [pc, #264]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 0203 	bic.w	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	493f      	ldr	r1, [pc, #252]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e46:	f7fe fb6f 	bl	8000528 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4c:	e00a      	b.n	8001e64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e4e:	f7fe fb6b 	bl	8000528 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e066      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 020c 	and.w	r2, r3, #12
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1eb      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d008      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e82:	4b2f      	ldr	r3, [pc, #188]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	492c      	ldr	r1, [pc, #176]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0307 	and.w	r3, r3, #7
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d210      	bcs.n	8001ec4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0207 	bic.w	r2, r3, #7
 8001eaa:	4924      	ldr	r1, [pc, #144]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d001      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e036      	b.n	8001f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4918      	ldr	r1, [pc, #96]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4910      	ldr	r1, [pc, #64]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f02:	f000 f825 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001f06:	4601      	mov	r1, r0
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	091b      	lsrs	r3, r3, #4
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f22:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 ff1e 	bl	8005d68 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08005ffc 	.word	0x08005ffc
 8001f48:	200000d0 	.word	0x200000d0
 8001f4c:	20000000 	.word	0x20000000

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b089      	sub	sp, #36	; 0x24
 8001f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x34>
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d11e      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f84:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f96:	0a1b      	lsrs	r3, r3, #8
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fa0:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	091b      	lsrs	r3, r3, #4
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fac:	4a2a      	ldr	r2, [pc, #168]	; (8002058 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc8:	4b24      	ldr	r3, [pc, #144]	; (800205c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e004      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d133      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d003      	beq.n	8001ffa <HAL_RCC_GetSysClockFreq+0xaa>
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e005      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	617b      	str	r3, [r7, #20]
      break;
 8002004:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0307 	and.w	r3, r3, #7
 8002010:	3301      	adds	r3, #1
 8002012:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	fb02 f203 	mul.w	r2, r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_GetSysClockFreq+0x104>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	0e5b      	lsrs	r3, r3, #25
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	3301      	adds	r3, #1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002046:	69bb      	ldr	r3, [r7, #24]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3724      	adds	r7, #36	; 0x24
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	40021000 	.word	0x40021000
 8002058:	08006014 	.word	0x08006014
 800205c:	00f42400 	.word	0x00f42400
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCC_GetHCLKFreq+0x14>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	4618      	mov	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	200000d0 	.word	0x200000d0

0800207c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002080:	f7ff fff0 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002084:	4601      	mov	r1, r0
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	0800600c 	.word	0x0800600c

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020ac:	f7ff ffda 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 80020b0:	4601      	mov	r1, r0
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0adb      	lsrs	r3, r3, #11
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020be:	5cd3      	ldrb	r3, [r2, r3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	0800600c 	.word	0x0800600c

080020d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	220f      	movs	r2, #15
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_RCC_GetClockConfig+0x60>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0207 	and.w	r2, r3, #7
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	40022000 	.word	0x40022000

08002138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002140:	2300      	movs	r3, #0
 8002142:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002144:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002150:	f7ff f916 	bl	8001380 <HAL_PWREx_GetVoltageRange>
 8002154:	6178      	str	r0, [r7, #20]
 8002156:	e014      	b.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002162:	6593      	str	r3, [r2, #88]	; 0x58
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002170:	f7ff f906 	bl	8001380 <HAL_PWREx_GetVoltageRange>
 8002174:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002176:	4b1e      	ldr	r3, [pc, #120]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4a1d      	ldr	r2, [pc, #116]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002180:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	d10b      	bne.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	d919      	bls.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2ba0      	cmp	r3, #160	; 0xa0
 8002194:	d902      	bls.n	800219c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002196:	2302      	movs	r3, #2
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	e013      	b.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800219c:	2301      	movs	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	e010      	b.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d902      	bls.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a8:	2303      	movs	r3, #3
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	e00a      	b.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b80      	cmp	r3, #128	; 0x80
 80021b2:	d102      	bne.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b4:	2302      	movs	r3, #2
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e004      	b.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b70      	cmp	r3, #112	; 0x70
 80021be:	d101      	bne.n	80021c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c0:	2301      	movs	r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 0207 	bic.w	r2, r3, #7
 80021cc:	4909      	ldr	r1, [pc, #36]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	40022000 	.word	0x40022000

080021f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002200:	2300      	movs	r3, #0
 8002202:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002204:	2300      	movs	r3, #0
 8002206:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03f      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800221c:	d01c      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d802      	bhi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00e      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002228:	e01f      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800222a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222e:	d003      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002230:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002234:	d01c      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002236:	e018      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002238:	4b85      	ldr	r3, [pc, #532]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a84      	ldr	r2, [pc, #528]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002244:	e015      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fab9 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002256:	e00c      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3320      	adds	r3, #32
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fba0 	bl	80029a4 <RCCEx_PLLSAI2_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002268:	e003      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	74fb      	strb	r3, [r7, #19]
      break;
 800226e:	e000      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002286:	4972      	ldr	r1, [pc, #456]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800228e:	e001      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d03f      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a8:	d01c      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80022aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ae:	d802      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00e      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80022b4:	e01f      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80022b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ba:	d003      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80022bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022c0:	d01c      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80022c2:	e018      	b.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a61      	ldr	r2, [pc, #388]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d0:	e015      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fa73 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 80022de:	4603      	mov	r3, r0
 80022e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e2:	e00c      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3320      	adds	r3, #32
 80022e8:	2100      	movs	r1, #0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fb5a 	bl	80029a4 <RCCEx_PLLSAI2_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f4:	e003      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	74fb      	strb	r3, [r7, #19]
      break;
 80022fa:	e000      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80022fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10b      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002304:	4b52      	ldr	r3, [pc, #328]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002312:	494f      	ldr	r1, [pc, #316]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800231a:	e001      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231c:	7cfb      	ldrb	r3, [r7, #19]
 800231e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a0 	beq.w	800246e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002332:	4b47      	ldr	r3, [pc, #284]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b41      	ldr	r3, [pc, #260]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a40      	ldr	r2, [pc, #256]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
 8002354:	4b3e      	ldr	r3, [pc, #248]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	60bb      	str	r3, [r7, #8]
 800235e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002360:	2301      	movs	r3, #1
 8002362:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3a      	ldr	r2, [pc, #232]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002370:	f7fe f8da 	bl	8000528 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002376:	e009      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe f8d6 	bl	8000528 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d902      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	74fb      	strb	r3, [r7, #19]
        break;
 800238a:	e005      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800238c:	4b31      	ldr	r3, [pc, #196]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d15c      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d01f      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d019      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ce:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023e8:	4a19      	ldr	r2, [pc, #100]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d016      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fa:	f7fe f895 	bl	8000528 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002400:	e00b      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe f891 	bl	8000528 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d902      	bls.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	74fb      	strb	r3, [r7, #19]
            break;
 8002418:	e006      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ec      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800243e:	4904      	ldr	r1, [pc, #16]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002446:	e009      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
 800244c:	e006      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7cfb      	ldrb	r3, [r7, #19]
 800245a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245c:	7c7b      	ldrb	r3, [r7, #17]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d105      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002462:	4b9e      	ldr	r3, [pc, #632]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	4a9d      	ldr	r2, [pc, #628]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800246c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247a:	4b98      	ldr	r3, [pc, #608]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 0203 	bic.w	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002488:	4994      	ldr	r1, [pc, #592]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800249c:	4b8f      	ldr	r3, [pc, #572]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 020c 	bic.w	r2, r3, #12
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024aa:	498c      	ldr	r1, [pc, #560]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024be:	4b87      	ldr	r3, [pc, #540]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	4983      	ldr	r1, [pc, #524]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024e0:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ee:	497b      	ldr	r1, [pc, #492]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00a      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002502:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002510:	4972      	ldr	r1, [pc, #456]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002524:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	496a      	ldr	r1, [pc, #424]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002546:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	4961      	ldr	r1, [pc, #388]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002568:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	4959      	ldr	r1, [pc, #356]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002590:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002598:	4950      	ldr	r1, [pc, #320]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	4948      	ldr	r1, [pc, #288]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ce:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	493f      	ldr	r1, [pc, #252]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d028      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f0:	4b3a      	ldr	r3, [pc, #232]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fe:	4937      	ldr	r1, [pc, #220]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260e:	d106      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002610:	4b32      	ldr	r3, [pc, #200]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261a:	60d3      	str	r3, [r2, #12]
 800261c:	e011      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002622:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002626:	d10c      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f8c8 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d028      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800264e:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	491f      	ldr	r1, [pc, #124]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266c:	d106      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266e:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	4a1a      	ldr	r2, [pc, #104]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002678:	60d3      	str	r3, [r2, #12]
 800267a:	e011      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2101      	movs	r1, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f899 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02b      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ba:	4908      	ldr	r1, [pc, #32]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ca:	d109      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a02      	ldr	r2, [pc, #8]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d6:	60d3      	str	r3, [r2, #12]
 80026d8:	e014      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3304      	adds	r3, #4
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f867 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fa:	7cfb      	ldrb	r3, [r7, #19]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02f      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271e:	4928      	ldr	r1, [pc, #160]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800272e:	d10d      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	2102      	movs	r1, #2
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f844 	bl	80027c4 <RCCEx_PLLSAI1_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d014      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	74bb      	strb	r3, [r7, #18]
 800274a:	e011      	b.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002754:	d10c      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3320      	adds	r3, #32
 800275a:	2102      	movs	r1, #2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f921 	bl	80029a4 <RCCEx_PLLSAI2_Config>
 8002762:	4603      	mov	r3, r0
 8002764:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00a      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800277c:	4b10      	ldr	r3, [pc, #64]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	490d      	ldr	r1, [pc, #52]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ae:	4904      	ldr	r1, [pc, #16]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d018      	beq.n	8002810 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027de:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f003 0203 	and.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d10d      	bne.n	800280a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
       ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d009      	beq.n	800280a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027f6:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
       ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d044      	beq.n	8002894 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e041      	b.n	8002894 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d00c      	beq.n	8002832 <RCCEx_PLLSAI1_Config+0x6e>
 8002818:	2b03      	cmp	r3, #3
 800281a:	d013      	beq.n	8002844 <RCCEx_PLLSAI1_Config+0x80>
 800281c:	2b01      	cmp	r3, #1
 800281e:	d120      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002820:	4b5f      	ldr	r3, [pc, #380]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11d      	bne.n	8002868 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002830:	e01a      	b.n	8002868 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002842:	e013      	b.n	800286c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002860:	e006      	b.n	8002870 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      break;
 8002866:	e004      	b.n	8002872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002868:	bf00      	nop
 800286a:	e002      	b.n	8002872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002870:	bf00      	nop
    }

    if(status == HAL_OK)
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002878:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6819      	ldr	r1, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	3b01      	subs	r3, #1
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	430b      	orrs	r3, r1
 800288e:	4944      	ldr	r1, [pc, #272]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d17d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a40      	ldr	r2, [pc, #256]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fd fe3f 	bl	8000528 <HAL_GetTick>
 80028aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028ac:	e009      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028ae:	f7fd fe3b 	bl	8000528 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d902      	bls.n	80028c2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	73fb      	strb	r3, [r7, #15]
        break;
 80028c0:	e005      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ef      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d160      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d111      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	0211      	lsls	r1, r2, #8
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68d2      	ldr	r2, [r2, #12]
 80028f0:	0912      	lsrs	r2, r2, #4
 80028f2:	0452      	lsls	r2, r2, #17
 80028f4:	430a      	orrs	r2, r1
 80028f6:	492a      	ldr	r1, [pc, #168]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	610b      	str	r3, [r1, #16]
 80028fc:	e027      	b.n	800294e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d112      	bne.n	800292a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002904:	4b26      	ldr	r3, [pc, #152]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800290c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6892      	ldr	r2, [r2, #8]
 8002914:	0211      	lsls	r1, r2, #8
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6912      	ldr	r2, [r2, #16]
 800291a:	0852      	lsrs	r2, r2, #1
 800291c:	3a01      	subs	r2, #1
 800291e:	0552      	lsls	r2, r2, #21
 8002920:	430a      	orrs	r2, r1
 8002922:	491f      	ldr	r1, [pc, #124]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	610b      	str	r3, [r1, #16]
 8002928:	e011      	b.n	800294e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	0211      	lsls	r1, r2, #8
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6952      	ldr	r2, [r2, #20]
 8002940:	0852      	lsrs	r2, r2, #1
 8002942:	3a01      	subs	r2, #1
 8002944:	0652      	lsls	r2, r2, #25
 8002946:	430a      	orrs	r2, r1
 8002948:	4915      	ldr	r1, [pc, #84]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002954:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002958:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295a:	f7fd fde5 	bl	8000528 <HAL_GetTick>
 800295e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002960:	e009      	b.n	8002976 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002962:	f7fd fde1 	bl	8000528 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d902      	bls.n	8002976 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	73fb      	strb	r3, [r7, #15]
          break;
 8002974:	e005      	b.n	8002982 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0ef      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d106      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4903      	ldr	r1, [pc, #12]	; (80029a0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000

080029a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029b2:	4b68      	ldr	r3, [pc, #416]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d018      	beq.n	80029f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029be:	4b65      	ldr	r3, [pc, #404]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0203 	and.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10d      	bne.n	80029ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
       ||
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029d6:	4b5f      	ldr	r3, [pc, #380]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
       ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d044      	beq.n	8002a74 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
 80029ee:	e041      	b.n	8002a74 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d00c      	beq.n	8002a12 <RCCEx_PLLSAI2_Config+0x6e>
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d013      	beq.n	8002a24 <RCCEx_PLLSAI2_Config+0x80>
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d120      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a00:	4b54      	ldr	r3, [pc, #336]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d11d      	bne.n	8002a48 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a10:	e01a      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a12:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d116      	bne.n	8002a4c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e013      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10f      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a30:	4b48      	ldr	r3, [pc, #288]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a40:	e006      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      break;
 8002a46:	e004      	b.n	8002a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a48:	bf00      	nop
 8002a4a:	e002      	b.n	8002a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a4c:	bf00      	nop
 8002a4e:	e000      	b.n	8002a52 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002a50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a58:	4b3e      	ldr	r3, [pc, #248]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	4939      	ldr	r1, [pc, #228]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d167      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a7a:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a35      	ldr	r2, [pc, #212]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a86:	f7fd fd4f 	bl	8000528 <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a8c:	e009      	b.n	8002aa2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a8e:	f7fd fd4b 	bl	8000528 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d902      	bls.n	8002aa2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002aa0:	e005      	b.n	8002aae <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1ef      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d14a      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d111      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6892      	ldr	r2, [r2, #8]
 8002aca:	0211      	lsls	r1, r2, #8
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68d2      	ldr	r2, [r2, #12]
 8002ad0:	0912      	lsrs	r2, r2, #4
 8002ad2:	0452      	lsls	r2, r2, #17
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	491f      	ldr	r1, [pc, #124]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	614b      	str	r3, [r1, #20]
 8002adc:	e011      	b.n	8002b02 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ade:	4b1d      	ldr	r3, [pc, #116]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ae6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6892      	ldr	r2, [r2, #8]
 8002aee:	0211      	lsls	r1, r2, #8
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6912      	ldr	r2, [r2, #16]
 8002af4:	0852      	lsrs	r2, r2, #1
 8002af6:	3a01      	subs	r2, #1
 8002af8:	0652      	lsls	r2, r2, #25
 8002afa:	430a      	orrs	r2, r1
 8002afc:	4915      	ldr	r1, [pc, #84]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b02:	4b14      	ldr	r3, [pc, #80]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0e:	f7fd fd0b 	bl	8000528 <HAL_GetTick>
 8002b12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b14:	e009      	b.n	8002b2a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b16:	f7fd fd07 	bl	8000528 <HAL_GetTick>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d902      	bls.n	8002b2a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	73fb      	strb	r3, [r7, #15]
          break;
 8002b28:	e005      	b.n	8002b36 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0ef      	beq.n	8002b16 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b3c:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e049      	b.n	8002bfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f003 f88a 	bl	8005c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3304      	adds	r3, #4
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f000 faa6 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d001      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e04f      	b.n	8002cc0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a23      	ldr	r2, [pc, #140]	; (8002ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01d      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4a:	d018      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00e      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d009      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d004      	beq.n	8002c7e <HAL_TIM_Base_Start_IT+0x76>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d115      	bne.n	8002caa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b06      	cmp	r3, #6
 8002c8e:	d015      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0xb4>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d011      	beq.n	8002cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca8:	e008      	b.n	8002cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0201 	orr.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e000      	b.n	8002cbe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	40013400 	.word	0x40013400
 8002ce0:	40014000 	.word	0x40014000
 8002ce4:	00010007 	.word	0x00010007

08002ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d122      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d11b      	bne.n	8002d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0202 	mvn.w	r2, #2
 8002d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9be 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002d30:	e005      	b.n	8002d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f9b0 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f9c1 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d122      	bne.n	8002d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d11b      	bne.n	8002d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f06f 0204 	mvn.w	r2, #4
 8002d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f994 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f986 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f997 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d122      	bne.n	8002dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0308 	and.w	r3, r3, #8
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d11b      	bne.n	8002dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f06f 0208 	mvn.w	r2, #8
 8002dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f96a 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002dd8:	e005      	b.n	8002de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f95c 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f96d 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d122      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d11b      	bne.n	8002e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0210 	mvn.w	r2, #16
 8002e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2208      	movs	r2, #8
 8002e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f940 	bl	80030ac <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f932 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f943 	bl	80030c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d107      	bne.n	8002e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0201 	mvn.w	r2, #1
 8002e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f002 fdd8 	bl	8005a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e76:	2b80      	cmp	r3, #128	; 0x80
 8002e78:	d10e      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e84:	2b80      	cmp	r3, #128	; 0x80
 8002e86:	d107      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 faee 	bl	8003474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b80      	cmp	r3, #128	; 0x80
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fae1 	bl	8003488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b40      	cmp	r3, #64	; 0x40
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f8f1 	bl	80030d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0220 	mvn.w	r2, #32
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 faa1 	bl	8003460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_ConfigClockSource+0x18>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e0a8      	b.n	8003090 <HAL_TIM_ConfigClockSource+0x16a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d067      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x124>
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d80b      	bhi.n	8002f96 <HAL_TIM_ConfigClockSource+0x70>
 8002f7e:	2b10      	cmp	r3, #16
 8002f80:	d073      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x144>
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d802      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x66>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06f      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f8a:	e078      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d06c      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x144>
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	d06a      	beq.n	800306a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002f94:	e073      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002f96:	2b70      	cmp	r3, #112	; 0x70
 8002f98:	d00d      	beq.n	8002fb6 <HAL_TIM_ConfigClockSource+0x90>
 8002f9a:	2b70      	cmp	r3, #112	; 0x70
 8002f9c:	d804      	bhi.n	8002fa8 <HAL_TIM_ConfigClockSource+0x82>
 8002f9e:	2b50      	cmp	r3, #80	; 0x50
 8002fa0:	d033      	beq.n	800300a <HAL_TIM_ConfigClockSource+0xe4>
 8002fa2:	2b60      	cmp	r3, #96	; 0x60
 8002fa4:	d041      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002fa6:	e06a      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fac:	d066      	beq.n	800307c <HAL_TIM_ConfigClockSource+0x156>
 8002fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb2:	d017      	beq.n	8002fe4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002fb4:	e063      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f000 f9a3 	bl	8003310 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	609a      	str	r2, [r3, #8]
      break;
 8002fe2:	e04c      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f000 f98c 	bl	8003310 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003006:	609a      	str	r2, [r3, #8]
      break;
 8003008:	e039      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	f000 f900 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2150      	movs	r1, #80	; 0x50
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f959 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 8003028:	e029      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	461a      	mov	r2, r3
 8003038:	f000 f91f 	bl	800327a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2160      	movs	r1, #96	; 0x60
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f949 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 8003048:	e019      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6859      	ldr	r1, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	461a      	mov	r2, r3
 8003058:	f000 f8e0 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	4618      	mov	r0, r3
 8003064:	f000 f939 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 8003068:	e009      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4619      	mov	r1, r3
 8003074:	4610      	mov	r0, r2
 8003076:	f000 f930 	bl	80032da <TIM_ITRx_SetConfig>
        break;
 800307a:	e000      	b.n	800307e <HAL_TIM_ConfigClockSource+0x158>
      break;
 800307c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a40      	ldr	r2, [pc, #256]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3d      	ldr	r2, [pc, #244]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3c      	ldr	r2, [pc, #240]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x40>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3a      	ldr	r2, [pc, #232]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d108      	bne.n	800313a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68fa      	ldr	r2, [r7, #12]
 8003136:	4313      	orrs	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <TIM_Base_SetConfig+0x114>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d01b      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <TIM_Base_SetConfig+0x118>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d017      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <TIM_Base_SetConfig+0x11c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <TIM_Base_SetConfig+0x120>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <TIM_Base_SetConfig+0x124>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a28      	ldr	r2, [pc, #160]	; (8003210 <TIM_Base_SetConfig+0x128>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a27      	ldr	r2, [pc, #156]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0x9a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a26      	ldr	r2, [pc, #152]	; (8003218 <TIM_Base_SetConfig+0x130>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a10      	ldr	r2, [pc, #64]	; (80031fc <TIM_Base_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00f      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a12      	ldr	r2, [pc, #72]	; (800320c <TIM_Base_SetConfig+0x124>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00b      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a11      	ldr	r2, [pc, #68]	; (8003210 <TIM_Base_SetConfig+0x128>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a10      	ldr	r2, [pc, #64]	; (8003214 <TIM_Base_SetConfig+0x12c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d003      	beq.n	80031e0 <TIM_Base_SetConfig+0xf8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0f      	ldr	r2, [pc, #60]	; (8003218 <TIM_Base_SetConfig+0x130>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800
 8003208:	40000c00 	.word	0x40000c00
 800320c:	40013400 	.word	0x40013400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 030a 	bic.w	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f023 0210 	bic.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	031b      	lsls	r3, r3, #12
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 0307 	orr.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003310:	b480      	push	{r7}
 8003312:	b087      	sub	sp, #28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800332a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	021a      	lsls	r2, r3, #8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	431a      	orrs	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	4313      	orrs	r3, r2
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	371c      	adds	r7, #28
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003364:	2302      	movs	r3, #2
 8003366:	e068      	b.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2d      	ldr	r2, [pc, #180]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a1e      	ldr	r2, [pc, #120]	; (8003448 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01d      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d018      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00e      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d009      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a13      	ldr	r2, [pc, #76]	; (800344c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10c      	bne.n	8003428 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4313      	orrs	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40013400 	.word	0x40013400
 8003450:	40000400 	.word	0x40000400
 8003454:	40000800 	.word	0x40000800
 8003458:	40000c00 	.word	0x40000c00
 800345c:	40014000 	.word	0x40014000

08003460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e040      	b.n	8003530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f002 fc0e 	bl	8005ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2224      	movs	r2, #36	; 0x24
 80034c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f98c 	bl	80037f8 <UART_SetConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e022      	b.n	8003530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fc0a 	bl	8003d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fc91 	bl	8003e50 <UART_CheckIdleState>
 800352e:	4603      	mov	r3, r0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	2b20      	cmp	r3, #32
 800354e:	f040 8081 	bne.w	8003654 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <HAL_UART_Transmit+0x26>
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e079      	b.n	8003656 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_UART_Transmit+0x38>
 800356c:	2302      	movs	r3, #2
 800356e:	e072      	b.n	8003656 <HAL_UART_Transmit+0x11e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	; 0x21
 8003582:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003584:	f7fc ffd0 	bl	8000528 <HAL_GetTick>
 8003588:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	88fa      	ldrh	r2, [r7, #6]
 800358e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a2:	d108      	bne.n	80035b6 <HAL_UART_Transmit+0x7e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	e003      	b.n	80035be <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80035c6:	e02d      	b.n	8003624 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2180      	movs	r1, #128	; 0x80
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fc81 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e039      	b.n	8003656 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	b292      	uxth	r2, r2
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	3302      	adds	r3, #2
 80035fc:	61bb      	str	r3, [r7, #24]
 80035fe:	e008      	b.n	8003612 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	b292      	uxth	r2, r2
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1cb      	bne.n	80035c8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2200      	movs	r2, #0
 8003638:	2140      	movs	r1, #64	; 0x40
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 fc4d 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e005      	b.n	8003656 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b08a      	sub	sp, #40	; 0x28
 8003662:	af02      	add	r7, sp, #8
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003672:	2b20      	cmp	r3, #32
 8003674:	f040 80bb 	bne.w	80037ee <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Receive+0x26>
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b3      	b.n	80037f0 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_UART_Receive+0x38>
 8003692:	2302      	movs	r3, #2
 8003694:	e0ac      	b.n	80037f0 <HAL_UART_Receive+0x192>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2222      	movs	r2, #34	; 0x22
 80036a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036aa:	f7fc ff3d 	bl	8000528 <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	88fa      	ldrh	r2, [r7, #6]
 80036bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c8:	d10e      	bne.n	80036e8 <HAL_UART_Receive+0x8a>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d105      	bne.n	80036de <HAL_UART_Receive+0x80>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80036d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036dc:	e02d      	b.n	800373a <HAL_UART_Receive+0xdc>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036e6:	e028      	b.n	800373a <HAL_UART_Receive+0xdc>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_UART_Receive+0xae>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <HAL_UART_Receive+0xa4>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003700:	e01b      	b.n	800373a <HAL_UART_Receive+0xdc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	227f      	movs	r2, #127	; 0x7f
 8003706:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800370a:	e016      	b.n	800373a <HAL_UART_Receive+0xdc>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003714:	d10d      	bne.n	8003732 <HAL_UART_Receive+0xd4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d104      	bne.n	8003728 <HAL_UART_Receive+0xca>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	227f      	movs	r2, #127	; 0x7f
 8003722:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003726:	e008      	b.n	800373a <HAL_UART_Receive+0xdc>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	223f      	movs	r2, #63	; 0x3f
 800372c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003730:	e003      	b.n	800373a <HAL_UART_Receive+0xdc>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003740:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d108      	bne.n	800375e <HAL_UART_Receive+0x100>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	e003      	b.n	8003766 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800376e:	e033      	b.n	80037d8 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2200      	movs	r2, #0
 8003778:	2120      	movs	r1, #32
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 fbad 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e032      	b.n	80037f0 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10c      	bne.n	80037aa <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003796:	b29a      	uxth	r2, r3
 8003798:	8a7b      	ldrh	r3, [r7, #18]
 800379a:	4013      	ands	r3, r2
 800379c:	b29a      	uxth	r2, r3
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	3302      	adds	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
 80037a8:	e00d      	b.n	80037c6 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	b2da      	uxtb	r2, r3
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4013      	ands	r3, r2
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3301      	adds	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1c5      	bne.n	8003770 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037fc:	b088      	sub	sp, #32
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4313      	orrs	r3, r2
 800381c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4bac      	ldr	r3, [pc, #688]	; (8003ad8 <UART_SetConfig+0x2e0>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	69f9      	ldr	r1, [r7, #28]
 800382e:	430b      	orrs	r3, r1
 8003830:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4aa2      	ldr	r2, [pc, #648]	; (8003adc <UART_SetConfig+0x2e4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	4313      	orrs	r3, r2
 8003860:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a99      	ldr	r2, [pc, #612]	; (8003ae0 <UART_SetConfig+0x2e8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d121      	bne.n	80038c4 <UART_SetConfig+0xcc>
 8003880:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <UART_SetConfig+0x2ec>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d816      	bhi.n	80038bc <UART_SetConfig+0xc4>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0x9c>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038b1 	.word	0x080038b1
 800389c:	080038ab 	.word	0x080038ab
 80038a0:	080038b7 	.word	0x080038b7
 80038a4:	2301      	movs	r3, #1
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e0e8      	b.n	8003a7c <UART_SetConfig+0x284>
 80038aa:	2302      	movs	r3, #2
 80038ac:	76fb      	strb	r3, [r7, #27]
 80038ae:	e0e5      	b.n	8003a7c <UART_SetConfig+0x284>
 80038b0:	2304      	movs	r3, #4
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	e0e2      	b.n	8003a7c <UART_SetConfig+0x284>
 80038b6:	2308      	movs	r3, #8
 80038b8:	76fb      	strb	r3, [r7, #27]
 80038ba:	e0df      	b.n	8003a7c <UART_SetConfig+0x284>
 80038bc:	2310      	movs	r3, #16
 80038be:	76fb      	strb	r3, [r7, #27]
 80038c0:	bf00      	nop
 80038c2:	e0db      	b.n	8003a7c <UART_SetConfig+0x284>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a87      	ldr	r2, [pc, #540]	; (8003ae8 <UART_SetConfig+0x2f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d134      	bne.n	8003938 <UART_SetConfig+0x140>
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <UART_SetConfig+0x2ec>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d829      	bhi.n	8003930 <UART_SetConfig+0x138>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0xec>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003931 	.word	0x08003931
 80038ec:	08003931 	.word	0x08003931
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003925 	.word	0x08003925
 80038f8:	08003931 	.word	0x08003931
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003931 	.word	0x08003931
 8003904:	0800391f 	.word	0x0800391f
 8003908:	08003931 	.word	0x08003931
 800390c:	08003931 	.word	0x08003931
 8003910:	08003931 	.word	0x08003931
 8003914:	0800392b 	.word	0x0800392b
 8003918:	2300      	movs	r3, #0
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	e0ae      	b.n	8003a7c <UART_SetConfig+0x284>
 800391e:	2302      	movs	r3, #2
 8003920:	76fb      	strb	r3, [r7, #27]
 8003922:	e0ab      	b.n	8003a7c <UART_SetConfig+0x284>
 8003924:	2304      	movs	r3, #4
 8003926:	76fb      	strb	r3, [r7, #27]
 8003928:	e0a8      	b.n	8003a7c <UART_SetConfig+0x284>
 800392a:	2308      	movs	r3, #8
 800392c:	76fb      	strb	r3, [r7, #27]
 800392e:	e0a5      	b.n	8003a7c <UART_SetConfig+0x284>
 8003930:	2310      	movs	r3, #16
 8003932:	76fb      	strb	r3, [r7, #27]
 8003934:	bf00      	nop
 8003936:	e0a1      	b.n	8003a7c <UART_SetConfig+0x284>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6b      	ldr	r2, [pc, #428]	; (8003aec <UART_SetConfig+0x2f4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d120      	bne.n	8003984 <UART_SetConfig+0x18c>
 8003942:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <UART_SetConfig+0x2ec>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800394c:	2b10      	cmp	r3, #16
 800394e:	d00f      	beq.n	8003970 <UART_SetConfig+0x178>
 8003950:	2b10      	cmp	r3, #16
 8003952:	d802      	bhi.n	800395a <UART_SetConfig+0x162>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0x16c>
 8003958:	e010      	b.n	800397c <UART_SetConfig+0x184>
 800395a:	2b20      	cmp	r3, #32
 800395c:	d005      	beq.n	800396a <UART_SetConfig+0x172>
 800395e:	2b30      	cmp	r3, #48	; 0x30
 8003960:	d009      	beq.n	8003976 <UART_SetConfig+0x17e>
 8003962:	e00b      	b.n	800397c <UART_SetConfig+0x184>
 8003964:	2300      	movs	r3, #0
 8003966:	76fb      	strb	r3, [r7, #27]
 8003968:	e088      	b.n	8003a7c <UART_SetConfig+0x284>
 800396a:	2302      	movs	r3, #2
 800396c:	76fb      	strb	r3, [r7, #27]
 800396e:	e085      	b.n	8003a7c <UART_SetConfig+0x284>
 8003970:	2304      	movs	r3, #4
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	e082      	b.n	8003a7c <UART_SetConfig+0x284>
 8003976:	2308      	movs	r3, #8
 8003978:	76fb      	strb	r3, [r7, #27]
 800397a:	e07f      	b.n	8003a7c <UART_SetConfig+0x284>
 800397c:	2310      	movs	r3, #16
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	bf00      	nop
 8003982:	e07b      	b.n	8003a7c <UART_SetConfig+0x284>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a59      	ldr	r2, [pc, #356]	; (8003af0 <UART_SetConfig+0x2f8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d120      	bne.n	80039d0 <UART_SetConfig+0x1d8>
 800398e:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <UART_SetConfig+0x2ec>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d00f      	beq.n	80039bc <UART_SetConfig+0x1c4>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d802      	bhi.n	80039a6 <UART_SetConfig+0x1ae>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <UART_SetConfig+0x1b8>
 80039a4:	e010      	b.n	80039c8 <UART_SetConfig+0x1d0>
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d005      	beq.n	80039b6 <UART_SetConfig+0x1be>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d009      	beq.n	80039c2 <UART_SetConfig+0x1ca>
 80039ae:	e00b      	b.n	80039c8 <UART_SetConfig+0x1d0>
 80039b0:	2300      	movs	r3, #0
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e062      	b.n	8003a7c <UART_SetConfig+0x284>
 80039b6:	2302      	movs	r3, #2
 80039b8:	76fb      	strb	r3, [r7, #27]
 80039ba:	e05f      	b.n	8003a7c <UART_SetConfig+0x284>
 80039bc:	2304      	movs	r3, #4
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	e05c      	b.n	8003a7c <UART_SetConfig+0x284>
 80039c2:	2308      	movs	r3, #8
 80039c4:	76fb      	strb	r3, [r7, #27]
 80039c6:	e059      	b.n	8003a7c <UART_SetConfig+0x284>
 80039c8:	2310      	movs	r3, #16
 80039ca:	76fb      	strb	r3, [r7, #27]
 80039cc:	bf00      	nop
 80039ce:	e055      	b.n	8003a7c <UART_SetConfig+0x284>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a47      	ldr	r2, [pc, #284]	; (8003af4 <UART_SetConfig+0x2fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d124      	bne.n	8003a24 <UART_SetConfig+0x22c>
 80039da:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <UART_SetConfig+0x2ec>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d012      	beq.n	8003a10 <UART_SetConfig+0x218>
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ee:	d802      	bhi.n	80039f6 <UART_SetConfig+0x1fe>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <UART_SetConfig+0x20c>
 80039f4:	e012      	b.n	8003a1c <UART_SetConfig+0x224>
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fa:	d006      	beq.n	8003a0a <UART_SetConfig+0x212>
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a00:	d009      	beq.n	8003a16 <UART_SetConfig+0x21e>
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x224>
 8003a04:	2300      	movs	r3, #0
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e038      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e035      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a10:	2304      	movs	r3, #4
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e032      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a16:	2308      	movs	r3, #8
 8003a18:	76fb      	strb	r3, [r7, #27]
 8003a1a:	e02f      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	bf00      	nop
 8003a22:	e02b      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <UART_SetConfig+0x2e4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d124      	bne.n	8003a78 <UART_SetConfig+0x280>
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <UART_SetConfig+0x2ec>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d012      	beq.n	8003a64 <UART_SetConfig+0x26c>
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d802      	bhi.n	8003a4a <UART_SetConfig+0x252>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <UART_SetConfig+0x260>
 8003a48:	e012      	b.n	8003a70 <UART_SetConfig+0x278>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d006      	beq.n	8003a5e <UART_SetConfig+0x266>
 8003a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x272>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x278>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	e00e      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	76fb      	strb	r3, [r7, #27]
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a64:	2304      	movs	r3, #4
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e008      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e005      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a70:	2310      	movs	r3, #16
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	bf00      	nop
 8003a76:	e001      	b.n	8003a7c <UART_SetConfig+0x284>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a16      	ldr	r2, [pc, #88]	; (8003adc <UART_SetConfig+0x2e4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f040 8087 	bne.w	8003b96 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a88:	7efb      	ldrb	r3, [r7, #27]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d836      	bhi.n	8003afc <UART_SetConfig+0x304>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0x29c>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003afd 	.word	0x08003afd
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003afd 	.word	0x08003afd
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7fe fae0 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003abc:	6178      	str	r0, [r7, #20]
        break;
 8003abe:	e022      	b.n	8003b06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <UART_SetConfig+0x300>)
 8003ac2:	617b      	str	r3, [r7, #20]
        break;
 8003ac4:	e01f      	b.n	8003b06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fa43 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8003aca:	6178      	str	r0, [r7, #20]
        break;
 8003acc:	e01b      	b.n	8003b06 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	617b      	str	r3, [r7, #20]
        break;
 8003ad4:	e017      	b.n	8003b06 <UART_SetConfig+0x30e>
 8003ad6:	bf00      	nop
 8003ad8:	efff69f3 	.word	0xefff69f3
 8003adc:	40008000 	.word	0x40008000
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	40004800 	.word	0x40004800
 8003af0:	40004c00 	.word	0x40004c00
 8003af4:	40005000 	.word	0x40005000
 8003af8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	76bb      	strb	r3, [r7, #26]
        break;
 8003b04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80f1 	beq.w	8003cf0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	4413      	add	r3, r2
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d305      	bcc.n	8003b2a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d902      	bls.n	8003b30 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	76bb      	strb	r3, [r7, #26]
 8003b2e:	e0df      	b.n	8003cf0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	4619      	mov	r1, r3
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	f04f 0400 	mov.w	r4, #0
 8003b40:	0214      	lsls	r4, r2, #8
 8003b42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b46:	020b      	lsls	r3, r1, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6852      	ldr	r2, [r2, #4]
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	eb13 0b01 	adds.w	fp, r3, r1
 8003b58:	eb44 0c02 	adc.w	ip, r4, r2
 8003b5c:	4658      	mov	r0, fp
 8003b5e:	4661      	mov	r1, ip
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f04f 0400 	mov.w	r4, #0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	f7fc fb30 	bl	80001d0 <__aeabi_uldivmod>
 8003b70:	4603      	mov	r3, r0
 8003b72:	460c      	mov	r4, r1
 8003b74:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b7c:	d308      	bcc.n	8003b90 <UART_SetConfig+0x398>
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b84:	d204      	bcs.n	8003b90 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	e0af      	b.n	8003cf0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	76bb      	strb	r3, [r7, #26]
 8003b94:	e0ac      	b.n	8003cf0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9e:	d15b      	bne.n	8003c58 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d827      	bhi.n	8003bf6 <UART_SetConfig+0x3fe>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <UART_SetConfig+0x3b4>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003be1 	.word	0x08003be1
 8003bb8:	08003bf7 	.word	0x08003bf7
 8003bbc:	08003be7 	.word	0x08003be7
 8003bc0:	08003bf7 	.word	0x08003bf7
 8003bc4:	08003bf7 	.word	0x08003bf7
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f7fe fa54 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003bd4:	6178      	str	r0, [r7, #20]
        break;
 8003bd6:	e013      	b.n	8003c00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7fe fa66 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003bdc:	6178      	str	r0, [r7, #20]
        break;
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <UART_SetConfig+0x510>)
 8003be2:	617b      	str	r3, [r7, #20]
        break;
 8003be4:	e00c      	b.n	8003c00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7fe f9b3 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8003bea:	6178      	str	r0, [r7, #20]
        break;
 8003bec:	e008      	b.n	8003c00 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	617b      	str	r3, [r7, #20]
        break;
 8003bf4:	e004      	b.n	8003c00 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	76bb      	strb	r3, [r7, #26]
        break;
 8003bfe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d074      	beq.n	8003cf0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	005a      	lsls	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b0f      	cmp	r3, #15
 8003c22:	d916      	bls.n	8003c52 <UART_SetConfig+0x45a>
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d212      	bcs.n	8003c52 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	085b      	lsrs	r3, r3, #1
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	89fb      	ldrh	r3, [r7, #14]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	89fa      	ldrh	r2, [r7, #14]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e04e      	b.n	8003cf0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	76bb      	strb	r3, [r7, #26]
 8003c56:	e04b      	b.n	8003cf0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c58:	7efb      	ldrb	r3, [r7, #27]
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d827      	bhi.n	8003cae <UART_SetConfig+0x4b6>
 8003c5e:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <UART_SetConfig+0x46c>)
 8003c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c64:	08003c89 	.word	0x08003c89
 8003c68:	08003c91 	.word	0x08003c91
 8003c6c:	08003c99 	.word	0x08003c99
 8003c70:	08003caf 	.word	0x08003caf
 8003c74:	08003c9f 	.word	0x08003c9f
 8003c78:	08003caf 	.word	0x08003caf
 8003c7c:	08003caf 	.word	0x08003caf
 8003c80:	08003caf 	.word	0x08003caf
 8003c84:	08003ca7 	.word	0x08003ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7fe f9f8 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8003c8c:	6178      	str	r0, [r7, #20]
        break;
 8003c8e:	e013      	b.n	8003cb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c90:	f7fe fa0a 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 8003c94:	6178      	str	r0, [r7, #20]
        break;
 8003c96:	e00f      	b.n	8003cb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c98:	4b1b      	ldr	r3, [pc, #108]	; (8003d08 <UART_SetConfig+0x510>)
 8003c9a:	617b      	str	r3, [r7, #20]
        break;
 8003c9c:	e00c      	b.n	8003cb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c9e:	f7fe f957 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8003ca2:	6178      	str	r0, [r7, #20]
        break;
 8003ca4:	e008      	b.n	8003cb8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003caa:	617b      	str	r3, [r7, #20]
        break;
 8003cac:	e004      	b.n	8003cb8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	76bb      	strb	r3, [r7, #26]
        break;
 8003cb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d018      	beq.n	8003cf0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085a      	lsrs	r2, r3, #1
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	441a      	add	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d908      	bls.n	8003cec <UART_SetConfig+0x4f4>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d204      	bcs.n	8003cec <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	e001      	b.n	8003cf0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003cfc:	7ebb      	ldrb	r3, [r7, #26]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3720      	adds	r7, #32
 8003d02:	46bd      	mov	sp, r7
 8003d04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d08:	00f42400 	.word	0x00f42400

08003d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00a      	beq.n	8003dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00a      	beq.n	8003de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d01a      	beq.n	8003e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e0a:	d10a      	bne.n	8003e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e5e:	f7fc fb63 	bl	8000528 <HAL_GetTick>
 8003e62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d10e      	bne.n	8003e90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f82a 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e020      	b.n	8003ed2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d10e      	bne.n	8003ebc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ea2:	9300      	str	r3, [sp, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f814 	bl	8003eda <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e00a      	b.n	8003ed2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eea:	e05d      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d059      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef4:	f7fc fb18 	bl	8000528 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d302      	bcc.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11b      	bne.n	8003f42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e042      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02b      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5e:	d123      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0201 	bic.w	r2, r2, #1
 8003f88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e00f      	b.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d092      	beq.n	8003eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003fde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe2:	2b84      	cmp	r3, #132	; 0x84
 8003fe4:	d005      	beq.n	8003ff2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003fe6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	3303      	adds	r3, #3
 8003ff0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004004:	f000 fada 	bl	80045bc <vTaskStartScheduler>
  
  return osOK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	bd80      	pop	{r7, pc}

0800400e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800400e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004010:	b089      	sub	sp, #36	; 0x24
 8004012:	af04      	add	r7, sp, #16
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d020      	beq.n	8004062 <osThreadCreate+0x54>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01c      	beq.n	8004062 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685c      	ldr	r4, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681d      	ldr	r5, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691e      	ldr	r6, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff ffc8 	bl	8003fd0 <makeFreeRtosPriority>
 8004040:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800404a:	9202      	str	r2, [sp, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	9100      	str	r1, [sp, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4632      	mov	r2, r6
 8004054:	4629      	mov	r1, r5
 8004056:	4620      	mov	r0, r4
 8004058:	f000 f8ed 	bl	8004236 <xTaskCreateStatic>
 800405c:	4603      	mov	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e01c      	b.n	800409c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685c      	ldr	r4, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800406e:	b29e      	uxth	r6, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ffaa 	bl	8003fd0 <makeFreeRtosPriority>
 800407c:	4602      	mov	r2, r0
 800407e:	f107 030c 	add.w	r3, r7, #12
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	9200      	str	r2, [sp, #0]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	4632      	mov	r2, r6
 800408a:	4629      	mov	r1, r5
 800408c:	4620      	mov	r0, r4
 800408e:	f000 f92c 	bl	80042ea <xTaskCreate>
 8004092:	4603      	mov	r3, r0
 8004094:	2b01      	cmp	r3, #1
 8004096:	d001      	beq.n	800409c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	e000      	b.n	800409e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <osDelay+0x16>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	e000      	b.n	80040be <osDelay+0x18>
 80040bc:	2301      	movs	r3, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fa48 	bl	8004554 <vTaskDelay>
  
  return osOK;
 80040c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f103 0208 	add.w	r2, r3, #8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f103 0208 	add.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f103 0208 	add.w	r2, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d103      	bne.n	8004190 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e00c      	b.n	80041aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3308      	adds	r3, #8
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e002      	b.n	800419e <vListInsert+0x2e>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d2f6      	bcs.n	8004198 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr

080041e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6892      	ldr	r2, [r2, #8]
 80041f8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6852      	ldr	r2, [r2, #4]
 8004202:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d103      	bne.n	8004216 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1e5a      	subs	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004236:	b580      	push	{r7, lr}
 8004238:	b08e      	sub	sp, #56	; 0x38
 800423a:	af04      	add	r7, sp, #16
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	e7fe      	b.n	800425c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xTaskCreateStatic+0x42>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e7fe      	b.n	8004276 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004278:	2354      	movs	r3, #84	; 0x54
 800427a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b54      	cmp	r3, #84	; 0x54
 8004280:	d009      	beq.n	8004296 <xTaskCreateStatic+0x60>
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	61bb      	str	r3, [r7, #24]
 8004294:	e7fe      	b.n	8004294 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004296:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01e      	beq.n	80042dc <xTaskCreateStatic+0xa6>
 800429e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80042b6:	2300      	movs	r3, #0
 80042b8:	9303      	str	r3, [sp, #12]
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	9302      	str	r3, [sp, #8]
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f850 	bl	8004374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d6:	f000 f8d3 	bl	8004480 <prvAddNewTaskToReadyList>
 80042da:	e001      	b.n	80042e0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042e0:	697b      	ldr	r3, [r7, #20]
	}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3728      	adds	r7, #40	; 0x28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b08c      	sub	sp, #48	; 0x30
 80042ee:	af04      	add	r7, sp, #16
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042fa:	88fb      	ldrh	r3, [r7, #6]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 feb0 	bl	8005064 <pvPortMalloc>
 8004304:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800430c:	2054      	movs	r0, #84	; 0x54
 800430e:	f000 fea9 	bl	8005064 <pvPortMalloc>
 8004312:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
 8004320:	e005      	b.n	800432e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004322:	6978      	ldr	r0, [r7, #20]
 8004324:	f000 ff60 	bl	80051e8 <vPortFree>
 8004328:	e001      	b.n	800432e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d017      	beq.n	8004364 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	2300      	movs	r3, #0
 8004340:	9303      	str	r3, [sp, #12]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	9302      	str	r3, [sp, #8]
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f80e 	bl	8004374 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004358:	69f8      	ldr	r0, [r7, #28]
 800435a:	f000 f891 	bl	8004480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800435e:	2301      	movs	r3, #1
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	e002      	b.n	800436a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004364:	f04f 33ff 	mov.w	r3, #4294967295
 8004368:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800436a:	69bb      	ldr	r3, [r7, #24]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3720      	adds	r7, #32
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800438c:	3b01      	subs	r3, #1
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	f023 0307 	bic.w	r3, r3, #7
 800439a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <prvInitialiseNewTask+0x46>
 80043a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043aa:	f383 8811 	msr	BASEPRI, r3
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e7fe      	b.n	80043b8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043c0:	2300      	movs	r3, #0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	e012      	b.n	80043ec <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	7819      	ldrb	r1, [r3, #0]
 80043ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	3334      	adds	r3, #52	; 0x34
 80043d6:	460a      	mov	r2, r1
 80043d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	4413      	add	r3, r2
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d006      	beq.n	80043f4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3301      	adds	r3, #1
 80043ea:	61fb      	str	r3, [r7, #28]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	2b0f      	cmp	r3, #15
 80043f0:	d9e9      	bls.n	80043c6 <prvInitialiseNewTask+0x52>
 80043f2:	e000      	b.n	80043f6 <prvInitialiseNewTask+0x82>
			{
				break;
 80043f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043fe:	e003      	b.n	8004408 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440a:	2b06      	cmp	r3, #6
 800440c:	d901      	bls.n	8004412 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800440e:	2306      	movs	r3, #6
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004416:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2200      	movs	r2, #0
 8004422:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	3304      	adds	r3, #4
 8004428:	4618      	mov	r0, r3
 800442a:	f7ff fe70 	bl	800410e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	3318      	adds	r3, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fe6b 	bl	800410e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800443c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	f1c3 0207 	rsb	r2, r3, #7
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	68f9      	ldr	r1, [r7, #12]
 8004460:	69b8      	ldr	r0, [r7, #24]
 8004462:	f000 fbfd 	bl	8004c60 <pxPortInitialiseStack>
 8004466:	4602      	mov	r2, r0
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800446c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d002      	beq.n	8004478 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004476:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004478:	bf00      	nop
 800447a:	3720      	adds	r7, #32
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004488:	f000 fd10 	bl	8004eac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <prvAddNewTaskToReadyList+0xb8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3301      	adds	r3, #1
 8004492:	4a29      	ldr	r2, [pc, #164]	; (8004538 <prvAddNewTaskToReadyList+0xb8>)
 8004494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004496:	4b29      	ldr	r3, [pc, #164]	; (800453c <prvAddNewTaskToReadyList+0xbc>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800449e:	4a27      	ldr	r2, [pc, #156]	; (800453c <prvAddNewTaskToReadyList+0xbc>)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <prvAddNewTaskToReadyList+0xb8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d110      	bne.n	80044ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044ac:	f000 fab8 	bl	8004a20 <prvInitialiseTaskLists>
 80044b0:	e00d      	b.n	80044ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <prvAddNewTaskToReadyList+0xc0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ba:	4b20      	ldr	r3, [pc, #128]	; (800453c <prvAddNewTaskToReadyList+0xbc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d802      	bhi.n	80044ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <prvAddNewTaskToReadyList+0xbc>)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044ce:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <prvAddNewTaskToReadyList+0xc4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3301      	adds	r3, #1
 80044d4:	4a1b      	ldr	r2, [pc, #108]	; (8004544 <prvAddNewTaskToReadyList+0xc4>)
 80044d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	2201      	movs	r2, #1
 80044de:	409a      	lsls	r2, r3
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <prvAddNewTaskToReadyList+0xc8>)
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <prvAddNewTaskToReadyList+0xcc>)
 80044f8:	441a      	add	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	4610      	mov	r0, r2
 8004502:	f7ff fe11 	bl	8004128 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004506:	f000 fcff 	bl	8004f08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <prvAddNewTaskToReadyList+0xc0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <prvAddNewTaskToReadyList+0xbc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	429a      	cmp	r2, r3
 800451e:	d207      	bcs.n	8004530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <prvAddNewTaskToReadyList+0xd0>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	200001f0 	.word	0x200001f0
 800453c:	200000f0 	.word	0x200000f0
 8004540:	200001fc 	.word	0x200001fc
 8004544:	2000020c 	.word	0x2000020c
 8004548:	200001f8 	.word	0x200001f8
 800454c:	200000f4 	.word	0x200000f4
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d016      	beq.n	8004594 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <vTaskDelay+0x60>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <vTaskDelay+0x2e>
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	e7fe      	b.n	8004580 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004582:	f000 f879 	bl	8004678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004586:	2100      	movs	r1, #0
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb03 	bl	8004b94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800458e:	f000 f881 	bl	8004694 <xTaskResumeAll>
 8004592:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d107      	bne.n	80045aa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <vTaskDelay+0x64>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000218 	.word	0x20000218
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	; 0x28
 80045c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ca:	463a      	mov	r2, r7
 80045cc:	1d39      	adds	r1, r7, #4
 80045ce:	f107 0308 	add.w	r3, r7, #8
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 ff1c 	bl	8005410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045d8:	6839      	ldr	r1, [r7, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	9202      	str	r2, [sp, #8]
 80045e0:	9301      	str	r3, [sp, #4]
 80045e2:	2300      	movs	r3, #0
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2300      	movs	r3, #0
 80045e8:	460a      	mov	r2, r1
 80045ea:	491d      	ldr	r1, [pc, #116]	; (8004660 <vTaskStartScheduler+0xa4>)
 80045ec:	481d      	ldr	r0, [pc, #116]	; (8004664 <vTaskStartScheduler+0xa8>)
 80045ee:	f7ff fe22 	bl	8004236 <xTaskCreateStatic>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <vTaskStartScheduler+0xac>)
 80045f6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <vTaskStartScheduler+0xac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e001      	b.n	800460a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d115      	bne.n	800463c <vTaskStartScheduler+0x80>
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004622:	4b12      	ldr	r3, [pc, #72]	; (800466c <vTaskStartScheduler+0xb0>)
 8004624:	f04f 32ff 	mov.w	r2, #4294967295
 8004628:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <vTaskStartScheduler+0xb4>)
 800462c:	2201      	movs	r2, #1
 800462e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004630:	4b10      	ldr	r3, [pc, #64]	; (8004674 <vTaskStartScheduler+0xb8>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004636:	f000 fb9b 	bl	8004d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800463a:	e00d      	b.n	8004658 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004642:	d109      	bne.n	8004658 <vTaskStartScheduler+0x9c>
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e7fe      	b.n	8004656 <vTaskStartScheduler+0x9a>
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	08005fcc 	.word	0x08005fcc
 8004664:	080049f1 	.word	0x080049f1
 8004668:	20000214 	.word	0x20000214
 800466c:	20000210 	.word	0x20000210
 8004670:	200001fc 	.word	0x200001fc
 8004674:	200001f4 	.word	0x200001f4

08004678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <vTaskSuspendAll+0x18>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	4a03      	ldr	r2, [pc, #12]	; (8004690 <vTaskSuspendAll+0x18>)
 8004684:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	20000218 	.word	0x20000218

08004694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800469e:	2300      	movs	r3, #0
 80046a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046a2:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <xTaskResumeAll+0x114>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d109      	bne.n	80046be <xTaskResumeAll+0x2a>
 80046aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	e7fe      	b.n	80046bc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046be:	f000 fbf5 	bl	8004eac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046c2:	4b39      	ldr	r3, [pc, #228]	; (80047a8 <xTaskResumeAll+0x114>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	4a37      	ldr	r2, [pc, #220]	; (80047a8 <xTaskResumeAll+0x114>)
 80046ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046cc:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <xTaskResumeAll+0x114>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d161      	bne.n	8004798 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046d4:	4b35      	ldr	r3, [pc, #212]	; (80047ac <xTaskResumeAll+0x118>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05d      	beq.n	8004798 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046dc:	e02e      	b.n	800473c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <xTaskResumeAll+0x11c>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	3318      	adds	r3, #24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fd79 	bl	80041e2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	3304      	adds	r3, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fd74 	bl	80041e2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fe:	2201      	movs	r2, #1
 8004700:	409a      	lsls	r2, r3
 8004702:	4b2c      	ldr	r3, [pc, #176]	; (80047b4 <xTaskResumeAll+0x120>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	4a2a      	ldr	r2, [pc, #168]	; (80047b4 <xTaskResumeAll+0x120>)
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a27      	ldr	r2, [pc, #156]	; (80047b8 <xTaskResumeAll+0x124>)
 800471a:	441a      	add	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7ff fd00 	bl	8004128 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <xTaskResumeAll+0x128>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <xTaskResumeAll+0x12c>)
 8004738:	2201      	movs	r2, #1
 800473a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <xTaskResumeAll+0x11c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1cc      	bne.n	80046de <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800474a:	f000 fa03 	bl	8004b54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <xTaskResumeAll+0x130>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d010      	beq.n	800477c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800475a:	f000 f837 	bl	80047cc <xTaskIncrementTick>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <xTaskResumeAll+0x12c>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3b01      	subs	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f1      	bne.n	800475a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <xTaskResumeAll+0x130>)
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800477c:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <xTaskResumeAll+0x12c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <xTaskResumeAll+0x134>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004798:	f000 fbb6 	bl	8004f08 <vPortExitCritical>

	return xAlreadyYielded;
 800479c:	68bb      	ldr	r3, [r7, #8]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000218 	.word	0x20000218
 80047ac:	200001f0 	.word	0x200001f0
 80047b0:	200001b0 	.word	0x200001b0
 80047b4:	200001f8 	.word	0x200001f8
 80047b8:	200000f4 	.word	0x200000f4
 80047bc:	200000f0 	.word	0x200000f0
 80047c0:	20000204 	.word	0x20000204
 80047c4:	20000200 	.word	0x20000200
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d6:	4b4e      	ldr	r3, [pc, #312]	; (8004910 <xTaskIncrementTick+0x144>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f040 8087 	bne.w	80048ee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047e0:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <xTaskIncrementTick+0x148>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3301      	adds	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047e8:	4a4a      	ldr	r2, [pc, #296]	; (8004914 <xTaskIncrementTick+0x148>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11f      	bne.n	8004834 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <xTaskIncrementTick+0x14c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <xTaskIncrementTick+0x46>
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	e7fe      	b.n	8004810 <xTaskIncrementTick+0x44>
 8004812:	4b41      	ldr	r3, [pc, #260]	; (8004918 <xTaskIncrementTick+0x14c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	4b40      	ldr	r3, [pc, #256]	; (800491c <xTaskIncrementTick+0x150>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <xTaskIncrementTick+0x14c>)
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4a3e      	ldr	r2, [pc, #248]	; (800491c <xTaskIncrementTick+0x150>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b3e      	ldr	r3, [pc, #248]	; (8004920 <xTaskIncrementTick+0x154>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	4a3c      	ldr	r2, [pc, #240]	; (8004920 <xTaskIncrementTick+0x154>)
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	f000 f990 	bl	8004b54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004834:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <xTaskIncrementTick+0x158>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	429a      	cmp	r2, r3
 800483c:	d348      	bcc.n	80048d0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <xTaskIncrementTick+0x14c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004848:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskIncrementTick+0x158>)
 800484a:	f04f 32ff 	mov.w	r2, #4294967295
 800484e:	601a      	str	r2, [r3, #0]
					break;
 8004850:	e03e      	b.n	80048d0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004852:	4b31      	ldr	r3, [pc, #196]	; (8004918 <xTaskIncrementTick+0x14c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	429a      	cmp	r2, r3
 8004868:	d203      	bcs.n	8004872 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800486a:	4a2e      	ldr	r2, [pc, #184]	; (8004924 <xTaskIncrementTick+0x158>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004870:	e02e      	b.n	80048d0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	3304      	adds	r3, #4
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fcb3 	bl	80041e2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3318      	adds	r3, #24
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fcaa 	bl	80041e2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	2201      	movs	r2, #1
 8004894:	409a      	lsls	r2, r3
 8004896:	4b24      	ldr	r3, [pc, #144]	; (8004928 <xTaskIncrementTick+0x15c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4313      	orrs	r3, r2
 800489c:	4a22      	ldr	r2, [pc, #136]	; (8004928 <xTaskIncrementTick+0x15c>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <xTaskIncrementTick+0x160>)
 80048ae:	441a      	add	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f7ff fc36 	bl	8004128 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <xTaskIncrementTick+0x164>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3b9      	bcc.n	800483e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048ca:	2301      	movs	r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ce:	e7b6      	b.n	800483e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048d0:	4b17      	ldr	r3, [pc, #92]	; (8004930 <xTaskIncrementTick+0x164>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4915      	ldr	r1, [pc, #84]	; (800492c <xTaskIncrementTick+0x160>)
 80048d8:	4613      	mov	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d907      	bls.n	80048f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e004      	b.n	80048f8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <xTaskIncrementTick+0x168>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3301      	adds	r3, #1
 80048f4:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <xTaskIncrementTick+0x168>)
 80048f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <xTaskIncrementTick+0x16c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004900:	2301      	movs	r3, #1
 8004902:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004904:	697b      	ldr	r3, [r7, #20]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000218 	.word	0x20000218
 8004914:	200001f4 	.word	0x200001f4
 8004918:	200001a8 	.word	0x200001a8
 800491c:	200001ac 	.word	0x200001ac
 8004920:	20000208 	.word	0x20000208
 8004924:	20000210 	.word	0x20000210
 8004928:	200001f8 	.word	0x200001f8
 800492c:	200000f4 	.word	0x200000f4
 8004930:	200000f0 	.word	0x200000f0
 8004934:	20000200 	.word	0x20000200
 8004938:	20000204 	.word	0x20000204

0800493c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <vTaskSwitchContext+0xa0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800494a:	4b25      	ldr	r3, [pc, #148]	; (80049e0 <vTaskSwitchContext+0xa4>)
 800494c:	2201      	movs	r2, #1
 800494e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004950:	e03e      	b.n	80049d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004952:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <vTaskSwitchContext+0xa4>)
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004958:	4b22      	ldr	r3, [pc, #136]	; (80049e4 <vTaskSwitchContext+0xa8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	fab3 f383 	clz	r3, r3
 8004964:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004966:	7afb      	ldrb	r3, [r7, #11]
 8004968:	f1c3 031f 	rsb	r3, r3, #31
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	491e      	ldr	r1, [pc, #120]	; (80049e8 <vTaskSwitchContext+0xac>)
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
 8004994:	e7fe      	b.n	8004994 <vTaskSwitchContext+0x58>
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <vTaskSwitchContext+0xac>)
 80049a2:	4413      	add	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3308      	adds	r3, #8
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d104      	bne.n	80049c6 <vTaskSwitchContext+0x8a>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a07      	ldr	r2, [pc, #28]	; (80049ec <vTaskSwitchContext+0xb0>)
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	20000218 	.word	0x20000218
 80049e0:	20000204 	.word	0x20000204
 80049e4:	200001f8 	.word	0x200001f8
 80049e8:	200000f4 	.word	0x200000f4
 80049ec:	200000f0 	.word	0x200000f0

080049f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80049f8:	f000 f852 	bl	8004aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <prvIdleTask+0x28>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d9f9      	bls.n	80049f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <prvIdleTask+0x2c>)
 8004a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a14:	e7f0      	b.n	80049f8 <prvIdleTask+0x8>
 8004a16:	bf00      	nop
 8004a18:	200000f4 	.word	0x200000f4
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a26:	2300      	movs	r3, #0
 8004a28:	607b      	str	r3, [r7, #4]
 8004a2a:	e00c      	b.n	8004a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <prvInitialiseTaskLists+0x60>)
 8004a38:	4413      	add	r3, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fb47 	bl	80040ce <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3301      	adds	r3, #1
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b06      	cmp	r3, #6
 8004a4a:	d9ef      	bls.n	8004a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a4c:	480d      	ldr	r0, [pc, #52]	; (8004a84 <prvInitialiseTaskLists+0x64>)
 8004a4e:	f7ff fb3e 	bl	80040ce <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a52:	480d      	ldr	r0, [pc, #52]	; (8004a88 <prvInitialiseTaskLists+0x68>)
 8004a54:	f7ff fb3b 	bl	80040ce <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a58:	480c      	ldr	r0, [pc, #48]	; (8004a8c <prvInitialiseTaskLists+0x6c>)
 8004a5a:	f7ff fb38 	bl	80040ce <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a5e:	480c      	ldr	r0, [pc, #48]	; (8004a90 <prvInitialiseTaskLists+0x70>)
 8004a60:	f7ff fb35 	bl	80040ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a64:	480b      	ldr	r0, [pc, #44]	; (8004a94 <prvInitialiseTaskLists+0x74>)
 8004a66:	f7ff fb32 	bl	80040ce <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <prvInitialiseTaskLists+0x78>)
 8004a6c:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <prvInitialiseTaskLists+0x64>)
 8004a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <prvInitialiseTaskLists+0x7c>)
 8004a72:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <prvInitialiseTaskLists+0x68>)
 8004a74:	601a      	str	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200000f4 	.word	0x200000f4
 8004a84:	20000180 	.word	0x20000180
 8004a88:	20000194 	.word	0x20000194
 8004a8c:	200001b0 	.word	0x200001b0
 8004a90:	200001c4 	.word	0x200001c4
 8004a94:	200001dc 	.word	0x200001dc
 8004a98:	200001a8 	.word	0x200001a8
 8004a9c:	200001ac 	.word	0x200001ac

08004aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aa6:	e019      	b.n	8004adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004aa8:	f000 fa00 	bl	8004eac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <prvCheckTasksWaitingTermination+0x4c>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fb92 	bl	80041e2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <prvCheckTasksWaitingTermination+0x50>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <prvCheckTasksWaitingTermination+0x50>)
 8004ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <prvCheckTasksWaitingTermination+0x54>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <prvCheckTasksWaitingTermination+0x54>)
 8004ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ad2:	f000 fa19 	bl	8004f08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f80e 	bl	8004af8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <prvCheckTasksWaitingTermination+0x54>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e1      	bne.n	8004aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	200001c4 	.word	0x200001c4
 8004af0:	200001f0 	.word	0x200001f0
 8004af4:	200001d8 	.word	0x200001d8

08004af8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fb6a 	bl	80051e8 <vPortFree>
				vPortFree( pxTCB );
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fb67 	bl	80051e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b1a:	e017      	b.n	8004b4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d103      	bne.n	8004b2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fb5e 	bl	80051e8 <vPortFree>
	}
 8004b2c:	e00e      	b.n	8004b4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d009      	beq.n	8004b4c <prvDeleteTCB+0x54>
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e7fe      	b.n	8004b4a <prvDeleteTCB+0x52>
	}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b5a:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <prvResetNextTaskUnblockTime+0x38>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d104      	bne.n	8004b6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b64:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <prvResetNextTaskUnblockTime+0x3c>)
 8004b66:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b6c:	e008      	b.n	8004b80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b07      	ldr	r3, [pc, #28]	; (8004b8c <prvResetNextTaskUnblockTime+0x38>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvResetNextTaskUnblockTime+0x3c>)
 8004b7e:	6013      	str	r3, [r2, #0]
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	200001a8 	.word	0x200001a8
 8004b90:	20000210 	.word	0x20000210

08004b94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba4:	4b28      	ldr	r3, [pc, #160]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fb19 	bl	80041e2 <uxListRemove>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	43da      	mvns	r2, r3
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004bcc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d10a      	bne.n	8004bec <prvAddCurrentTaskToDelayedList+0x58>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3304      	adds	r3, #4
 8004be2:	4619      	mov	r1, r3
 8004be4:	481a      	ldr	r0, [pc, #104]	; (8004c50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004be6:	f7ff fa9f 	bl	8004128 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bea:	e026      	b.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d209      	bcs.n	8004c18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7ff faad 	bl	8004170 <vListInsert>
}
 8004c16:	e010      	b.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7ff faa3 	bl	8004170 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d202      	bcs.n	8004c3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6013      	str	r3, [r2, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200001f4 	.word	0x200001f4
 8004c48:	200000f0 	.word	0x200000f0
 8004c4c:	200001f8 	.word	0x200001f8
 8004c50:	200001dc 	.word	0x200001dc
 8004c54:	200001ac 	.word	0x200001ac
 8004c58:	200001a8 	.word	0x200001a8
 8004c5c:	20000210 	.word	0x20000210

08004c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b04      	subs	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c90:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <pxPortInitialiseStack+0x64>)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b14      	subs	r3, #20
 8004c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f06f 0202 	mvn.w	r2, #2
 8004cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3b20      	subs	r3, #32
 8004cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	08004cc9 	.word	0x08004cc9

08004cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <prvTaskExitError+0x50>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cda:	d009      	beq.n	8004cf0 <prvTaskExitError+0x28>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e7fe      	b.n	8004cee <prvTaskExitError+0x26>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d02:	bf00      	nop
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0fc      	beq.n	8004d04 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	20000008 	.word	0x20000008
 8004d1c:	00000000 	.word	0x00000000

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	200000f0 	.word	0x200000f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d48:	4808      	ldr	r0, [pc, #32]	; (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed08 	.word	0xe000ed08

08004d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d76:	4b44      	ldr	r3, [pc, #272]	; (8004e88 <xPortStartScheduler+0x118>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a44      	ldr	r2, [pc, #272]	; (8004e8c <xPortStartScheduler+0x11c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d109      	bne.n	8004d94 <xPortStartScheduler+0x24>
 8004d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e7fe      	b.n	8004d92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <xPortStartScheduler+0x118>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a3d      	ldr	r2, [pc, #244]	; (8004e90 <xPortStartScheduler+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d109      	bne.n	8004db2 <xPortStartScheduler+0x42>
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e7fe      	b.n	8004db0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004db2:	4b38      	ldr	r3, [pc, #224]	; (8004e94 <xPortStartScheduler+0x124>)
 8004db4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	22ff      	movs	r2, #255	; 0xff
 8004dc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	4b30      	ldr	r3, [pc, #192]	; (8004e98 <xPortStartScheduler+0x128>)
 8004dd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004ddc:	2207      	movs	r2, #7
 8004dde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de0:	e009      	b.n	8004df6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004de2:	4b2e      	ldr	r3, [pc, #184]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3b01      	subs	r3, #1
 8004de8:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004dea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	005b      	lsls	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dfe:	2b80      	cmp	r3, #128	; 0x80
 8004e00:	d0ef      	beq.n	8004de2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f1c3 0307 	rsb	r3, r3, #7
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d009      	beq.n	8004e22 <xPortStartScheduler+0xb2>
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	e7fe      	b.n	8004e20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e22:	4b1e      	ldr	r3, [pc, #120]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004e2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e34:	4a19      	ldr	r2, [pc, #100]	; (8004e9c <xPortStartScheduler+0x12c>)
 8004e36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e40:	4b17      	ldr	r3, [pc, #92]	; (8004ea0 <xPortStartScheduler+0x130>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a16      	ldr	r2, [pc, #88]	; (8004ea0 <xPortStartScheduler+0x130>)
 8004e46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e4c:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <xPortStartScheduler+0x130>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <xPortStartScheduler+0x130>)
 8004e52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e58:	f000 f8d6 	bl	8005008 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <xPortStartScheduler+0x134>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e62:	f000 f8f5 	bl	8005050 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e66:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <xPortStartScheduler+0x138>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0f      	ldr	r2, [pc, #60]	; (8004ea8 <xPortStartScheduler+0x138>)
 8004e6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e72:	f7ff ff69 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e76:	f7ff fd61 	bl	800493c <vTaskSwitchContext>
	prvTaskExitError();
 8004e7a:	f7ff ff25 	bl	8004cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed00 	.word	0xe000ed00
 8004e8c:	410fc271 	.word	0x410fc271
 8004e90:	410fc270 	.word	0x410fc270
 8004e94:	e000e400 	.word	0xe000e400
 8004e98:	2000021c 	.word	0x2000021c
 8004e9c:	20000220 	.word	0x20000220
 8004ea0:	e000ed20 	.word	0xe000ed20
 8004ea4:	20000008 	.word	0x20000008
 8004ea8:	e000ef34 	.word	0xe000ef34

08004eac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ec4:	4b0e      	ldr	r3, [pc, #56]	; (8004f00 <vPortEnterCritical+0x54>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a0d      	ldr	r2, [pc, #52]	; (8004f00 <vPortEnterCritical+0x54>)
 8004ecc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <vPortEnterCritical+0x54>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d10e      	bne.n	8004ef4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <vPortEnterCritical+0x58>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d009      	beq.n	8004ef4 <vPortEnterCritical+0x48>
 8004ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	e7fe      	b.n	8004ef2 <vPortEnterCritical+0x46>
	}
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000008 	.word	0x20000008
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <vPortExitCritical+0x4c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d109      	bne.n	8004f2a <vPortExitCritical+0x22>
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	e7fe      	b.n	8004f28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004f2a:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <vPortExitCritical+0x4c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <vPortExitCritical+0x4c>)
 8004f32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f34:	4b07      	ldr	r3, [pc, #28]	; (8004f54 <vPortExitCritical+0x4c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <vPortExitCritical+0x3e>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000008 	.word	0x20000008
	...

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <pxCurrentTCBConst>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f01e 0f10 	tst.w	lr, #16
 8004f70:	bf08      	it	eq
 8004f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f84:	f380 8811 	msr	BASEPRI, r0
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f7ff fcd4 	bl	800493c <vTaskSwitchContext>
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f380 8811 	msr	BASEPRI, r0
 8004f9c:	bc09      	pop	{r0, r3}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa6:	f01e 0f10 	tst.w	lr, #16
 8004faa:	bf08      	it	eq
 8004fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fb0:	f380 8809 	msr	PSP, r0
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	200000f0 	.word	0x200000f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fe0:	f7ff fbf4 	bl	80047cc <xTaskIncrementTick>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fea:	4b06      	ldr	r3, [pc, #24]	; (8005004 <SysTick_Handler+0x3c>)
 8004fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ffc:	bf00      	nop
 8004ffe:	3708      	adds	r7, #8
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <vPortSetupTimerInterrupt+0x34>)
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <vPortSetupTimerInterrupt+0x38>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <vPortSetupTimerInterrupt+0x3c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <vPortSetupTimerInterrupt+0x40>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	4a09      	ldr	r2, [pc, #36]	; (800504c <vPortSetupTimerInterrupt+0x44>)
 8005026:	3b01      	subs	r3, #1
 8005028:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800502a:	4b04      	ldr	r3, [pc, #16]	; (800503c <vPortSetupTimerInterrupt+0x34>)
 800502c:	2207      	movs	r2, #7
 800502e:	601a      	str	r2, [r3, #0]
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	e000e010 	.word	0xe000e010
 8005040:	e000e018 	.word	0xe000e018
 8005044:	200000d0 	.word	0x200000d0
 8005048:	10624dd3 	.word	0x10624dd3
 800504c:	e000e014 	.word	0xe000e014

08005050 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005050:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005060 <vPortEnableVFP+0x10>
 8005054:	6801      	ldr	r1, [r0, #0]
 8005056:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800505a:	6001      	str	r1, [r0, #0]
 800505c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800505e:	bf00      	nop
 8005060:	e000ed88 	.word	0xe000ed88

08005064 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800506c:	2300      	movs	r3, #0
 800506e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005070:	f7ff fb02 	bl	8004678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005074:	4b57      	ldr	r3, [pc, #348]	; (80051d4 <pvPortMalloc+0x170>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800507c:	f000 f90c 	bl	8005298 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005080:	4b55      	ldr	r3, [pc, #340]	; (80051d8 <pvPortMalloc+0x174>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4013      	ands	r3, r2
 8005088:	2b00      	cmp	r3, #0
 800508a:	f040 808c 	bne.w	80051a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01c      	beq.n	80050ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005094:	2208      	movs	r2, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d013      	beq.n	80050ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f023 0307 	bic.w	r3, r3, #7
 80050ac:	3308      	adds	r3, #8
 80050ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <pvPortMalloc+0x6a>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	617b      	str	r3, [r7, #20]
 80050cc:	e7fe      	b.n	80050cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d068      	beq.n	80051a6 <pvPortMalloc+0x142>
 80050d4:	4b41      	ldr	r3, [pc, #260]	; (80051dc <pvPortMalloc+0x178>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d863      	bhi.n	80051a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050de:	4b40      	ldr	r3, [pc, #256]	; (80051e0 <pvPortMalloc+0x17c>)
 80050e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050e2:	4b3f      	ldr	r3, [pc, #252]	; (80051e0 <pvPortMalloc+0x17c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050e8:	e004      	b.n	80050f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d903      	bls.n	8005106 <pvPortMalloc+0xa2>
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f1      	bne.n	80050ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005106:	4b33      	ldr	r3, [pc, #204]	; (80051d4 <pvPortMalloc+0x170>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800510c:	429a      	cmp	r2, r3
 800510e:	d04a      	beq.n	80051a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2208      	movs	r2, #8
 8005116:	4413      	add	r3, r2
 8005118:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	2308      	movs	r3, #8
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	429a      	cmp	r2, r3
 8005130:	d91e      	bls.n	8005170 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4413      	add	r3, r2
 8005138:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <pvPortMalloc+0xf4>
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e7fe      	b.n	8005156 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f000 f8f6 	bl	800535c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005170:	4b1a      	ldr	r3, [pc, #104]	; (80051dc <pvPortMalloc+0x178>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	4a18      	ldr	r2, [pc, #96]	; (80051dc <pvPortMalloc+0x178>)
 800517c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <pvPortMalloc+0x178>)
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <pvPortMalloc+0x180>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d203      	bcs.n	8005192 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <pvPortMalloc+0x178>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a15      	ldr	r2, [pc, #84]	; (80051e4 <pvPortMalloc+0x180>)
 8005190:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <pvPortMalloc+0x174>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	431a      	orrs	r2, r3
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051a6:	f7ff fa75 	bl	8004694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d009      	beq.n	80051c8 <pvPortMalloc+0x164>
 80051b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e7fe      	b.n	80051c6 <pvPortMalloc+0x162>
	return pvReturn;
 80051c8:	69fb      	ldr	r3, [r7, #28]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20000de4 	.word	0x20000de4
 80051d8:	20000df0 	.word	0x20000df0
 80051dc:	20000de8 	.word	0x20000de8
 80051e0:	20000ddc 	.word	0x20000ddc
 80051e4:	20000dec 	.word	0x20000dec

080051e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d046      	beq.n	8005288 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051fa:	2308      	movs	r3, #8
 80051fc:	425b      	negs	r3, r3
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b20      	ldr	r3, [pc, #128]	; (8005290 <vPortFree+0xa8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d109      	bne.n	800522a <vPortFree+0x42>
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
 8005228:	e7fe      	b.n	8005228 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <vPortFree+0x5e>
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	60bb      	str	r3, [r7, #8]
 8005244:	e7fe      	b.n	8005244 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b11      	ldr	r3, [pc, #68]	; (8005290 <vPortFree+0xa8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4013      	ands	r3, r2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d115      	bne.n	8005288 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortFree+0xa8>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	43db      	mvns	r3, r3
 8005266:	401a      	ands	r2, r3
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800526c:	f7ff fa04 	bl	8004678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <vPortFree+0xac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4413      	add	r3, r2
 800527a:	4a06      	ldr	r2, [pc, #24]	; (8005294 <vPortFree+0xac>)
 800527c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527e:	6938      	ldr	r0, [r7, #16]
 8005280:	f000 f86c 	bl	800535c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005284:	f7ff fa06 	bl	8004694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005288:	bf00      	nop
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000df0 	.word	0x20000df0
 8005294:	20000de8 	.word	0x20000de8

08005298 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800529e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80052a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <prvHeapInit+0xac>)
 80052a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00c      	beq.n	80052cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3307      	adds	r3, #7
 80052b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0307 	bic.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <prvHeapInit+0xac>)
 80052c8:	4413      	add	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052d0:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <prvHeapInit+0xb0>)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052d6:	4b1c      	ldr	r3, [pc, #112]	; (8005348 <prvHeapInit+0xb0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4413      	add	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052e4:	2208      	movs	r2, #8
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0307 	bic.w	r3, r3, #7
 80052f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4a15      	ldr	r2, [pc, #84]	; (800534c <prvHeapInit+0xb4>)
 80052f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052fa:	4b14      	ldr	r3, [pc, #80]	; (800534c <prvHeapInit+0xb4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <prvHeapInit+0xb4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005318:	4b0c      	ldr	r3, [pc, #48]	; (800534c <prvHeapInit+0xb4>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <prvHeapInit+0xb8>)
 8005326:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <prvHeapInit+0xbc>)
 800532e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <prvHeapInit+0xc0>)
 8005332:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005336:	601a      	str	r2, [r3, #0]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000224 	.word	0x20000224
 8005348:	20000ddc 	.word	0x20000ddc
 800534c:	20000de4 	.word	0x20000de4
 8005350:	20000dec 	.word	0x20000dec
 8005354:	20000de8 	.word	0x20000de8
 8005358:	20000df0 	.word	0x20000df0

0800535c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005364:	4b28      	ldr	r3, [pc, #160]	; (8005408 <prvInsertBlockIntoFreeList+0xac>)
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e002      	b.n	8005370 <prvInsertBlockIntoFreeList+0x14>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d8f7      	bhi.n	800536a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	429a      	cmp	r2, r3
 800538a:	d108      	bne.n	800539e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	441a      	add	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d118      	bne.n	80053e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <prvInsertBlockIntoFreeList+0xb0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d00d      	beq.n	80053da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <prvInsertBlockIntoFreeList+0xb0>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e003      	b.n	80053ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d002      	beq.n	80053fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20000ddc 	.word	0x20000ddc
 800540c:	20000de4 	.word	0x20000de4

08005410 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <vApplicationGetIdleTaskMemory+0x2c>)
 8005420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a06      	ldr	r2, [pc, #24]	; (8005440 <vApplicationGetIdleTaskMemory+0x30>)
 8005426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	20000df4 	.word	0x20000df4
 8005440:	20000e48 	.word	0x20000e48

08005444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005444:	b5b0      	push	{r4, r5, r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800544a:	f7fb f841 	bl	80004d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800544e:	f000 f82d 	bl	80054ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005452:	f000 f9d9 	bl	8005808 <MX_GPIO_Init>
  MX_DMA_Init();
 8005456:	f000 f9b9 	bl	80057cc <MX_DMA_Init>
  MX_DAC1_Init();
 800545a:	f000 f8a1 	bl	80055a0 <MX_DAC1_Init>
  MX_TIM2_Init();
 800545e:	f000 f937 	bl	80056d0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8005462:	f000 f8cf 	bl	8005604 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8005466:	f000 f90d 	bl	8005684 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 800546a:	f000 f97f 	bl	800576c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET); // Turn Red LED off
 800546e:	2201      	movs	r2, #1
 8005470:	2108      	movs	r1, #8
 8005472:	480b      	ldr	r0, [pc, #44]	; (80054a0 <main+0x5c>)
 8005474:	f7fb fe22 	bl	80010bc <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <main+0x60>)
 800547a:	1d3c      	adds	r4, r7, #4
 800547c:	461d      	mov	r5, r3
 800547e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005482:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe fdbd 	bl	800400e <osThreadCreate>
 8005494:	4602      	mov	r2, r0
 8005496:	4b04      	ldr	r3, [pc, #16]	; (80054a8 <main+0x64>)
 8005498:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800549a:	f7fe fdb1 	bl	8004000 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800549e:	e7fe      	b.n	800549e <main+0x5a>
 80054a0:	48001000 	.word	0x48001000
 80054a4:	08005fe0 	.word	0x08005fe0
 80054a8:	20001050 	.word	0x20001050

080054ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b0b8      	sub	sp, #224	; 0xe0
 80054b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80054b6:	2244      	movs	r2, #68	; 0x44
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd72 	bl	8005fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054d0:	463b      	mov	r3, r7
 80054d2:	2288      	movs	r2, #136	; 0x88
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fd64 	bl	8005fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80054dc:	2310      	movs	r3, #16
 80054de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80054ee:	2360      	movs	r3, #96	; 0x60
 80054f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f4:	2302      	movs	r3, #2
 80054f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80054fa:	2301      	movs	r3, #1
 80054fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005500:	2301      	movs	r3, #1
 8005502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8005506:	2328      	movs	r3, #40	; 0x28
 8005508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800550c:	2307      	movs	r3, #7
 800550e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005512:	2302      	movs	r3, #2
 8005514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005518:	2302      	movs	r3, #2
 800551a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800551e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005522:	4618      	mov	r0, r3
 8005524:	f7fc f84c 	bl	80015c0 <HAL_RCC_OscConfig>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800552e:	f000 fa87 	bl	8005a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005532:	230f      	movs	r3, #15
 8005534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005538:	2303      	movs	r3, #3
 800553a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800553e:	2300      	movs	r3, #0
 8005540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005550:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005554:	2104      	movs	r1, #4
 8005556:	4618      	mov	r0, r3
 8005558:	f7fc fc18 	bl	8001d8c <HAL_RCC_ClockConfig>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8005562:	f000 fa6d 	bl	8005a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 8005566:	2381      	movs	r3, #129	; 0x81
 8005568:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800556a:	2300      	movs	r3, #0
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800556e:	2300      	movs	r3, #0
 8005570:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005572:	463b      	mov	r3, r7
 8005574:	4618      	mov	r0, r3
 8005576:	f7fc fe3f 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8005580:	f000 fa5e 	bl	8005a40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005584:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005588:	f7fb ff08 	bl	800139c <HAL_PWREx_ControlVoltageScaling>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005592:	f000 fa55 	bl	8005a40 <Error_Handler>
  }
}
 8005596:	bf00      	nop
 8005598:	37e0      	adds	r7, #224	; 0xe0
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	2224      	movs	r2, #36	; 0x24
 80055aa:	2100      	movs	r1, #0
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fcf9 	bl	8005fa4 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80055b2:	4b12      	ldr	r3, [pc, #72]	; (80055fc <MX_DAC1_Init+0x5c>)
 80055b4:	4a12      	ldr	r2, [pc, #72]	; (8005600 <MX_DAC1_Init+0x60>)
 80055b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80055b8:	4810      	ldr	r0, [pc, #64]	; (80055fc <MX_DAC1_Init+0x5c>)
 80055ba:	f7fb f8c5 	bl	8000748 <HAL_DAC_Init>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80055c4:	f000 fa3c 	bl	8005a40 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80055c8:	2300      	movs	r3, #0
 80055ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80055cc:	2324      	movs	r3, #36	; 0x24
 80055ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80055dc:	1d3b      	adds	r3, r7, #4
 80055de:	2200      	movs	r2, #0
 80055e0:	4619      	mov	r1, r3
 80055e2:	4806      	ldr	r0, [pc, #24]	; (80055fc <MX_DAC1_Init+0x5c>)
 80055e4:	f7fb f936 	bl	8000854 <HAL_DAC_ConfigChannel>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80055ee:	f000 fa27 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80055f2:	bf00      	nop
 80055f4:	3728      	adds	r7, #40	; 0x28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20001054 	.word	0x20001054
 8005600:	40007400 	.word	0x40007400

08005604 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <MX_I2C2_Init+0x74>)
 800560a:	4a1c      	ldr	r2, [pc, #112]	; (800567c <MX_I2C2_Init+0x78>)
 800560c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800560e:	4b1a      	ldr	r3, [pc, #104]	; (8005678 <MX_I2C2_Init+0x74>)
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <MX_I2C2_Init+0x7c>)
 8005612:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005614:	4b18      	ldr	r3, [pc, #96]	; (8005678 <MX_I2C2_Init+0x74>)
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <MX_I2C2_Init+0x74>)
 800561c:	2201      	movs	r2, #1
 800561e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005620:	4b15      	ldr	r3, [pc, #84]	; (8005678 <MX_I2C2_Init+0x74>)
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <MX_I2C2_Init+0x74>)
 8005628:	2200      	movs	r2, #0
 800562a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <MX_I2C2_Init+0x74>)
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <MX_I2C2_Init+0x74>)
 8005634:	2200      	movs	r2, #0
 8005636:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005638:	4b0f      	ldr	r3, [pc, #60]	; (8005678 <MX_I2C2_Init+0x74>)
 800563a:	2200      	movs	r2, #0
 800563c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800563e:	480e      	ldr	r0, [pc, #56]	; (8005678 <MX_I2C2_Init+0x74>)
 8005640:	f7fb fd77 	bl	8001132 <HAL_I2C_Init>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800564a:	f000 f9f9 	bl	8005a40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800564e:	2100      	movs	r1, #0
 8005650:	4809      	ldr	r0, [pc, #36]	; (8005678 <MX_I2C2_Init+0x74>)
 8005652:	f7fb fdfd 	bl	8001250 <HAL_I2CEx_ConfigAnalogFilter>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800565c:	f000 f9f0 	bl	8005a40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005660:	2100      	movs	r1, #0
 8005662:	4805      	ldr	r0, [pc, #20]	; (8005678 <MX_I2C2_Init+0x74>)
 8005664:	f7fb fe3f 	bl	80012e6 <HAL_I2CEx_ConfigDigitalFilter>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800566e:	f000 f9e7 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20001068 	.word	0x20001068
 800567c:	40005800 	.word	0x40005800
 8005680:	10909cec 	.word	0x10909cec

08005684 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <MX_QUADSPI_Init+0x48>)
 800568c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 800568e:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 8005690:	22ff      	movs	r2, #255	; 0xff
 8005692:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8005694:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 8005696:	2201      	movs	r2, #1
 8005698:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800569a:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 800569c:	2200      	movs	r2, #0
 800569e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80056a6:	4b08      	ldr	r3, [pc, #32]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80056ac:	4b06      	ldr	r3, [pc, #24]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80056b2:	4805      	ldr	r0, [pc, #20]	; (80056c8 <MX_QUADSPI_Init+0x44>)
 80056b4:	f7fb fec8 	bl	8001448 <HAL_QSPI_Init>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80056be:	f000 f9bf 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	200011c8 	.word	0x200011c8
 80056cc:	a0001000 	.word	0xa0001000

080056d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b088      	sub	sp, #32
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056d6:	f107 0310 	add.w	r3, r7, #16
 80056da:	2200      	movs	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	605a      	str	r2, [r3, #4]
 80056e0:	609a      	str	r2, [r3, #8]
 80056e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e4:	1d3b      	adds	r3, r7, #4
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	605a      	str	r2, [r3, #4]
 80056ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056ee:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <MX_TIM2_Init+0x98>)
 80056f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80056f6:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <MX_TIM2_Init+0x98>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056fc:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <MX_TIM2_Init+0x98>)
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8005702:	4b19      	ldr	r3, [pc, #100]	; (8005768 <MX_TIM2_Init+0x98>)
 8005704:	f240 7216 	movw	r2, #1814	; 0x716
 8005708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800570a:	4b17      	ldr	r3, [pc, #92]	; (8005768 <MX_TIM2_Init+0x98>)
 800570c:	2200      	movs	r2, #0
 800570e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005710:	4b15      	ldr	r3, [pc, #84]	; (8005768 <MX_TIM2_Init+0x98>)
 8005712:	2200      	movs	r2, #0
 8005714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005716:	4814      	ldr	r0, [pc, #80]	; (8005768 <MX_TIM2_Init+0x98>)
 8005718:	f7fd fa1e 	bl	8002b58 <HAL_TIM_Base_Init>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005722:	f000 f98d 	bl	8005a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800572a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800572c:	f107 0310 	add.w	r3, r7, #16
 8005730:	4619      	mov	r1, r3
 8005732:	480d      	ldr	r0, [pc, #52]	; (8005768 <MX_TIM2_Init+0x98>)
 8005734:	f7fd fbf7 	bl	8002f26 <HAL_TIM_ConfigClockSource>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800573e:	f000 f97f 	bl	8005a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005742:	2320      	movs	r3, #32
 8005744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	4619      	mov	r1, r3
 800574e:	4806      	ldr	r0, [pc, #24]	; (8005768 <MX_TIM2_Init+0x98>)
 8005750:	f7fd fdfe 	bl	8003350 <HAL_TIMEx_MasterConfigSynchronization>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800575a:	f000 f971 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800575e:	bf00      	nop
 8005760:	3720      	adds	r7, #32
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	2000117c 	.word	0x2000117c

0800576c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005770:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <MX_USART1_UART_Init+0x5c>)
 8005774:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005776:	4b13      	ldr	r3, [pc, #76]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b11      	ldr	r3, [pc, #68]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b0f      	ldr	r3, [pc, #60]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0e      	ldr	r3, [pc, #56]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b0c      	ldr	r3, [pc, #48]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b0b      	ldr	r3, [pc, #44]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b09      	ldr	r3, [pc, #36]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057a2:	4b08      	ldr	r3, [pc, #32]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057ae:	4805      	ldr	r0, [pc, #20]	; (80057c4 <MX_USART1_UART_Init+0x58>)
 80057b0:	f7fd fe74 	bl	800349c <HAL_UART_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80057ba:	f000 f941 	bl	8005a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200010fc 	.word	0x200010fc
 80057c8:	40013800 	.word	0x40013800

080057cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <MX_DMA_Init+0x38>)
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	4a0b      	ldr	r2, [pc, #44]	; (8005804 <MX_DMA_Init+0x38>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6493      	str	r3, [r2, #72]	; 0x48
 80057de:	4b09      	ldr	r3, [pc, #36]	; (8005804 <MX_DMA_Init+0x38>)
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	607b      	str	r3, [r7, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2100      	movs	r1, #0
 80057ee:	200d      	movs	r0, #13
 80057f0:	f7fa ff80 	bl	80006f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80057f4:	200d      	movs	r0, #13
 80057f6:	f7fa ff99 	bl	800072c <HAL_NVIC_EnableIRQ>

}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	; 0x28
 800580c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005822:	4a37      	ldr	r2, [pc, #220]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800582a:	4b35      	ldr	r3, [pc, #212]	; (8005900 <MX_GPIO_Init+0xf8>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005836:	4b32      	ldr	r3, [pc, #200]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800583a:	4a31      	ldr	r2, [pc, #196]	; (8005900 <MX_GPIO_Init+0xf8>)
 800583c:	f043 0304 	orr.w	r3, r3, #4
 8005840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800584e:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005852:	4a2b      	ldr	r2, [pc, #172]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800585a:	4b29      	ldr	r3, [pc, #164]	; (8005900 <MX_GPIO_Init+0xf8>)
 800585c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005866:	4b26      	ldr	r3, [pc, #152]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <MX_GPIO_Init+0xf8>)
 800586c:	f043 0302 	orr.w	r3, r3, #2
 8005870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005872:	4b23      	ldr	r3, [pc, #140]	; (8005900 <MX_GPIO_Init+0xf8>)
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	607b      	str	r3, [r7, #4]
 800587c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 800587e:	2200      	movs	r2, #0
 8005880:	2108      	movs	r1, #8
 8005882:	4820      	ldr	r0, [pc, #128]	; (8005904 <MX_GPIO_Init+0xfc>)
 8005884:	f7fb fc1a 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G2_GPIO_Port, LED_G2_Pin, GPIO_PIN_RESET);
 8005888:	2200      	movs	r2, #0
 800588a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800588e:	481e      	ldr	r0, [pc, #120]	; (8005908 <MX_GPIO_Init+0x100>)
 8005890:	f7fb fc14 	bl	80010bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 8005894:	2308      	movs	r3, #8
 8005896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005898:	2301      	movs	r3, #1
 800589a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a0:	2300      	movs	r3, #0
 80058a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	4619      	mov	r1, r3
 80058aa:	4816      	ldr	r0, [pc, #88]	; (8005904 <MX_GPIO_Init+0xfc>)
 80058ac:	f7fb fa5e 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 80058b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <MX_GPIO_Init+0x104>)
 80058b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80058be:	f107 0314 	add.w	r3, r7, #20
 80058c2:	4619      	mov	r1, r3
 80058c4:	4812      	ldr	r0, [pc, #72]	; (8005910 <MX_GPIO_Init+0x108>)
 80058c6:	f7fb fa51 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G2_Pin */
  GPIO_InitStruct.Pin = LED_G2_Pin;
 80058ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80058ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058d0:	2301      	movs	r3, #1
 80058d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d8:	2300      	movs	r3, #0
 80058da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G2_GPIO_Port, &GPIO_InitStruct);
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	4619      	mov	r1, r3
 80058e2:	4809      	ldr	r0, [pc, #36]	; (8005908 <MX_GPIO_Init+0x100>)
 80058e4:	f7fb fa42 	bl	8000d6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80058e8:	2200      	movs	r2, #0
 80058ea:	2100      	movs	r1, #0
 80058ec:	2028      	movs	r0, #40	; 0x28
 80058ee:	f7fa ff01 	bl	80006f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80058f2:	2028      	movs	r0, #40	; 0x28
 80058f4:	f7fa ff1a 	bl	800072c <HAL_NVIC_EnableIRQ>

}
 80058f8:	bf00      	nop
 80058fa:	3728      	adds	r7, #40	; 0x28
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000
 8005904:	48001000 	.word	0x48001000
 8005908:	48000400 	.word	0x48000400
 800590c:	10110000 	.word	0x10110000
 8005910:	48000800 	.word	0x48000800

08005914 <testingUART>:

/* USER CODE BEGIN 4 */
void testingUART() {
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_straight,sizeof(plane_straight),1000);
 8005918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800591c:	2218      	movs	r2, #24
 800591e:	490a      	ldr	r1, [pc, #40]	; (8005948 <testingUART+0x34>)
 8005920:	480a      	ldr	r0, [pc, #40]	; (800594c <testingUART+0x38>)
 8005922:	f7fd fe09 	bl	8003538 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_right,sizeof(plane_right),1000);
 8005926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800592a:	222a      	movs	r2, #42	; 0x2a
 800592c:	4908      	ldr	r1, [pc, #32]	; (8005950 <testingUART+0x3c>)
 800592e:	4807      	ldr	r0, [pc, #28]	; (800594c <testingUART+0x38>)
 8005930:	f7fd fe02 	bl	8003538 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,(uint8_t*)plane_left,sizeof(plane_left),1000);
 8005934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	4906      	ldr	r1, [pc, #24]	; (8005954 <testingUART+0x40>)
 800593c:	4803      	ldr	r0, [pc, #12]	; (800594c <testingUART+0x38>)
 800593e:	f7fd fdfb 	bl	8003538 <HAL_UART_Transmit>
}
 8005942:	bf00      	nop
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000064 	.word	0x20000064
 800594c:	200010fc 	.word	0x200010fc
 8005950:	2000007c 	.word	0x2000007c
 8005954:	200000a8 	.word	0x200000a8

08005958 <testingStart>:

game_mode_t testingStart(game_mode_t game_mode) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b084      	sub	sp, #16
 800595c:	af00      	add	r7, sp, #0
 800595e:	4603      	mov	r3, r0
 8005960:	71fb      	strb	r3, [r7, #7]
	if (game_mode == GAME_START) {
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d135      	bne.n	80059d4 <testingStart+0x7c>
		while (user_response[0] != 's') {
 8005968:	e011      	b.n	800598e <testingStart+0x36>
			HAL_UART_Transmit(&huart1,(uint8_t*)start_menu_message,sizeof(start_menu_message),1000);
 800596a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596e:	221d      	movs	r2, #29
 8005970:	491a      	ldr	r1, [pc, #104]	; (80059dc <testingStart+0x84>)
 8005972:	481b      	ldr	r0, [pc, #108]	; (80059e0 <testingStart+0x88>)
 8005974:	f7fd fde0 	bl	8003538 <HAL_UART_Transmit>
			while((HAL_OK != HAL_UART_Receive(&huart1, user_response, 1, 5000))){}
 8005978:	bf00      	nop
 800597a:	f241 3388 	movw	r3, #5000	; 0x1388
 800597e:	2201      	movs	r2, #1
 8005980:	4918      	ldr	r1, [pc, #96]	; (80059e4 <testingStart+0x8c>)
 8005982:	4817      	ldr	r0, [pc, #92]	; (80059e0 <testingStart+0x88>)
 8005984:	f7fd fe6b 	bl	800365e <HAL_UART_Receive>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1f5      	bne.n	800597a <testingStart+0x22>
		while (user_response[0] != 's') {
 800598e:	4b15      	ldr	r3, [pc, #84]	; (80059e4 <testingStart+0x8c>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b73      	cmp	r3, #115	; 0x73
 8005994:	d1e9      	bne.n	800596a <testingStart+0x12>
		}
		HAL_UART_Transmit(&huart1,game_starting_message,sizeof(game_starting_message),1000);
 8005996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599a:	222e      	movs	r2, #46	; 0x2e
 800599c:	4912      	ldr	r1, [pc, #72]	; (80059e8 <testingStart+0x90>)
 800599e:	4810      	ldr	r0, [pc, #64]	; (80059e0 <testingStart+0x88>)
 80059a0:	f7fd fdca 	bl	8003538 <HAL_UART_Transmit>
		for (uint8_t i = 0; i < 5; i++){
 80059a4:	2300      	movs	r3, #0
 80059a6:	73fb      	strb	r3, [r7, #15]
 80059a8:	e00f      	b.n	80059ca <testingStart+0x72>
			HAL_UART_Transmit(&huart1,&count_down[i],1,1000);
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	4a0f      	ldr	r2, [pc, #60]	; (80059ec <testingStart+0x94>)
 80059ae:	1899      	adds	r1, r3, r2
 80059b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059b4:	2201      	movs	r2, #1
 80059b6:	480a      	ldr	r0, [pc, #40]	; (80059e0 <testingStart+0x88>)
 80059b8:	f7fd fdbe 	bl	8003538 <HAL_UART_Transmit>
			osDelay(1000);
 80059bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059c0:	f7fe fb71 	bl	80040a6 <osDelay>
		for (uint8_t i = 0; i < 5; i++){
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	3301      	adds	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d9ec      	bls.n	80059aa <testingStart+0x52>
		}
		return GAME_RUNNING;
 80059d0:	2302      	movs	r3, #2
 80059d2:	e7ff      	b.n	80059d4 <testingStart+0x7c>
	}
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000014 	.word	0x20000014
 80059e0:	200010fc 	.word	0x200010fc
 80059e4:	20001048 	.word	0x20001048
 80059e8:	20000034 	.word	0x20000034
 80059ec:	2000000c 	.word	0x2000000c

080059f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */

	for(;;)
	{
	osDelay(2000);
 80059f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80059fc:	f7fe fb53 	bl	80040a6 <osDelay>




	// Test uart_display.h
	game_mode = testingStart(game_mode);
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <StartDefaultTask+0x28>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ffa7 	bl	8005958 <testingStart>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <StartDefaultTask+0x28>)
 8005a10:	701a      	strb	r2, [r3, #0]
	testingUART();
 8005a12:	f7ff ff7f 	bl	8005914 <testingUART>
	osDelay(2000);
 8005a16:	e7ef      	b.n	80059f8 <StartDefaultTask+0x8>
 8005a18:	200000cc 	.word	0x200000cc

08005a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a04      	ldr	r2, [pc, #16]	; (8005a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005a2e:	f7fa fd67 	bl	8000500 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40001000 	.word	0x40001000

08005a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8005a44:	2200      	movs	r2, #0
 8005a46:	2108      	movs	r1, #8
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <Error_Handler+0x14>)
 8005a4a:	f7fb fb37 	bl	80010bc <HAL_GPIO_WritePin>
	__BKPT();
 8005a4e:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8005a50:	bf00      	nop
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	48001000 	.word	0x48001000

08005a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_MspInit+0x44>)
 8005a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a62:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_MspInit+0x44>)
 8005a64:	f043 0301 	orr.w	r3, r3, #1
 8005a68:	6613      	str	r3, [r2, #96]	; 0x60
 8005a6a:	4b0c      	ldr	r3, [pc, #48]	; (8005a9c <HAL_MspInit+0x44>)
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	607b      	str	r3, [r7, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a76:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <HAL_MspInit+0x44>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <HAL_MspInit+0x44>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a80:	6593      	str	r3, [r2, #88]	; 0x58
 8005a82:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_MspInit+0x44>)
 8005a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005aa8:	f107 0314 	add.w	r3, r7, #20
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	60da      	str	r2, [r3, #12]
 8005ab6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a2e      	ldr	r2, [pc, #184]	; (8005b78 <HAL_DAC_MspInit+0xd8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d155      	bne.n	8005b6e <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005ac2:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac6:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005ac8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005acc:	6593      	str	r3, [r2, #88]	; 0x58
 8005ace:	4b2b      	ldr	r3, [pc, #172]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ade:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ae6:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <HAL_DAC_MspInit+0xdc>)
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005af2:	2310      	movs	r3, #16
 8005af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005af6:	2303      	movs	r3, #3
 8005af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005afe:	f107 0314 	add.w	r3, r7, #20
 8005b02:	4619      	mov	r1, r3
 8005b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005b08:	f7fb f930 	bl	8000d6c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b0e:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <HAL_DAC_MspInit+0xe4>)
 8005b10:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b14:	2206      	movs	r2, #6
 8005b16:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1e:	4b18      	ldr	r3, [pc, #96]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b26:	2280      	movs	r2, #128	; 0x80
 8005b28:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005b3c:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8005b42:	480f      	ldr	r0, [pc, #60]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b44:	f7fa ffaa 	bl	8000a9c <HAL_DMA_Init>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8005b4e:	f7ff ff77 	bl	8005a40 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b56:	609a      	str	r2, [r3, #8]
 8005b58:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <HAL_DAC_MspInit+0xe0>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2100      	movs	r1, #0
 8005b62:	2036      	movs	r0, #54	; 0x36
 8005b64:	f7fa fdc6 	bl	80006f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b68:	2036      	movs	r0, #54	; 0x36
 8005b6a:	f7fa fddf 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005b6e:	bf00      	nop
 8005b70:	3728      	adds	r7, #40	; 0x28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40007400 	.word	0x40007400
 8005b7c:	40021000 	.word	0x40021000
 8005b80:	200010b4 	.word	0x200010b4
 8005b84:	40020030 	.word	0x40020030

08005b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	; 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b90:	f107 0314 	add.w	r3, r7, #20
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	605a      	str	r2, [r3, #4]
 8005b9a:	609a      	str	r2, [r3, #8]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_I2C_MspInit+0x7c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d128      	bne.n	8005bfc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005bb0:	f043 0302 	orr.w	r3, r3, #2
 8005bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bb6:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	613b      	str	r3, [r7, #16]
 8005bc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005bc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bc8:	2312      	movs	r3, #18
 8005bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd8:	f107 0314 	add.w	r3, r7, #20
 8005bdc:	4619      	mov	r1, r3
 8005bde:	480b      	ldr	r0, [pc, #44]	; (8005c0c <HAL_I2C_MspInit+0x84>)
 8005be0:	f7fb f8c4 	bl	8000d6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005be4:	4b08      	ldr	r3, [pc, #32]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be8:	4a07      	ldr	r2, [pc, #28]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005bea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bee:	6593      	str	r3, [r2, #88]	; 0x58
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_I2C_MspInit+0x80>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005bfc:	bf00      	nop
 8005bfe:	3728      	adds	r7, #40	; 0x28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40005800 	.word	0x40005800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	48000400 	.word	0x48000400

08005c10 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	; 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c18:	f107 0314 	add.w	r3, r7, #20
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	609a      	str	r2, [r3, #8]
 8005c24:	60da      	str	r2, [r3, #12]
 8005c26:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <HAL_QSPI_MspInit+0x7c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d128      	bne.n	8005c84 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005c32:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c36:	4a16      	ldr	r2, [pc, #88]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c3e:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c4e:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c50:	f043 0310 	orr.w	r3, r3, #16
 8005c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <HAL_QSPI_MspInit+0x80>)
 8005c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8005c62:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005c66:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c70:	2303      	movs	r3, #3
 8005c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8005c74:	230a      	movs	r3, #10
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c78:	f107 0314 	add.w	r3, r7, #20
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4805      	ldr	r0, [pc, #20]	; (8005c94 <HAL_QSPI_MspInit+0x84>)
 8005c80:	f7fb f874 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005c84:	bf00      	nop
 8005c86:	3728      	adds	r7, #40	; 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	a0001000 	.word	0xa0001000
 8005c90:	40021000 	.word	0x40021000
 8005c94:	48001000 	.word	0x48001000

08005c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca8:	d113      	bne.n	8005cd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005caa:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <HAL_TIM_Base_MspInit+0x44>)
 8005cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cae:	4a0b      	ldr	r2, [pc, #44]	; (8005cdc <HAL_TIM_Base_MspInit+0x44>)
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_TIM_Base_MspInit+0x44>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	201c      	movs	r0, #28
 8005cc8:	f7fa fd14 	bl	80006f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005ccc:	201c      	movs	r0, #28
 8005cce:	f7fa fd2d 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000

08005ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce8:	f107 0314 	add.w	r3, r7, #20
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	; (8005d5c <HAL_UART_MspInit+0x7c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d127      	bne.n	8005d52 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d02:	4b17      	ldr	r3, [pc, #92]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d06:	4a16      	ldr	r2, [pc, #88]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d0c:	6613      	str	r3, [r2, #96]	; 0x60
 8005d0e:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d1a:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1e:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <HAL_UART_MspInit+0x80>)
 8005d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d32:	23c0      	movs	r3, #192	; 0xc0
 8005d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d36:	2302      	movs	r3, #2
 8005d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005d42:	2307      	movs	r3, #7
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d46:	f107 0314 	add.w	r3, r7, #20
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	4805      	ldr	r0, [pc, #20]	; (8005d64 <HAL_UART_MspInit+0x84>)
 8005d4e:	f7fb f80d 	bl	8000d6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005d52:	bf00      	nop
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40013800 	.word	0x40013800
 8005d60:	40021000 	.word	0x40021000
 8005d64:	48000400 	.word	0x48000400

08005d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08c      	sub	sp, #48	; 0x30
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	2036      	movs	r0, #54	; 0x36
 8005d7e:	f7fa fcb9 	bl	80006f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d82:	2036      	movs	r0, #54	; 0x36
 8005d84:	f7fa fcd2 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005d88:	4b1e      	ldr	r3, [pc, #120]	; (8005e04 <HAL_InitTick+0x9c>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_InitTick+0x9c>)
 8005d8e:	f043 0310 	orr.w	r3, r3, #16
 8005d92:	6593      	str	r3, [r2, #88]	; 0x58
 8005d94:	4b1b      	ldr	r3, [pc, #108]	; (8005e04 <HAL_InitTick+0x9c>)
 8005d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005da0:	f107 0210 	add.w	r2, r7, #16
 8005da4:	f107 0314 	add.w	r3, r7, #20
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc f992 	bl	80020d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005db0:	f7fc f964 	bl	800207c <HAL_RCC_GetPCLK1Freq>
 8005db4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db8:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <HAL_InitTick+0xa0>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0c9b      	lsrs	r3, r3, #18
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <HAL_InitTick+0xa4>)
 8005dc6:	4a12      	ldr	r2, [pc, #72]	; (8005e10 <HAL_InitTick+0xa8>)
 8005dc8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8005dca:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <HAL_InitTick+0xa4>)
 8005dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005dd0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005dd2:	4a0e      	ldr	r2, [pc, #56]	; (8005e0c <HAL_InitTick+0xa4>)
 8005dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <HAL_InitTick+0xa4>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <HAL_InitTick+0xa4>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005de4:	4809      	ldr	r0, [pc, #36]	; (8005e0c <HAL_InitTick+0xa4>)
 8005de6:	f7fc feb7 	bl	8002b58 <HAL_TIM_Base_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005df0:	4806      	ldr	r0, [pc, #24]	; (8005e0c <HAL_InitTick+0xa4>)
 8005df2:	f7fc ff09 	bl	8002c08 <HAL_TIM_Base_Start_IT>
 8005df6:	4603      	mov	r3, r0
 8005df8:	e000      	b.n	8005dfc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	; 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	40021000 	.word	0x40021000
 8005e08:	431bde83 	.word	0x431bde83
 8005e0c:	2000120c 	.word	0x2000120c
 8005e10:	40001000 	.word	0x40001000

08005e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e14:	b480      	push	{r7}
 8005e16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005e18:	bf00      	nop
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e22:	b480      	push	{r7}
 8005e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e26:	e7fe      	b.n	8005e26 <HardFault_Handler+0x4>

08005e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e2c:	e7fe      	b.n	8005e2c <MemManage_Handler+0x4>

08005e2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e32:	e7fe      	b.n	8005e32 <BusFault_Handler+0x4>

08005e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e38:	e7fe      	b.n	8005e38 <UsageFault_Handler+0x4>

08005e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8005e4c:	4802      	ldr	r0, [pc, #8]	; (8005e58 <DMA1_Channel3_IRQHandler+0x10>)
 8005e4e:	f7fa fedd 	bl	8000c0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	200010b4 	.word	0x200010b4

08005e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005e60:	4802      	ldr	r0, [pc, #8]	; (8005e6c <TIM2_IRQHandler+0x10>)
 8005e62:	f7fc ff41 	bl	8002ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005e66:	bf00      	nop
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	2000117c 	.word	0x2000117c

08005e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005e74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005e78:	f7fb f938 	bl	80010ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005e7c:	bf00      	nop
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005e84:	4803      	ldr	r0, [pc, #12]	; (8005e94 <TIM6_DAC_IRQHandler+0x14>)
 8005e86:	f7fc ff2f 	bl	8002ce8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8005e8a:	4803      	ldr	r0, [pc, #12]	; (8005e98 <TIM6_DAC_IRQHandler+0x18>)
 8005e8c:	f7fa fc7e 	bl	800078c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005e90:	bf00      	nop
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	2000120c 	.word	0x2000120c
 8005e98:	20001054 	.word	0x20001054

08005e9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ea0:	4b17      	ldr	r3, [pc, #92]	; (8005f00 <SystemInit+0x64>)
 8005ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <SystemInit+0x64>)
 8005ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <SystemInit+0x68>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <SystemInit+0x68>)
 8005eb6:	f043 0301 	orr.w	r3, r3, #1
 8005eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <SystemInit+0x68>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <SystemInit+0x68>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a0f      	ldr	r2, [pc, #60]	; (8005f04 <SystemInit+0x68>)
 8005ec8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8005ecc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8005ed0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <SystemInit+0x68>)
 8005ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ed8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <SystemInit+0x68>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <SystemInit+0x68>)
 8005ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <SystemInit+0x68>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <SystemInit+0x64>)
 8005eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ef2:	609a      	str	r2, [r3, #8]
#endif
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	e000ed00 	.word	0xe000ed00
 8005f04:	40021000 	.word	0x40021000

08005f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005f0c:	f7ff ffc6 	bl	8005e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005f10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005f12:	e003      	b.n	8005f1c <LoopCopyDataInit>

08005f14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8005f16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005f18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005f1a:	3104      	adds	r1, #4

08005f1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005f1c:	480a      	ldr	r0, [pc, #40]	; (8005f48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8005f20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005f22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005f24:	d3f6      	bcc.n	8005f14 <CopyDataInit>
	ldr	r2, =_sbss
 8005f26:	4a0a      	ldr	r2, [pc, #40]	; (8005f50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005f28:	e002      	b.n	8005f30 <LoopFillZerobss>

08005f2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005f2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005f2c:	f842 3b04 	str.w	r3, [r2], #4

08005f30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005f30:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <LoopForever+0x16>)
	cmp	r2, r3
 8005f32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005f34:	d3f9      	bcc.n	8005f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f36:	f000 f811 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005f3a:	f7ff fa83 	bl	8005444 <main>

08005f3e <LoopForever>:

LoopForever:
    b LoopForever
 8005f3e:	e7fe      	b.n	8005f3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005f40:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8005f44:	08006054 	.word	0x08006054
	ldr	r0, =_sdata
 8005f48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005f4c:	200000d4 	.word	0x200000d4
	ldr	r2, =_sbss
 8005f50:	200000d4 	.word	0x200000d4
	ldr	r3, = _ebss
 8005f54:	20001258 	.word	0x20001258

08005f58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005f58:	e7fe      	b.n	8005f58 <ADC1_2_IRQHandler>
	...

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4e0d      	ldr	r6, [pc, #52]	; (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	; (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1ba4      	subs	r4, r4, r6
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2500      	movs	r5, #0
 8005f68:	42a5      	cmp	r5, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4e0b      	ldr	r6, [pc, #44]	; (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	; (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f000 f820 	bl	8005fb4 <_init>
 8005f74:	1ba4      	subs	r4, r4, r6
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2500      	movs	r5, #0
 8005f7a:	42a5      	cmp	r5, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f84:	4798      	blx	r3
 8005f86:	3501      	adds	r5, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f8e:	4798      	blx	r3
 8005f90:	3501      	adds	r5, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	0800604c 	.word	0x0800604c
 8005f98:	0800604c 	.word	0x0800604c
 8005f9c:	0800604c 	.word	0x0800604c
 8005fa0:	08006050 	.word	0x08006050

08005fa4 <memset>:
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d100      	bne.n	8005fae <memset+0xa>
 8005fac:	4770      	bx	lr
 8005fae:	f803 1b01 	strb.w	r1, [r3], #1
 8005fb2:	e7f9      	b.n	8005fa8 <memset+0x4>

08005fb4 <_init>:
 8005fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb6:	bf00      	nop
 8005fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fba:	bc08      	pop	{r3}
 8005fbc:	469e      	mov	lr, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_fini>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr
