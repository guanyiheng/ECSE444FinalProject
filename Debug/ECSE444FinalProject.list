
ECSE444FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a4  080073a4  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ac  080073ac  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000044  080073f8  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012a4  080073f8  000212a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f457  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c03  00000000  00000000  0003f4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b08  00000000  00000000  000430d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001930  00000000  00000000  00044bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a7df  00000000  00000000  00046508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015c41  00000000  00000000  00070ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102cdb  00000000  00000000  00086928  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00189603  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071b4  00000000  00000000  00189680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000044 	.word	0x20000044
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071fc 	.word	0x080071fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000048 	.word	0x20000048
 80001cc:	080071fc 	.word	0x080071fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80004e8:	4b27      	ldr	r3, [pc, #156]	; (8000588 <I2Cx_MspInit+0xa8>)
 80004ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ec:	4a26      	ldr	r2, [pc, #152]	; (8000588 <I2Cx_MspInit+0xa8>)
 80004ee:	f043 0302 	orr.w	r3, r3, #2
 80004f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004f4:	4b24      	ldr	r3, [pc, #144]	; (8000588 <I2Cx_MspInit+0xa8>)
 80004f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f8:	f003 0302 	and.w	r3, r3, #2
 80004fc:	613b      	str	r3, [r7, #16]
 80004fe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000504:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000506:	2312      	movs	r3, #18
 8000508:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800050a:	2301      	movs	r3, #1
 800050c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800050e:	2303      	movs	r3, #3
 8000510:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000512:	2304      	movs	r3, #4
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	4619      	mov	r1, r3
 800051c:	481b      	ldr	r0, [pc, #108]	; (800058c <I2Cx_MspInit+0xac>)
 800051e:	f000 feed 	bl	80012fc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	4818      	ldr	r0, [pc, #96]	; (800058c <I2Cx_MspInit+0xac>)
 800052a:	f000 fee7 	bl	80012fc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <I2Cx_MspInit+0xa8>)
 8000530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <I2Cx_MspInit+0xa8>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6593      	str	r3, [r2, #88]	; 0x58
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <I2Cx_MspInit+0xa8>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <I2Cx_MspInit+0xa8>)
 8000548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800054a:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <I2Cx_MspInit+0xa8>)
 800054c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000550:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <I2Cx_MspInit+0xa8>)
 8000554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000556:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <I2Cx_MspInit+0xa8>)
 8000558:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800055c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	210f      	movs	r1, #15
 8000562:	2021      	movs	r0, #33	; 0x21
 8000564:	f000 fb8e 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000568:	2021      	movs	r0, #33	; 0x21
 800056a:	f000 fba7 	bl	8000cbc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	2022      	movs	r0, #34	; 0x22
 8000574:	f000 fb86 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000578:	2022      	movs	r0, #34	; 0x22
 800057a:	f000 fb9f 	bl	8000cbc <HAL_NVIC_EnableIRQ>
}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	; 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	48000400 	.word	0x48000400

08000590 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <I2Cx_Init+0x54>)
 800059c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a11      	ldr	r2, [pc, #68]	; (80005e8 <I2Cx_Init+0x58>)
 80005a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ff89 	bl	80004e0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f001 f97a 	bl	80018c8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80005d4:	2100      	movs	r1, #0
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f001 fe7e 	bl	80022d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40005800 	.word	0x40005800
 80005e8:	00702681 	.word	0x00702681

080005ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af04      	add	r7, sp, #16
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	4608      	mov	r0, r1
 80005f6:	4611      	mov	r1, r2
 80005f8:	461a      	mov	r2, r3
 80005fa:	4603      	mov	r3, r0
 80005fc:	72fb      	strb	r3, [r7, #11]
 80005fe:	460b      	mov	r3, r1
 8000600:	813b      	strh	r3, [r7, #8]
 8000602:	4613      	mov	r3, r2
 8000604:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000606:	2300      	movs	r3, #0
 8000608:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	b299      	uxth	r1, r3
 800060e:	88f8      	ldrh	r0, [r7, #6]
 8000610:	893a      	ldrh	r2, [r7, #8]
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	4603      	mov	r3, r0
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f001 fb22 	bl	8001c6c <HAL_I2C_Mem_Read>
 8000628:	4603      	mov	r3, r0
 800062a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8000632:	7afb      	ldrb	r3, [r7, #11]
 8000634:	4619      	mov	r1, r3
 8000636:	68f8      	ldr	r0, [r7, #12]
 8000638:	f000 f832 	bl	80006a0 <I2Cx_Error>
  }
  return status;
 800063c:	7dfb      	ldrb	r3, [r7, #23]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b08a      	sub	sp, #40	; 0x28
 800064a:	af04      	add	r7, sp, #16
 800064c:	60f8      	str	r0, [r7, #12]
 800064e:	4608      	mov	r0, r1
 8000650:	4611      	mov	r1, r2
 8000652:	461a      	mov	r2, r3
 8000654:	4603      	mov	r3, r0
 8000656:	72fb      	strb	r3, [r7, #11]
 8000658:	460b      	mov	r3, r1
 800065a:	813b      	strh	r3, [r7, #8]
 800065c:	4613      	mov	r3, r2
 800065e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000664:	7afb      	ldrb	r3, [r7, #11]
 8000666:	b299      	uxth	r1, r3
 8000668:	88f8      	ldrh	r0, [r7, #6]
 800066a:	893a      	ldrh	r2, [r7, #8]
 800066c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	6a3b      	ldr	r3, [r7, #32]
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4603      	mov	r3, r0
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f001 f9e1 	bl	8001a44 <HAL_I2C_Mem_Write>
 8000682:	4603      	mov	r3, r0
 8000684:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000686:	7dfb      	ldrb	r3, [r7, #23]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d004      	beq.n	8000696 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f000 f805 	bl	80006a0 <I2Cx_Error>
  }
  return status;
 8000696:	7dfb      	ldrb	r3, [r7, #23]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f001 f99a 	bl	80019e6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff6c 	bl	8000590 <I2Cx_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80006c4:	4802      	ldr	r0, [pc, #8]	; (80006d0 <SENSOR_IO_Init+0x10>)
 80006c6:	f7ff ff63 	bl	8000590 <I2Cx_Init>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20001040 	.word	0x20001040

080006d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af02      	add	r7, sp, #8
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	460b      	mov	r3, r1
 80006e0:	71bb      	strb	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	79f9      	ldrb	r1, [r7, #7]
 80006ec:	2301      	movs	r3, #1
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	1d7b      	adds	r3, r7, #5
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	2301      	movs	r3, #1
 80006f6:	4803      	ldr	r0, [pc, #12]	; (8000704 <SENSOR_IO_Write+0x30>)
 80006f8:	f7ff ffa5 	bl	8000646 <I2Cx_WriteMultiple>
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20001040 	.word	0x20001040

08000708 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
 800070e:	4603      	mov	r3, r0
 8000710:	460a      	mov	r2, r1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	4613      	mov	r3, r2
 8000716:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	b29a      	uxth	r2, r3
 8000720:	79f9      	ldrb	r1, [r7, #7]
 8000722:	2301      	movs	r3, #1
 8000724:	9301      	str	r3, [sp, #4]
 8000726:	f107 030f 	add.w	r3, r7, #15
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2301      	movs	r3, #1
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <SENSOR_IO_Read+0x38>)
 8000730:	f7ff ff5c 	bl	80005ec <I2Cx_ReadMultiple>

  return read_value;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20001040 	.word	0x20001040

08000744 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af02      	add	r7, sp, #8
 800074a:	603a      	str	r2, [r7, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
 8000752:	460b      	mov	r3, r1
 8000754:	71bb      	strb	r3, [r7, #6]
 8000756:	4613      	mov	r3, r2
 8000758:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	b29a      	uxth	r2, r3
 800075e:	79f9      	ldrb	r1, [r7, #7]
 8000760:	88bb      	ldrh	r3, [r7, #4]
 8000762:	9301      	str	r3, [sp, #4]
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2301      	movs	r3, #1
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <SENSOR_IO_ReadMultiple+0x38>)
 800076c:	f7ff ff3e 	bl	80005ec <I2Cx_ReadMultiple>
 8000770:	4603      	mov	r3, r0
 8000772:	b29b      	uxth	r3, r3
}
 8000774:	4618      	mov	r0, r3
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20001040 	.word	0x20001040

08000780 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <BSP_ACCELERO_Init+0x74>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	4798      	blx	r3
 8000794:	4603      	mov	r3, r0
 8000796:	2b6a      	cmp	r3, #106	; 0x6a
 8000798:	d002      	beq.n	80007a0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e024      	b.n	80007ea <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <BSP_ACCELERO_Init+0x78>)
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <BSP_ACCELERO_Init+0x74>)
 80007a4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80007a6:	2330      	movs	r3, #48	; 0x30
 80007a8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80007ae:	2300      	movs	r3, #0
 80007b0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80007be:	797a      	ldrb	r2, [r7, #5]
 80007c0:	7abb      	ldrb	r3, [r7, #10]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80007c8:	7a3b      	ldrb	r3, [r7, #8]
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	021b      	lsls	r3, r3, #8
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <BSP_ACCELERO_Init+0x78>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	89ba      	ldrh	r2, [r7, #12]
 80007e6:	4610      	mov	r0, r2
 80007e8:	4798      	blx	r3
  }  

  return ret;
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000060 	.word	0x20000060

080007fc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d009      	beq.n	8000820 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	4798      	blx	r3
    }
  }
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000060 	.word	0x20000060

0800082c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800083a:	2110      	movs	r1, #16
 800083c:	20d4      	movs	r0, #212	; 0xd4
 800083e:	f7ff ff63 	bl	8000708 <SENSOR_IO_Read>
 8000842:	4603      	mov	r3, r0
 8000844:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800084a:	7bbb      	ldrb	r3, [r7, #14]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000852:	7bba      	ldrb	r2, [r7, #14]
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	4313      	orrs	r3, r2
 8000858:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	461a      	mov	r2, r3
 800085e:	2110      	movs	r1, #16
 8000860:	20d4      	movs	r0, #212	; 0xd4
 8000862:	f7ff ff37 	bl	80006d4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000866:	2112      	movs	r1, #18
 8000868:	20d4      	movs	r0, #212	; 0xd4
 800086a:	f7ff ff4d 	bl	8000708 <SENSOR_IO_Read>
 800086e:	4603      	mov	r3, r0
 8000870:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	b29b      	uxth	r3, r3
 8000878:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000880:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000882:	7bba      	ldrb	r2, [r7, #14]
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	4313      	orrs	r3, r2
 8000888:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	461a      	mov	r2, r3
 800088e:	2112      	movs	r1, #18
 8000890:	20d4      	movs	r0, #212	; 0xd4
 8000892:	f7ff ff1f 	bl	80006d4 <SENSOR_IO_Write>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80008a4:	2300      	movs	r3, #0
 80008a6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80008a8:	2110      	movs	r1, #16
 80008aa:	20d4      	movs	r0, #212	; 0xd4
 80008ac:	f7ff ff2c 	bl	8000708 <SENSOR_IO_Read>
 80008b0:	4603      	mov	r3, r0
 80008b2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	f003 030f 	and.w	r3, r3, #15
 80008ba:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	461a      	mov	r2, r3
 80008c0:	2110      	movs	r1, #16
 80008c2:	20d4      	movs	r0, #212	; 0xd4
 80008c4:	f7ff ff06 	bl	80006d4 <SENSOR_IO_Write>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80008d4:	f7ff fef4 	bl	80006c0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80008d8:	210f      	movs	r1, #15
 80008da:	20d4      	movs	r0, #212	; 0xd4
 80008dc:	f7ff ff14 	bl	8000708 <SENSOR_IO_Read>
 80008e0:	4603      	mov	r3, r0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80008f4:	2115      	movs	r1, #21
 80008f6:	20d4      	movs	r0, #212	; 0xd4
 80008f8:	f7ff ff06 	bl	8000708 <SENSOR_IO_Read>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	f023 0310 	bic.w	r3, r3, #16
 8000906:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d003      	beq.n	8000916 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	461a      	mov	r2, r3
 800091a:	2115      	movs	r1, #21
 800091c:	20d4      	movs	r0, #212	; 0xd4
 800091e:	f7ff fed9 	bl	80006d4 <SENSOR_IO_Write>
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000934:	2300      	movs	r3, #0
 8000936:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800093c:	f04f 0300 	mov.w	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000942:	2110      	movs	r1, #16
 8000944:	20d4      	movs	r0, #212	; 0xd4
 8000946:	f7ff fedf 	bl	8000708 <SENSOR_IO_Read>
 800094a:	4603      	mov	r3, r0
 800094c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800094e:	f107 0208 	add.w	r2, r7, #8
 8000952:	2306      	movs	r3, #6
 8000954:	2128      	movs	r1, #40	; 0x28
 8000956:	20d4      	movs	r0, #212	; 0xd4
 8000958:	f7ff fef4 	bl	8000744 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800095c:	2300      	movs	r3, #0
 800095e:	77fb      	strb	r3, [r7, #31]
 8000960:	e01f      	b.n	80009a2 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000962:	7ffb      	ldrb	r3, [r7, #31]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3301      	adds	r3, #1
 8000968:	f107 0220 	add.w	r2, r7, #32
 800096c:	4413      	add	r3, r2
 800096e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000972:	b29b      	uxth	r3, r3
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	b29a      	uxth	r2, r3
 8000978:	7ffb      	ldrb	r3, [r7, #31]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	f107 0120 	add.w	r1, r7, #32
 8000980:	440b      	add	r3, r1
 8000982:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4413      	add	r3, r2
 800098a:	b29a      	uxth	r2, r3
 800098c:	7ffb      	ldrb	r3, [r7, #31]
 800098e:	b212      	sxth	r2, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	f107 0120 	add.w	r1, r7, #32
 8000996:	440b      	add	r3, r1
 8000998:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800099c:	7ffb      	ldrb	r3, [r7, #31]
 800099e:	3301      	adds	r3, #1
 80009a0:	77fb      	strb	r3, [r7, #31]
 80009a2:	7ffb      	ldrb	r3, [r7, #31]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d9dc      	bls.n	8000962 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80009a8:	7dfb      	ldrb	r3, [r7, #23]
 80009aa:	f003 030c 	and.w	r3, r3, #12
 80009ae:	2b0c      	cmp	r3, #12
 80009b0:	d828      	bhi.n	8000a04 <LSM6DSL_AccReadXYZ+0xd8>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <LSM6DSL_AccReadXYZ+0x8c>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009ed 	.word	0x080009ed
 80009bc:	08000a05 	.word	0x08000a05
 80009c0:	08000a05 	.word	0x08000a05
 80009c4:	08000a05 	.word	0x08000a05
 80009c8:	080009ff 	.word	0x080009ff
 80009cc:	08000a05 	.word	0x08000a05
 80009d0:	08000a05 	.word	0x08000a05
 80009d4:	08000a05 	.word	0x08000a05
 80009d8:	080009f3 	.word	0x080009f3
 80009dc:	08000a05 	.word	0x08000a05
 80009e0:	08000a05 	.word	0x08000a05
 80009e4:	08000a05 	.word	0x08000a05
 80009e8:	080009f9 	.word	0x080009f9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <LSM6DSL_AccReadXYZ+0x124>)
 80009ee:	61bb      	str	r3, [r7, #24]
    break;
 80009f0:	e008      	b.n	8000a04 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <LSM6DSL_AccReadXYZ+0x128>)
 80009f4:	61bb      	str	r3, [r7, #24]
    break;
 80009f6:	e005      	b.n	8000a04 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80009f8:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <LSM6DSL_AccReadXYZ+0x12c>)
 80009fa:	61bb      	str	r3, [r7, #24]
    break;
 80009fc:	e002      	b.n	8000a04 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <LSM6DSL_AccReadXYZ+0x130>)
 8000a00:	61bb      	str	r3, [r7, #24]
    break;    
 8000a02:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	77fb      	strb	r3, [r7, #31]
 8000a08:	e01b      	b.n	8000a42 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	f107 0220 	add.w	r2, r7, #32
 8000a12:	4413      	add	r3, r2
 8000a14:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a28:	7ffb      	ldrb	r3, [r7, #31]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a34:	ee17 2a90 	vmov	r2, s15
 8000a38:	b212      	sxth	r2, r2
 8000a3a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	77fb      	strb	r3, [r7, #31]
 8000a42:	7ffb      	ldrb	r3, [r7, #31]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d9e0      	bls.n	8000a0a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3720      	adds	r7, #32
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	3d79db23 	.word	0x3d79db23
 8000a54:	3df9db23 	.word	0x3df9db23
 8000a58:	3e79db23 	.word	0x3e79db23
 8000a5c:	3ef9db23 	.word	0x3ef9db23

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 f8ff 	bl	8000c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a70:	2000      	movs	r0, #0
 8000a72:	f006 fa99 	bl	8006fa8 <HAL_InitTick>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d002      	beq.n	8000a82 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	e001      	b.n	8000a86 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a82:	f006 f8e5 	bl	8006c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	2000108c 	.word	0x2000108c

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000108c 	.word	0x2000108c

08000ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad8:	f7ff ffee 	bl	8000ab8 <HAL_GetTick>
 8000adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae8:	d005      	beq.n	8000af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_Delay+0x40>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d8f7      	bhi.n	8000af8 <HAL_Delay+0x28>
  {
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3710      	adds	r7, #16
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000038 	.word	0x20000038

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff4c 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c96:	f7ff ff61 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f7ff ffb1 	bl	8000c08 <NVIC_EncodePriority>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff80 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff54 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d101      	bne.n	8000cea <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e014      	b.n	8000d14 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	791b      	ldrb	r3, [r3, #4]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f005 ffcc 	bl	8006c98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2202      	movs	r2, #2
 8000d04:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d32:	d120      	bne.n	8000d76 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d42:	d118      	bne.n	8000d76 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2204      	movs	r2, #4
 8000d48:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	691b      	ldr	r3, [r3, #16]
 8000d4e:	f043 0201 	orr.w	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f000 f82d 	bl	8000dd0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d84:	d120      	bne.n	8000dc8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d94:	d118      	bne.n	8000dc8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2204      	movs	r2, #4
 8000d9a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	f043 0202 	orr.w	r2, r3, #2
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8000dc0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f928 	bl	8001018 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d101      	bne.n	8000e00 <HAL_DAC_ConfigChannel+0x1c>
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	e107      	b.n	8001010 <HAL_DAC_ConfigChannel+0x22c>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2201      	movs	r2, #1
 8000e04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2202      	movs	r2, #2
 8000e0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d174      	bne.n	8000efe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000e14:	f7ff fe50 	bl	8000ab8 <HAL_GetTick>
 8000e18:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d134      	bne.n	8000e8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e20:	e011      	b.n	8000e46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000e22:	f7ff fe49 	bl	8000ab8 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d90a      	bls.n	8000e46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	691b      	ldr	r3, [r3, #16]
 8000e34:	f043 0208 	orr.w	r2, r3, #8
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e0e4      	b.n	8001010 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1e6      	bne.n	8000e22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f7ff fe3b 	bl	8000ad0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	6992      	ldr	r2, [r2, #24]
 8000e62:	641a      	str	r2, [r3, #64]	; 0x40
 8000e64:	e01e      	b.n	8000ea4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000e66:	f7ff fe27 	bl	8000ab8 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d90a      	bls.n	8000e8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	f043 0208 	orr.w	r2, r3, #8
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2203      	movs	r2, #3
 8000e84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e0c2      	b.n	8001010 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	dbe8      	blt.n	8000e66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff fe1b 	bl	8000ad0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	6992      	ldr	r2, [r2, #24]
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	ea02 0103 	and.w	r1, r2, r3
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	69da      	ldr	r2, [r3, #28]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	21ff      	movs	r1, #255	; 0xff
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	ea02 0103 	and.w	r1, r2, r3
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d11d      	bne.n	8000f42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	221f      	movs	r2, #31
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f48:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	2207      	movs	r2, #7
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	697a      	ldr	r2, [r7, #20]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0310 	and.w	r3, r3, #16
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	22c0      	movs	r2, #192	; 0xc0
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	400a      	ands	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2201      	movs	r2, #1
 8001006:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2200      	movs	r2, #0
 800100c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e098      	b.n	8001170 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_DMA_Init+0x150>)
 8001046:	429a      	cmp	r2, r3
 8001048:	d80f      	bhi.n	800106a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b4b      	ldr	r3, [pc, #300]	; (8001180 <HAL_DMA_Init+0x154>)
 8001052:	4413      	add	r3, r2
 8001054:	4a4b      	ldr	r2, [pc, #300]	; (8001184 <HAL_DMA_Init+0x158>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	009a      	lsls	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_DMA_Init+0x15c>)
 8001066:	641a      	str	r2, [r3, #64]	; 0x40
 8001068:	e00e      	b.n	8001088 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	4b46      	ldr	r3, [pc, #280]	; (800118c <HAL_DMA_Init+0x160>)
 8001072:	4413      	add	r3, r2
 8001074:	4a43      	ldr	r2, [pc, #268]	; (8001184 <HAL_DMA_Init+0x158>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	091b      	lsrs	r3, r3, #4
 800107c:	009a      	lsls	r2, r3, #2
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a42      	ldr	r2, [pc, #264]	; (8001190 <HAL_DMA_Init+0x164>)
 8001086:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2202      	movs	r2, #2
 800108c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010e2:	d039      	beq.n	8001158 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <HAL_DMA_Init+0x15c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d11a      	bne.n	8001124 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_DMA_Init+0x168>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f003 031c 	and.w	r3, r3, #28
 80010fa:	210f      	movs	r1, #15
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4924      	ldr	r1, [pc, #144]	; (8001194 <HAL_DMA_Init+0x168>)
 8001104:	4013      	ands	r3, r2
 8001106:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_DMA_Init+0x168>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6859      	ldr	r1, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f003 031c 	and.w	r3, r3, #28
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	491d      	ldr	r1, [pc, #116]	; (8001194 <HAL_DMA_Init+0x168>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
 8001122:	e019      	b.n	8001158 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_DMA_Init+0x16c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f003 031c 	and.w	r3, r3, #28
 8001130:	210f      	movs	r1, #15
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	4917      	ldr	r1, [pc, #92]	; (8001198 <HAL_DMA_Init+0x16c>)
 800113a:	4013      	ands	r3, r2
 800113c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_DMA_Init+0x16c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6859      	ldr	r1, [r3, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 031c 	and.w	r3, r3, #28
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	4911      	ldr	r1, [pc, #68]	; (8001198 <HAL_DMA_Init+0x16c>)
 8001154:	4313      	orrs	r3, r2
 8001156:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40020407 	.word	0x40020407
 8001180:	bffdfff8 	.word	0xbffdfff8
 8001184:	cccccccd 	.word	0xcccccccd
 8001188:	40020000 	.word	0x40020000
 800118c:	bffdfbf8 	.word	0xbffdfbf8
 8001190:	40020400 	.word	0x40020400
 8001194:	400200a8 	.word	0x400200a8
 8001198:	400204a8 	.word	0x400204a8

0800119c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	f003 031c 	and.w	r3, r3, #28
 80011bc:	2204      	movs	r2, #4
 80011be:	409a      	lsls	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d026      	beq.n	8001216 <HAL_DMA_IRQHandler+0x7a>
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d021      	beq.n	8001216 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0320 	and.w	r3, r3, #32
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d107      	bne.n	80011f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f022 0204 	bic.w	r2, r2, #4
 80011ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f003 021c 	and.w	r2, r3, #28
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	2104      	movs	r1, #4
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001208:	2b00      	cmp	r3, #0
 800120a:	d071      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001214:	e06c      	b.n	80012f0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f003 031c 	and.w	r3, r3, #28
 800121e:	2202      	movs	r2, #2
 8001220:	409a      	lsls	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d02e      	beq.n	8001288 <HAL_DMA_IRQHandler+0xec>
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d029      	beq.n	8001288 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10b      	bne.n	800125a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 020a 	bic.w	r2, r2, #10
 8001250:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 021c 	and.w	r2, r3, #28
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	2102      	movs	r1, #2
 8001268:	fa01 f202 	lsl.w	r2, r1, r2
 800126c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	2b00      	cmp	r3, #0
 800127c:	d038      	beq.n	80012f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001286:	e033      	b.n	80012f0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f003 031c 	and.w	r3, r3, #28
 8001290:	2208      	movs	r2, #8
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d02a      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x156>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d025      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f003 021c 	and.w	r2, r3, #28
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
}
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130a:	e17f      	b.n	800160c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8171 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d00b      	beq.n	8001344 <HAL_GPIO_Init+0x48>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001338:	2b11      	cmp	r3, #17
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b12      	cmp	r3, #18
 8001342:	d130      	bne.n	80013a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800137a:	2201      	movs	r2, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f003 0201 	and.w	r2, r3, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d118      	bne.n	80013e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013b8:	2201      	movs	r2, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f003 0201 	and.w	r2, r3, #1
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x128>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80ac 	beq.w	8001606 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_GPIO_Init+0x32c>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <HAL_GPIO_Init+0x32c>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ba:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <HAL_GPIO_Init+0x32c>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014c6:	4a59      	ldr	r2, [pc, #356]	; (800162c <HAL_GPIO_Init+0x330>)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x242>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4e      	ldr	r2, [pc, #312]	; (8001630 <HAL_GPIO_Init+0x334>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x23e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4d      	ldr	r2, [pc, #308]	; (8001634 <HAL_GPIO_Init+0x338>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x23a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4c      	ldr	r2, [pc, #304]	; (8001638 <HAL_GPIO_Init+0x33c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x236>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4b      	ldr	r2, [pc, #300]	; (800163c <HAL_GPIO_Init+0x340>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x232>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4a      	ldr	r2, [pc, #296]	; (8001640 <HAL_GPIO_Init+0x344>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a49      	ldr	r2, [pc, #292]	; (8001644 <HAL_GPIO_Init+0x348>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x22a>
 8001522:	2306      	movs	r3, #6
 8001524:	e00c      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001526:	2307      	movs	r3, #7
 8001528:	e00a      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152a:	2305      	movs	r3, #5
 800152c:	e008      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800152e:	2304      	movs	r3, #4
 8001530:	e006      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001532:	2303      	movs	r3, #3
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x244>
 8001536:	2302      	movs	r3, #2
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x244>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	f002 0203 	and.w	r2, r2, #3
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4936      	ldr	r1, [pc, #216]	; (800162c <HAL_GPIO_Init+0x330>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_GPIO_Init+0x34c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001582:	4a31      	ldr	r2, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x34c>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x34c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x34c>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_GPIO_Init+0x34c>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x34c>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_GPIO_Init+0x34c>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_GPIO_Init+0x34c>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa22 f303 	lsr.w	r3, r2, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	f47f ae78 	bne.w	800130c <HAL_GPIO_Init+0x10>
  }
}
 800161c:	bf00      	nop
 800161e:	371c      	adds	r7, #28
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	40021000 	.word	0x40021000
 800162c:	40010000 	.word	0x40010000
 8001630:	48000400 	.word	0x48000400
 8001634:	48000800 	.word	0x48000800
 8001638:	48000c00 	.word	0x48000c00
 800163c:	48001000 	.word	0x48001000
 8001640:	48001400 	.word	0x48001400
 8001644:	48001800 	.word	0x48001800
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800165a:	e0cd      	b.n	80017f8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800165c:	2201      	movs	r2, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80c0 	beq.w	80017f2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001672:	4a68      	ldr	r2, [pc, #416]	; (8001814 <HAL_GPIO_DeInit+0x1c8>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169a:	d025      	beq.n	80016e8 <HAL_GPIO_DeInit+0x9c>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_GPIO_DeInit+0x1cc>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d01f      	beq.n	80016e4 <HAL_GPIO_DeInit+0x98>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a5d      	ldr	r2, [pc, #372]	; (800181c <HAL_GPIO_DeInit+0x1d0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d019      	beq.n	80016e0 <HAL_GPIO_DeInit+0x94>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a5c      	ldr	r2, [pc, #368]	; (8001820 <HAL_GPIO_DeInit+0x1d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d013      	beq.n	80016dc <HAL_GPIO_DeInit+0x90>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a5b      	ldr	r2, [pc, #364]	; (8001824 <HAL_GPIO_DeInit+0x1d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d00d      	beq.n	80016d8 <HAL_GPIO_DeInit+0x8c>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a5a      	ldr	r2, [pc, #360]	; (8001828 <HAL_GPIO_DeInit+0x1dc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d007      	beq.n	80016d4 <HAL_GPIO_DeInit+0x88>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a59      	ldr	r2, [pc, #356]	; (800182c <HAL_GPIO_DeInit+0x1e0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d101      	bne.n	80016d0 <HAL_GPIO_DeInit+0x84>
 80016cc:	2306      	movs	r3, #6
 80016ce:	e00c      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016d0:	2307      	movs	r3, #7
 80016d2:	e00a      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016d4:	2305      	movs	r3, #5
 80016d6:	e008      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016d8:	2304      	movs	r3, #4
 80016da:	e006      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016dc:	2303      	movs	r3, #3
 80016de:	e004      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_GPIO_DeInit+0x9e>
 80016e8:	2300      	movs	r3, #0
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	f002 0203 	and.w	r2, r2, #3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d132      	bne.n	8001760 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	43db      	mvns	r3, r3
 8001702:	494b      	ldr	r1, [pc, #300]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 8001704:	4013      	ands	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001708:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	43db      	mvns	r3, r3
 8001710:	4947      	ldr	r1, [pc, #284]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 8001712:	4013      	ands	r3, r2
 8001714:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	4944      	ldr	r1, [pc, #272]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 8001720:	4013      	ands	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 8001726:	68da      	ldr	r2, [r3, #12]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	43db      	mvns	r3, r3
 800172c:	4940      	ldr	r1, [pc, #256]	; (8001830 <HAL_GPIO_DeInit+0x1e4>)
 800172e:	4013      	ands	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	220f      	movs	r2, #15
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001742:	4a34      	ldr	r2, [pc, #208]	; (8001814 <HAL_GPIO_DeInit+0x1c8>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	4830      	ldr	r0, [pc, #192]	; (8001814 <HAL_GPIO_DeInit+0x1c8>)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	400a      	ands	r2, r1
 800175a:	3302      	adds	r3, #2
 800175c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2103      	movs	r1, #3
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	08d2      	lsrs	r2, r2, #3
 8001794:	4019      	ands	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2103      	movs	r1, #3
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	2101      	movs	r1, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2103      	movs	r1, #3
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	401a      	ands	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e2:	2101      	movs	r1, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	f47f af2b 	bne.w	800165c <HAL_GPIO_DeInit+0x10>
  }
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40010000 	.word	0x40010000
 8001818:	48000400 	.word	0x48000400
 800181c:	48000800 	.word	0x48000800
 8001820:	48000c00 	.word	0x48000c00
 8001824:	48001000 	.word	0x48001000
 8001828:	48001400 	.word	0x48001400
 800182c:	48001800 	.word	0x48001800
 8001830:	40010400 	.word	0x40010400

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001850:	e002      	b.n	8001858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4013      	ands	r3, r2
 800187c:	041a      	lsls	r2, r3, #16
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43d9      	mvns	r1, r3
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	400b      	ands	r3, r1
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	619a      	str	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d006      	beq.n	80018bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f004 fff0 	bl	800689c <HAL_GPIO_EXTI_Callback>
  }
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40010400 	.word	0x40010400

080018c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e081      	b.n	80019de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d106      	bne.n	80018f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f005 fa46 	bl	8006d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2224      	movs	r2, #36	; 0x24
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	e006      	b.n	8001950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800194e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d104      	bne.n	8001962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691a      	ldr	r2, [r3, #16]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	ea42 0103 	orr.w	r1, r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	021a      	lsls	r2, r3, #8
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	430a      	orrs	r2, r1
 800199e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69d9      	ldr	r1, [r3, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1a      	ldr	r2, [r3, #32]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0201 	orr.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e021      	b.n	8001a3c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2224      	movs	r2, #36	; 0x24
 80019fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f022 0201 	bic.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f005 f9f9 	bl	8006e08 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	460b      	mov	r3, r1
 8001a58:	813b      	strh	r3, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	f040 80f9 	bne.w	8001c5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_I2C_Mem_Write+0x34>
 8001a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0ed      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Mem_Write+0x4e>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0e6      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a9a:	f7ff f80d 	bl	8000ab8 <HAL_GetTick>
 8001a9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fac3 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0d1      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2221      	movs	r2, #33	; 0x21
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ae4:	88f8      	ldrh	r0, [r7, #6]
 8001ae6:	893a      	ldrh	r2, [r7, #8]
 8001ae8:	8979      	ldrh	r1, [r7, #10]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4603      	mov	r3, r0
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f9d3 	bl	8001ea0 <I2C_RequestMemoryWrite>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0a9      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bff      	cmp	r3, #255	; 0xff
 8001b14:	d90e      	bls.n	8001b34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 fba5 	bl	800227c <I2C_TransferConfig>
 8001b32:	e00f      	b.n	8001b54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	8979      	ldrh	r1, [r7, #10]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb94 	bl	800227c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 faad 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07b      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3b01      	subs	r3, #1
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d034      	beq.n	8001c0c <HAL_I2C_Mem_Write+0x1c8>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d130      	bne.n	8001c0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	; 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa3f 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04d      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2bff      	cmp	r3, #255	; 0xff
 8001bcc:	d90e      	bls.n	8001bec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	22ff      	movs	r2, #255	; 0xff
 8001bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fb49 	bl	800227c <I2C_TransferConfig>
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fb38 	bl	800227c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d19e      	bne.n	8001b54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 fa8c 	bl	8002138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01a      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_I2C_Mem_Write+0x224>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	fe00e800 	.word	0xfe00e800

08001c6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	4608      	mov	r0, r1
 8001c76:	4611      	mov	r1, r2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	817b      	strh	r3, [r7, #10]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	813b      	strh	r3, [r7, #8]
 8001c82:	4613      	mov	r3, r2
 8001c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	f040 80fd 	bne.w	8001e8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_I2C_Mem_Read+0x34>
 8001c9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0f1      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_I2C_Mem_Read+0x4e>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e0ea      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cc2:	f7fe fef9 	bl	8000ab8 <HAL_GetTick>
 8001cc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2319      	movs	r3, #25
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f9af 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0d5      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2222      	movs	r2, #34	; 0x22
 8001ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d0c:	88f8      	ldrh	r0, [r7, #6]
 8001d0e:	893a      	ldrh	r2, [r7, #8]
 8001d10:	8979      	ldrh	r1, [r7, #10]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 f913 	bl	8001f48 <I2C_RequestMemoryRead>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d005      	beq.n	8001d34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e0ad      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2bff      	cmp	r3, #255	; 0xff
 8001d3c:	d90e      	bls.n	8001d5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	22ff      	movs	r2, #255	; 0xff
 8001d42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	8979      	ldrh	r1, [r7, #10]
 8001d4c:	4b52      	ldr	r3, [pc, #328]	; (8001e98 <HAL_I2C_Mem_Read+0x22c>)
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fa91 	bl	800227c <I2C_TransferConfig>
 8001d5a:	e00f      	b.n	8001d7c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	8979      	ldrh	r1, [r7, #10]
 8001d6e:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <HAL_I2C_Mem_Read+0x22c>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa80 	bl	800227c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	2200      	movs	r2, #0
 8001d84:	2104      	movs	r1, #4
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f956 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e07c      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d034      	beq.n	8001e3c <HAL_I2C_Mem_Read+0x1d0>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d130      	bne.n	8001e3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de0:	2200      	movs	r2, #0
 8001de2:	2180      	movs	r1, #128	; 0x80
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f927 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e04d      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d90e      	bls.n	8001e1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	22ff      	movs	r2, #255	; 0xff
 8001e02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e08:	b2da      	uxtb	r2, r3
 8001e0a:	8979      	ldrh	r1, [r7, #10]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fa31 	bl	800227c <I2C_TransferConfig>
 8001e1a:	e00f      	b.n	8001e3c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	8979      	ldrh	r1, [r7, #10]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa20 	bl	800227c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d19a      	bne.n	8001d7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f974 	bl	8002138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e01a      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_I2C_Mem_Read+0x230>)
 8001e6e:	400b      	ands	r3, r1
 8001e70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	80002400 	.word	0x80002400
 8001e9c:	fe00e800 	.word	0xfe00e800

08001ea0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <I2C_RequestMemoryWrite+0xa4>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f9d7 	bl	800227c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f8f0 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e02c      	b.n	8001f3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d105      	bne.n	8001ef4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ef2:	e015      	b.n	8001f20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001ef4:	893b      	ldrh	r3, [r7, #8]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f8d6 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e012      	b.n	8001f3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f16:	893b      	ldrh	r3, [r7, #8]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2200      	movs	r2, #0
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f884 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	80002000 	.word	0x80002000

08001f48 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4603      	mov	r3, r0
 8001f58:	817b      	strh	r3, [r7, #10]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	813b      	strh	r3, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <I2C_RequestMemoryRead+0xa4>)
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f984 	bl	800227c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f89d 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e02c      	b.n	8001fe2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f88:	88fb      	ldrh	r3, [r7, #6]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8e:	893b      	ldrh	r3, [r7, #8]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
 8001f98:	e015      	b.n	8001fc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f9a:	893b      	ldrh	r3, [r7, #8]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f883 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e012      	b.n	8001fe2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fbc:	893b      	ldrh	r3, [r7, #8]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	2140      	movs	r1, #64	; 0x40
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f831 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	80002000 	.word	0x80002000

08001ff0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d103      	bne.n	800200e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	619a      	str	r2, [r3, #24]
  }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002048:	e022      	b.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d01e      	beq.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7fe fd31 	bl	8000ab8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d113      	bne.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e00f      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d0cd      	beq.n	800204a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c4:	e02c      	b.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f870 	bl	80021b0 <I2C_IsAcknowledgeFailed>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02a      	b.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d01e      	beq.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7fe fce9 	bl	8000ab8 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d113      	bne.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d1cb      	bne.n	80020c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002144:	e028      	b.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f830 	bl	80021b0 <I2C_IsAcknowledgeFailed>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e026      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7fe fcad 	bl	8000ab8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d113      	bne.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e007      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d1cf      	bne.n	8002146 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b10      	cmp	r3, #16
 80021c8:	d151      	bne.n	800226e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021ca:	e022      	b.n	8002212 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d01e      	beq.n	8002212 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7fe fc70 	bl	8000ab8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_IsAcknowledgeFailed+0x3a>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d113      	bne.n	8002212 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e02e      	b.n	8002270 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b20      	cmp	r3, #32
 800221e:	d1d5      	bne.n	80021cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2220      	movs	r2, #32
 800222e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fedd 	bl	8001ff0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <I2C_IsAcknowledgeFailed+0xc8>)
 8002242:	400b      	ands	r3, r1
 8002244:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f043 0204 	orr.w	r2, r3, #4
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	fe00e800 	.word	0xfe00e800

0800227c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	4613      	mov	r3, r2
 800228c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	0d5b      	lsrs	r3, r3, #21
 8002298:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <I2C_TransferConfig+0x58>)
 800229e:	430b      	orrs	r3, r1
 80022a0:	43db      	mvns	r3, r3
 80022a2:	ea02 0103 	and.w	r1, r2, r3
 80022a6:	897b      	ldrh	r3, [r7, #10]
 80022a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ac:	7a7b      	ldrb	r3, [r7, #9]
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	431a      	orrs	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	03ff63ff 	.word	0x03ff63ff

080022d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b20      	cmp	r3, #32
 80022ec:	d138      	bne.n	8002360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e032      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800232a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b20      	cmp	r3, #32
 8002382:	d139      	bne.n	80023f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800238e:	2302      	movs	r3, #2
 8002390:	e033      	b.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <HAL_PWREx_GetVoltageRange+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000

08002424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002432:	d130      	bne.n	8002496 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002434:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800243c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002440:	d038      	beq.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800244a:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800244c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002450:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002452:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2232      	movs	r2, #50	; 0x32
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0c9b      	lsrs	r3, r3, #18
 8002464:	3301      	adds	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002468:	e002      	b.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3b01      	subs	r3, #1
 800246e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247c:	d102      	bne.n	8002484 <HAL_PWREx_ControlVoltageScaling+0x60>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f2      	bne.n	800246a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002484:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002490:	d110      	bne.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e00f      	b.n	80024b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002496:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a2:	d007      	beq.n	80024b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ac:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40007000 	.word	0x40007000
 80024c8:	20000040 	.word	0x20000040
 80024cc:	431bde83 	.word	0x431bde83

080024d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7fe faee 	bl	8000ab8 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e063      	b.n	80025b0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10b      	bne.n	800250c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f004 fca7 	bl	8006e50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002502:	f241 3188 	movw	r1, #5000	; 0x1388
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f858 	bl	80025bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	3b01      	subs	r3, #1
 800251c:	021a      	lsls	r2, r3, #8
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	2120      	movs	r1, #32
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f850 	bl	80025d8 <QSPI_WaitFlagStateUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800253c:	7afb      	ldrb	r3, [r7, #11]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d131      	bne.n	80025a6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800254c:	f023 0310 	bic.w	r3, r3, #16
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	0611      	lsls	r1, r2, #24
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_QSPI_Init+0xe8>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6912      	ldr	r2, [r2, #16]
 8002572:	0411      	lsls	r1, r2, #16
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6952      	ldr	r2, [r2, #20]
 8002578:	4311      	orrs	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6992      	ldr	r2, [r2, #24]
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80025ae:	7afb      	ldrb	r3, [r7, #11]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	ffe0f8fe 	.word	0xffe0f8fe

080025bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80025e8:	e01a      	b.n	8002620 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d016      	beq.n	8002620 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7fe fa61 	bl	8000ab8 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2204      	movs	r2, #4
 800260c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e00e      	b.n	800263e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	429a      	cmp	r2, r3
 800263a:	d1d6      	bne.n	80025ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e3d4      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800265a:	4ba1      	ldr	r3, [pc, #644]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002664:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 80e4 	beq.w	8002844 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_RCC_OscConfig+0x4a>
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	2b0c      	cmp	r3, #12
 8002686:	f040 808b 	bne.w	80027a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b01      	cmp	r3, #1
 800268e:	f040 8087 	bne.w	80027a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002692:	4b93      	ldr	r3, [pc, #588]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x62>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e3ac      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <HAL_RCC_OscConfig+0x7c>
 80026ba:	4b89      	ldr	r3, [pc, #548]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_OscConfig+0x88>
 80026c4:	4b86      	ldr	r3, [pc, #536]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	091b      	lsrs	r3, r3, #4
 80026cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d223      	bcs.n	800271c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fd71 	bl	80031c0 <RCC_SetFlashLatencyFromMSIRange>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e38d      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026e8:	4b7d      	ldr	r3, [pc, #500]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026ee:	f043 0308 	orr.w	r3, r3, #8
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b7a      	ldr	r3, [pc, #488]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4977      	ldr	r1, [pc, #476]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002702:	4313      	orrs	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002706:	4b76      	ldr	r3, [pc, #472]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	4972      	ldr	r1, [pc, #456]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
 800271a:	e025      	b.n	8002768 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271c:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a6f      	ldr	r2, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b6d      	ldr	r3, [pc, #436]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	496a      	ldr	r1, [pc, #424]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273a:	4b69      	ldr	r3, [pc, #420]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fd31 	bl	80031c0 <RCC_SetFlashLatencyFromMSIRange>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e34d      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002768:	f000 fc36 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 800276c:	4601      	mov	r1, r0
 800276e:	4b5c      	ldr	r3, [pc, #368]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	4a5a      	ldr	r2, [pc, #360]	; (80028e4 <HAL_RCC_OscConfig+0x29c>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa21 f303 	lsr.w	r3, r1, r3
 8002784:	4a58      	ldr	r2, [pc, #352]	; (80028e8 <HAL_RCC_OscConfig+0x2a0>)
 8002786:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x2a4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fc0b 	bl	8006fa8 <HAL_InitTick>
 8002792:	4603      	mov	r3, r0
 8002794:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d052      	beq.n	8002842 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	e331      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d032      	beq.n	800280e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027a8:	4b4d      	ldr	r3, [pc, #308]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a4c      	ldr	r2, [pc, #304]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027ae:	f043 0301 	orr.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027b4:	f7fe f980 	bl	8000ab8 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027bc:	f7fe f97c 	bl	8000ab8 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e31a      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ce:	4b44      	ldr	r3, [pc, #272]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027da:	4b41      	ldr	r3, [pc, #260]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a40      	ldr	r2, [pc, #256]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	493b      	ldr	r1, [pc, #236]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027f8:	4b39      	ldr	r3, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	021b      	lsls	r3, r3, #8
 8002806:	4936      	ldr	r1, [pc, #216]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e01a      	b.n	8002844 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800280e:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800281a:	f7fe f94d 	bl	8000ab8 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002822:	f7fe f949 	bl	8000ab8 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e2e7      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002834:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f0      	bne.n	8002822 <HAL_RCC_OscConfig+0x1da>
 8002840:	e000      	b.n	8002844 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002842:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d074      	beq.n	800293a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d005      	beq.n	8002862 <HAL_RCC_OscConfig+0x21a>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d10e      	bne.n	800287a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2b03      	cmp	r3, #3
 8002860:	d10b      	bne.n	800287a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002862:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d064      	beq.n	8002938 <HAL_RCC_OscConfig+0x2f0>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d160      	bne.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e2c4      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x24a>
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e01d      	b.n	80028ce <HAL_RCC_OscConfig+0x286>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800289a:	d10c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x26e>
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a6:	6013      	str	r3, [r2, #0]
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e00b      	b.n	80028ce <HAL_RCC_OscConfig+0x286>
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x298>)
 80028c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01c      	beq.n	8002910 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe f8ef 	bl	8000ab8 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028dc:	e011      	b.n	8002902 <HAL_RCC_OscConfig+0x2ba>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	0800735c 	.word	0x0800735c
 80028e8:	20000040 	.word	0x20000040
 80028ec:	20000034 	.word	0x20000034
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fe f8e2 	bl	8000ab8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e280      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002902:	4baf      	ldr	r3, [pc, #700]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x2a8>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe f8d2 	bl	8000ab8 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe f8ce 	bl	8000ab8 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e26c      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800292a:	4ba5      	ldr	r3, [pc, #660]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x2d0>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d060      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d005      	beq.n	8002958 <HAL_RCC_OscConfig+0x310>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d119      	bne.n	8002986 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d116      	bne.n	8002986 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002958:	4b99      	ldr	r3, [pc, #612]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_OscConfig+0x328>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e249      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	061b      	lsls	r3, r3, #24
 800297e:	4990      	ldr	r1, [pc, #576]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002984:	e040      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d023      	beq.n	80029d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298e:	4b8c      	ldr	r3, [pc, #560]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a8b      	ldr	r2, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe f88d 	bl	8000ab8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7fe f889 	bl	8000ab8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e227      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029b4:	4b82      	ldr	r3, [pc, #520]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b7f      	ldr	r3, [pc, #508]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	497c      	ldr	r1, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
 80029d4:	e018      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b7a      	ldr	r3, [pc, #488]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a79      	ldr	r2, [pc, #484]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe f869 	bl	8000ab8 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe f865 	bl	8000ab8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e203      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029fc:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a22:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f844 	bl	8000ab8 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe f840 	bl	8000ab8 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e1de      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a46:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCC_OscConfig+0x3ec>
 8002a54:	e01b      	b.n	8002a8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a56:	4b5a      	ldr	r3, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5c:	4a58      	ldr	r2, [pc, #352]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe f827 	bl	8000ab8 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe f823 	bl	8000ab8 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1c1      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a80:	4b4f      	ldr	r3, [pc, #316]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ef      	bne.n	8002a6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80a6 	beq.w	8002be8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002aa0:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b44      	ldr	r3, [pc, #272]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab0:	4a43      	ldr	r2, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab8:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac8:	4b3e      	ldr	r3, [pc, #248]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d118      	bne.n	8002b06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae0:	f7fd ffea 	bl	8000ab8 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fd ffe6 	bl	8000ab8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e184      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afa:	4b32      	ldr	r3, [pc, #200]	; (8002bc4 <HAL_RCC_OscConfig+0x57c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4d8>
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b1e:	e024      	b.n	8002b6a <HAL_RCC_OscConfig+0x522>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d110      	bne.n	8002b4a <HAL_RCC_OscConfig+0x502>
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a24      	ldr	r2, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b30:	f043 0304 	orr.w	r3, r3, #4
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b48:	e00f      	b.n	8002b6a <HAL_RCC_OscConfig+0x522>
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b62:	f023 0304 	bic.w	r3, r3, #4
 8002b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d016      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fd ffa1 	bl	8000ab8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fd ff9d 	bl	8000ab8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e139      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x578>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ed      	beq.n	8002b7a <HAL_RCC_OscConfig+0x532>
 8002b9e:	e01a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fd ff8a 	bl	8000ab8 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ba6:	e00f      	b.n	8002bc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff86 	bl	8000ab8 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d906      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e122      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bc8:	4b90      	ldr	r3, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e8      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd6:	7ffb      	ldrb	r3, [r7, #31]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bdc:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a8a      	ldr	r2, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8108 	beq.w	8002e02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	f040 80d0 	bne.w	8002d9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002bfc:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d130      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d127      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d11f      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c3c:	2a07      	cmp	r2, #7
 8002c3e:	bf14      	ite	ne
 8002c40:	2201      	movne	r2, #1
 8002c42:	2200      	moveq	r2, #0
 8002c44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d109      	bne.n	8002c72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d06e      	beq.n	8002d50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b0c      	cmp	r3, #12
 8002c76:	d069      	beq.n	8002d4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c78:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c84:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0b7      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c94:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5c      	ldr	r2, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ca0:	f7fd ff0a 	bl	8000ab8 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fd ff06 	bl	8000ab8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0a4      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc6:	4b51      	ldr	r3, [pc, #324]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	4b51      	ldr	r3, [pc, #324]	; (8002e10 <HAL_RCC_OscConfig+0x7c8>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002cd6:	3a01      	subs	r2, #1
 8002cd8:	0112      	lsls	r2, r2, #4
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ce0:	0212      	lsls	r2, r2, #8
 8002ce2:	4311      	orrs	r1, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ce8:	0852      	lsrs	r2, r2, #1
 8002cea:	3a01      	subs	r2, #1
 8002cec:	0552      	lsls	r2, r2, #21
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cf4:	0852      	lsrs	r2, r2, #1
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	0652      	lsls	r2, r2, #25
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d00:	0912      	lsrs	r2, r2, #4
 8002d02:	0452      	lsls	r2, r2, #17
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4941      	ldr	r1, [pc, #260]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a3e      	ldr	r2, [pc, #248]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d18:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d24:	f7fd fec8 	bl	8000ab8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fd fec4 	bl	8000ab8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e062      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d3e:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d4a:	e05a      	b.n	8002e02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e059      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d50:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d152      	bne.n	8002e02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d5c:	4b2b      	ldr	r3, [pc, #172]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a2a      	ldr	r2, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d74:	f7fd fea0 	bl	8000ab8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7c:	f7fd fe9c 	bl	8000ab8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e03a      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x734>
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d02d      	beq.n	8002dfe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a19      	ldr	r2, [pc, #100]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d105      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a13      	ldr	r2, [pc, #76]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002dc0:	f023 0303 	bic.w	r3, r3, #3
 8002dc4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002dc6:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002dcc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fd fe6f 	bl	8000ab8 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fd fe6b 	bl	8000ab8 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e009      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x7c4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x796>
 8002dfc:	e001      	b.n	8002e02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	f99d808c 	.word	0xf99d808c

08002e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0c8      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e28:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d910      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f023 0207 	bic.w	r2, r3, #7
 8002e3e:	4961      	ldr	r1, [pc, #388]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b0      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d04c      	beq.n	8002efe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b03      	cmp	r3, #3
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d121      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e09e      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e84:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d115      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e092      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e086      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eac:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e07e      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 0203 	bic.w	r2, r3, #3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	493f      	ldr	r1, [pc, #252]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ece:	f7fd fdf3 	bl	8000ab8 <HAL_GetTick>
 8002ed2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fd fdef 	bl	8000ab8 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e066      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eec:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 020c 	and.w	r2, r3, #12
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d1eb      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	492c      	ldr	r1, [pc, #176]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0307 	and.w	r3, r3, #7
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d210      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 0207 	bic.w	r2, r3, #7
 8002f32:	4924      	ldr	r1, [pc, #144]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e036      	b.n	8002fba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4918      	ldr	r1, [pc, #96]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4910      	ldr	r1, [pc, #64]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f8a:	f000 f825 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <HAL_RCC_ClockConfig+0x1b8>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 fffa 	bl	8006fa8 <HAL_InitTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40022000 	.word	0x40022000
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	0800735c 	.word	0x0800735c
 8002fd0:	20000040 	.word	0x20000040
 8002fd4:	20000034 	.word	0x20000034

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_GetSysClockFreq+0x34>
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d121      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d11e      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d107      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003018:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800301a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301e:	0a1b      	lsrs	r3, r3, #8
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	61fb      	str	r3, [r7, #28]
 8003026:	e005      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003028:	4b2c      	ldr	r3, [pc, #176]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003034:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10d      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d102      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	e004      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d101      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800305c:	4b22      	ldr	r3, [pc, #136]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 800305e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	d133      	bne.n	80030ce <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xa4>
 8003076:	2b03      	cmp	r3, #3
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0xaa>
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800307c:	4b19      	ldr	r3, [pc, #100]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800307e:	617b      	str	r3, [r7, #20]
      break;
 8003080:	e005      	b.n	800308e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003082:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003084:	617b      	str	r3, [r7, #20]
      break;
 8003086:	e002      	b.n	800308e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	617b      	str	r3, [r7, #20]
      break;
 800308c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	091b      	lsrs	r3, r3, #4
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	3301      	adds	r3, #1
 800309a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	fb02 f203 	mul.w	r2, r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_GetSysClockFreq+0x104>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	0e5b      	lsrs	r3, r3, #25
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030ce:	69bb      	ldr	r3, [r7, #24]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3724      	adds	r7, #36	; 0x24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08007374 	.word	0x08007374
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000040 	.word	0x20000040

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4601      	mov	r1, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <HAL_RCC_GetPCLK1Freq+0x28>)
 800311a:	5cd3      	ldrb	r3, [r2, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	0800736c 	.word	0x0800736c

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003134:	f7ff ffda 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003138:	4601      	mov	r1, r0
 800313a:	4b06      	ldr	r3, [pc, #24]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0adb      	lsrs	r3, r3, #11
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4a04      	ldr	r2, [pc, #16]	; (8003158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003150:	4618      	mov	r0, r3
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40021000 	.word	0x40021000
 8003158:	0800736c 	.word	0x0800736c

0800315c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	220f      	movs	r2, #15
 800316a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <HAL_RCC_GetClockConfig+0x5c>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_RCC_GetClockConfig+0x5c>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	08db      	lsrs	r3, r3, #3
 8003196:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <HAL_RCC_GetClockConfig+0x60>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40022000 	.word	0x40022000

080031c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031c8:	2300      	movs	r3, #0
 80031ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031cc:	4b2a      	ldr	r3, [pc, #168]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031d8:	f7ff f916 	bl	8002408 <HAL_PWREx_GetVoltageRange>
 80031dc:	6178      	str	r0, [r7, #20]
 80031de:	e014      	b.n	800320a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e4:	4a24      	ldr	r2, [pc, #144]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6593      	str	r3, [r2, #88]	; 0x58
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031f8:	f7ff f906 	bl	8002408 <HAL_PWREx_GetVoltageRange>
 80031fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003208:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003210:	d10b      	bne.n	800322a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b80      	cmp	r3, #128	; 0x80
 8003216:	d919      	bls.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2ba0      	cmp	r3, #160	; 0xa0
 800321c:	d902      	bls.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800321e:	2302      	movs	r3, #2
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	e013      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003224:	2301      	movs	r3, #1
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	e010      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b80      	cmp	r3, #128	; 0x80
 800322e:	d902      	bls.n	8003236 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003230:	2303      	movs	r3, #3
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e00a      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d102      	bne.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800323c:	2302      	movs	r3, #2
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	e004      	b.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b70      	cmp	r3, #112	; 0x70
 8003246:	d101      	bne.n	800324c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003248:	2301      	movs	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 0207 	bic.w	r2, r3, #7
 8003254:	4909      	ldr	r1, [pc, #36]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800325c:	4b07      	ldr	r3, [pc, #28]	; (800327c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40022000 	.word	0x40022000

08003280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003288:	2300      	movs	r3, #0
 800328a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800328c:	2300      	movs	r3, #0
 800328e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003298:	2b00      	cmp	r3, #0
 800329a:	d03f      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a4:	d01c      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d802      	bhi.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00e      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032b0:	e01f      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80032b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032b6:	d003      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032bc:	d01c      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80032be:	e018      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032c0:	4b85      	ldr	r3, [pc, #532]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a84      	ldr	r2, [pc, #528]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032cc:	e015      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3304      	adds	r3, #4
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fab9 	bl	800384c <RCCEx_PLLSAI1_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032de:	e00c      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3320      	adds	r3, #32
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fba0 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032f0:	e003      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	74fb      	strb	r3, [r7, #19]
      break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003300:	4b75      	ldr	r3, [pc, #468]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330e:	4972      	ldr	r1, [pc, #456]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7cfb      	ldrb	r3, [r7, #19]
 800331a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03f      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800332c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003330:	d01c      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003332:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003336:	d802      	bhi.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800333c:	e01f      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800333e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003342:	d003      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003348:	d01c      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800334a:	e018      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800334c:	4b62      	ldr	r3, [pc, #392]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003356:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003358:	e015      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3304      	adds	r3, #4
 800335e:	2100      	movs	r1, #0
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fa73 	bl	800384c <RCCEx_PLLSAI1_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800336a:	e00c      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3320      	adds	r3, #32
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb5a 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800337c:	e003      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	74fb      	strb	r3, [r7, #19]
      break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003392:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800339a:	494f      	ldr	r1, [pc, #316]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033a2:	e001      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	7cfb      	ldrb	r3, [r7, #19]
 80033a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80a0 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b6:	2300      	movs	r3, #0
 80033b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ba:	4b47      	ldr	r3, [pc, #284]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00d      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	4b41      	ldr	r3, [pc, #260]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	4a40      	ldr	r2, [pc, #256]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033da:	6593      	str	r3, [r2, #88]	; 0x58
 80033dc:	4b3e      	ldr	r3, [pc, #248]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e8:	2301      	movs	r3, #1
 80033ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ec:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a3a      	ldr	r2, [pc, #232]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f8:	f7fd fb5e 	bl	8000ab8 <HAL_GetTick>
 80033fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fe:	e009      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fd fb5a 	bl	8000ab8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d902      	bls.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	74fb      	strb	r3, [r7, #19]
        break;
 8003412:	e005      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003414:	4b31      	ldr	r3, [pc, #196]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ef      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003420:	7cfb      	ldrb	r3, [r7, #19]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d15c      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003426:	4b2c      	ldr	r3, [pc, #176]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01f      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	429a      	cmp	r2, r3
 8003442:	d019      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003444:	4b24      	ldr	r3, [pc, #144]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003450:	4b21      	ldr	r3, [pc, #132]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	4a20      	ldr	r2, [pc, #128]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003460:	4b1d      	ldr	r3, [pc, #116]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fd fb19 	bl	8000ab8 <HAL_GetTick>
 8003486:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003488:	e00b      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fd fb15 	bl	8000ab8 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	; 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d902      	bls.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	74fb      	strb	r3, [r7, #19]
            break;
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0ec      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c6:	4904      	ldr	r1, [pc, #16]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034ce:	e009      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80034d6:	bf00      	nop
 80034d8:	40021000 	.word	0x40021000
 80034dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e4:	7c7b      	ldrb	r3, [r7, #17]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ea:	4b9e      	ldr	r3, [pc, #632]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	4a9d      	ldr	r2, [pc, #628]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80034f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003502:	4b98      	ldr	r3, [pc, #608]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f023 0203 	bic.w	r2, r3, #3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	4994      	ldr	r1, [pc, #592]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003524:	4b8f      	ldr	r3, [pc, #572]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 020c 	bic.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	498c      	ldr	r1, [pc, #560]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003546:	4b87      	ldr	r3, [pc, #540]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4983      	ldr	r1, [pc, #524]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003568:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800356a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	497b      	ldr	r1, [pc, #492]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800358a:	4b76      	ldr	r3, [pc, #472]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800358c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003598:	4972      	ldr	r1, [pc, #456]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035ac:	4b6d      	ldr	r3, [pc, #436]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	496a      	ldr	r1, [pc, #424]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035ce:	4b65      	ldr	r3, [pc, #404]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	4961      	ldr	r1, [pc, #388]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035f0:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fe:	4959      	ldr	r1, [pc, #356]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003612:	4b54      	ldr	r3, [pc, #336]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	4950      	ldr	r1, [pc, #320]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003634:	4b4b      	ldr	r3, [pc, #300]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	4948      	ldr	r1, [pc, #288]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	493f      	ldr	r1, [pc, #252]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d028      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003678:	4b3a      	ldr	r3, [pc, #232]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	4937      	ldr	r1, [pc, #220]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d106      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a31      	ldr	r2, [pc, #196]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800369e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e011      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ae:	d10c      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3304      	adds	r3, #4
 80036b4:	2101      	movs	r1, #1
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f8c8 	bl	800384c <RCCEx_PLLSAI1_Config>
 80036bc:	4603      	mov	r3, r0
 80036be:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036c0:	7cfb      	ldrb	r3, [r7, #19]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d028      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	491f      	ldr	r1, [pc, #124]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036f4:	d106      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80036fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003700:	60d3      	str	r3, [r2, #12]
 8003702:	e011      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800370c:	d10c      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2101      	movs	r1, #1
 8003714:	4618      	mov	r0, r3
 8003716:	f000 f899 	bl	800384c <RCCEx_PLLSAI1_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003742:	4908      	ldr	r1, [pc, #32]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003752:	d109      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a02      	ldr	r2, [pc, #8]	; (8003764 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800375a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800375e:	60d3      	str	r3, [r2, #12]
 8003760:	e014      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800376c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003770:	d10c      	bne.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3304      	adds	r3, #4
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f867 	bl	800384c <RCCEx_PLLSAI1_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8003788:	7cfb      	ldrb	r3, [r7, #19]
 800378a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d02f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037a6:	4928      	ldr	r1, [pc, #160]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037b6:	d10d      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f844 	bl	800384c <RCCEx_PLLSAI1_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d014      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80037ce:	7cfb      	ldrb	r3, [r7, #19]
 80037d0:	74bb      	strb	r3, [r7, #18]
 80037d2:	e011      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	3320      	adds	r3, #32
 80037e2:	2102      	movs	r1, #2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 f921 	bl	8003a2c <RCCEx_PLLSAI2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ee:	7cfb      	ldrb	r3, [r7, #19]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003812:	490d      	ldr	r1, [pc, #52]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003836:	4904      	ldr	r1, [pc, #16]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800383e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d018      	beq.n	8003898 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003866:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d10d      	bne.n	8003892 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
       ||
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800387e:	4b6a      	ldr	r3, [pc, #424]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	1c5a      	adds	r2, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
       ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d044      	beq.n	800391c <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e041      	b.n	800391c <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d00c      	beq.n	80038ba <RCCEx_PLLSAI1_Config+0x6e>
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d013      	beq.n	80038cc <RCCEx_PLLSAI1_Config+0x80>
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d120      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a8:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d11d      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e01a      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ba:	4b5b      	ldr	r3, [pc, #364]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d116      	bne.n	80038f4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ca:	e013      	b.n	80038f4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038cc:	4b56      	ldr	r3, [pc, #344]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10f      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d109      	bne.n	80038f8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e8:	e006      	b.n	80038f8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
      break;
 80038ee:	e004      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038f0:	bf00      	nop
 80038f2:	e002      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038f4:	bf00      	nop
 80038f6:	e000      	b.n	80038fa <RCCEx_PLLSAI1_Config+0xae>
      break;
 80038f8:	bf00      	nop
    }

    if(status == HAL_OK)
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10d      	bne.n	800391c <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003900:	4b49      	ldr	r3, [pc, #292]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	3b01      	subs	r3, #1
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	430b      	orrs	r3, r1
 8003916:	4944      	ldr	r1, [pc, #272]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d17d      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003922:	4b41      	ldr	r3, [pc, #260]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a40      	ldr	r2, [pc, #256]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800392c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392e:	f7fd f8c3 	bl	8000ab8 <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003934:	e009      	b.n	800394a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003936:	f7fd f8bf 	bl	8000ab8 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d902      	bls.n	800394a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	73fb      	strb	r3, [r7, #15]
        break;
 8003948:	e005      	b.n	8003956 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ef      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d160      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d111      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	0211      	lsls	r1, r2, #8
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68d2      	ldr	r2, [r2, #12]
 8003978:	0912      	lsrs	r2, r2, #4
 800397a:	0452      	lsls	r2, r2, #17
 800397c:	430a      	orrs	r2, r1
 800397e:	492a      	ldr	r1, [pc, #168]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003980:	4313      	orrs	r3, r2
 8003982:	610b      	str	r3, [r1, #16]
 8003984:	e027      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d112      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800398c:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003994:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	0211      	lsls	r1, r2, #8
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6912      	ldr	r2, [r2, #16]
 80039a2:	0852      	lsrs	r2, r2, #1
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0552      	lsls	r2, r2, #21
 80039a8:	430a      	orrs	r2, r1
 80039aa:	491f      	ldr	r1, [pc, #124]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	610b      	str	r3, [r1, #16]
 80039b0:	e011      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6892      	ldr	r2, [r2, #8]
 80039c2:	0211      	lsls	r1, r2, #8
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6952      	ldr	r2, [r2, #20]
 80039c8:	0852      	lsrs	r2, r2, #1
 80039ca:	3a01      	subs	r2, #1
 80039cc:	0652      	lsls	r2, r2, #25
 80039ce:	430a      	orrs	r2, r1
 80039d0:	4915      	ldr	r1, [pc, #84]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039d6:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fd f869 	bl	8000ab8 <HAL_GetTick>
 80039e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e8:	e009      	b.n	80039fe <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039ea:	f7fd f865 	bl	8000ab8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d902      	bls.n	80039fe <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	73fb      	strb	r3, [r7, #15]
          break;
 80039fc:	e005      	b.n	8003a0a <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039fe:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d0ef      	beq.n	80039ea <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	4903      	ldr	r1, [pc, #12]	; (8003a28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a3a:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d018      	beq.n	8003a78 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0203 	and.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d10d      	bne.n	8003a72 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
       ||
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a5e:	4b5f      	ldr	r3, [pc, #380]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d044      	beq.n	8003afc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e041      	b.n	8003afc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d00c      	beq.n	8003a9a <RCCEx_PLLSAI2_Config+0x6e>
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d013      	beq.n	8003aac <RCCEx_PLLSAI2_Config+0x80>
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d120      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a88:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a98:	e01a      	b.n	8003ad0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a9a:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aaa:	e013      	b.n	8003ad4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10f      	bne.n	8003ad8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ab8:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ac8:	e006      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
      break;
 8003ace:	e004      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e002      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ad4:	bf00      	nop
 8003ad6:	e000      	b.n	8003ada <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003ad8:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6819      	ldr	r1, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	430b      	orrs	r3, r1
 8003af6:	4939      	ldr	r1, [pc, #228]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d167      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0e:	f7fc ffd3 	bl	8000ab8 <HAL_GetTick>
 8003b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b14:	e009      	b.n	8003b2a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b16:	f7fc ffcf 	bl	8000ab8 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d902      	bls.n	8003b2a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	73fb      	strb	r3, [r7, #15]
        break;
 8003b28:	e005      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1ef      	bne.n	8003b16 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d14a      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d111      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b42:	4b26      	ldr	r3, [pc, #152]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	0211      	lsls	r1, r2, #8
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	68d2      	ldr	r2, [r2, #12]
 8003b58:	0912      	lsrs	r2, r2, #4
 8003b5a:	0452      	lsls	r2, r2, #17
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	491f      	ldr	r1, [pc, #124]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	614b      	str	r3, [r1, #20]
 8003b64:	e011      	b.n	8003b8a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6892      	ldr	r2, [r2, #8]
 8003b76:	0211      	lsls	r1, r2, #8
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6912      	ldr	r2, [r2, #16]
 8003b7c:	0852      	lsrs	r2, r2, #1
 8003b7e:	3a01      	subs	r2, #1
 8003b80:	0652      	lsls	r2, r2, #25
 8003b82:	430a      	orrs	r2, r1
 8003b84:	4915      	ldr	r1, [pc, #84]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b8a:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b96:	f7fc ff8f 	bl	8000ab8 <HAL_GetTick>
 8003b9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9c:	e009      	b.n	8003bb2 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b9e:	f7fc ff8b 	bl	8000ab8 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d902      	bls.n	8003bb2 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	73fb      	strb	r3, [r7, #15]
          break;
 8003bb0:	e005      	b.n	8003bbe <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ef      	beq.n	8003b9e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d106      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bc6:	695a      	ldr	r2, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <RCCEx_PLLSAI2_Config+0x1b0>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40021000 	.word	0x40021000

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e049      	b.n	8003c86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f003 f966 	bl	8006ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4610      	mov	r0, r2
 8003c20:	f000 faa6 	bl	8004170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04f      	b.n	8003d48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	; (8003d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	; (8003d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d115      	bne.n	8003d32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b17      	ldr	r3, [pc, #92]	; (8003d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d015      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1e:	d011      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	e008      	b.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	00010007 	.word	0x00010007

08003d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d122      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d11b      	bne.n	8003dcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0202 	mvn.w	r2, #2
 8003d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f9be 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003db8:	e005      	b.n	8003dc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f9b0 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f9c1 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	f003 0304 	and.w	r3, r3, #4
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d122      	bne.n	8003e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11b      	bne.n	8003e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0204 	mvn.w	r2, #4
 8003df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f994 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003e0c:	e005      	b.n	8003e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f986 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f997 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b08      	cmp	r3, #8
 8003e2c:	d122      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d11b      	bne.n	8003e74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0208 	mvn.w	r2, #8
 8003e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2204      	movs	r2, #4
 8003e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f96a 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f95c 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f96d 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d122      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b10      	cmp	r3, #16
 8003e8e:	d11b      	bne.n	8003ec8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0210 	mvn.w	r2, #16
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f940 	bl	8004134 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f932 	bl	8004120 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f943 	bl	8004148 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d10e      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f06f 0201 	mvn.w	r2, #1
 8003eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f002 fe94 	bl	8006c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b80      	cmp	r3, #128	; 0x80
 8003f00:	d10e      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d107      	bne.n	8003f20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 faee 	bl	80044fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2e:	d10e      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	d107      	bne.n	8003f4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fae1 	bl	8004510 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d10e      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d107      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 f8f1 	bl	800415c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d10e      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0220 	mvn.w	r2, #32
 8003f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 faa1 	bl	80044e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_ConfigClockSource+0x18>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e0a8      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x16a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fe8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ff0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b40      	cmp	r3, #64	; 0x40
 8004000:	d067      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x124>
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d80b      	bhi.n	800401e <HAL_TIM_ConfigClockSource+0x70>
 8004006:	2b10      	cmp	r3, #16
 8004008:	d073      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x144>
 800400a:	2b10      	cmp	r3, #16
 800400c:	d802      	bhi.n	8004014 <HAL_TIM_ConfigClockSource+0x66>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d06f      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004012:	e078      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004014:	2b20      	cmp	r3, #32
 8004016:	d06c      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x144>
 8004018:	2b30      	cmp	r3, #48	; 0x30
 800401a:	d06a      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800401c:	e073      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800401e:	2b70      	cmp	r3, #112	; 0x70
 8004020:	d00d      	beq.n	800403e <HAL_TIM_ConfigClockSource+0x90>
 8004022:	2b70      	cmp	r3, #112	; 0x70
 8004024:	d804      	bhi.n	8004030 <HAL_TIM_ConfigClockSource+0x82>
 8004026:	2b50      	cmp	r3, #80	; 0x50
 8004028:	d033      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0xe4>
 800402a:	2b60      	cmp	r3, #96	; 0x60
 800402c:	d041      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800402e:	e06a      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004034:	d066      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0x156>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403a:	d017      	beq.n	800406c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800403c:	e063      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f000 f9a3 	bl	8004398 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004060:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	609a      	str	r2, [r3, #8]
      break;
 800406a:	e04c      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6899      	ldr	r1, [r3, #8]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f000 f98c 	bl	8004398 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800408e:	609a      	str	r2, [r3, #8]
      break;
 8004090:	e039      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6859      	ldr	r1, [r3, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	461a      	mov	r2, r3
 80040a0:	f000 f900 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2150      	movs	r1, #80	; 0x50
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f959 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040b0:	e029      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 f91f 	bl	8004302 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2160      	movs	r1, #96	; 0x60
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f949 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040d0:	e019      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	461a      	mov	r2, r3
 80040e0:	f000 f8e0 	bl	80042a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 f939 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 80040f0:	e009      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f000 f930 	bl	8004362 <TIM_ITRx_SetConfig>
        break;
 8004102:	e000      	b.n	8004106 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004104:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a40      	ldr	r2, [pc, #256]	; (8004284 <TIM_Base_SetConfig+0x114>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d013      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d00f      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3d      	ldr	r2, [pc, #244]	; (8004288 <TIM_Base_SetConfig+0x118>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a3c      	ldr	r2, [pc, #240]	; (800428c <TIM_Base_SetConfig+0x11c>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a3b      	ldr	r2, [pc, #236]	; (8004290 <TIM_Base_SetConfig+0x120>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a3a      	ldr	r2, [pc, #232]	; (8004294 <TIM_Base_SetConfig+0x124>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d108      	bne.n	80041c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a2f      	ldr	r2, [pc, #188]	; (8004284 <TIM_Base_SetConfig+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01f      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d01b      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <TIM_Base_SetConfig+0x118>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d017      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <TIM_Base_SetConfig+0x11c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <TIM_Base_SetConfig+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a29      	ldr	r2, [pc, #164]	; (8004294 <TIM_Base_SetConfig+0x124>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a28      	ldr	r2, [pc, #160]	; (8004298 <TIM_Base_SetConfig+0x128>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a27      	ldr	r2, [pc, #156]	; (800429c <TIM_Base_SetConfig+0x12c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x9a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <TIM_Base_SetConfig+0x130>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <TIM_Base_SetConfig+0x114>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00f      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a12      	ldr	r2, [pc, #72]	; (8004294 <TIM_Base_SetConfig+0x124>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a11      	ldr	r2, [pc, #68]	; (8004298 <TIM_Base_SetConfig+0x128>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <TIM_Base_SetConfig+0x12c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0xf8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <TIM_Base_SetConfig+0x130>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d103      	bne.n	8004270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	615a      	str	r2, [r3, #20]
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	40012c00 	.word	0x40012c00
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40013400 	.word	0x40013400
 8004298:	40014000 	.word	0x40014000
 800429c:	40014400 	.word	0x40014400
 80042a0:	40014800 	.word	0x40014800

080042a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0201 	bic.w	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 030a 	bic.w	r3, r3, #10
 80042e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	621a      	str	r2, [r3, #32]
}
 80042f6:	bf00      	nop
 80042f8:	371c      	adds	r7, #28
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0210 	bic.w	r2, r3, #16
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800433e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	f043 0307 	orr.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	021a      	lsls	r2, r3, #8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4313      	orrs	r3, r2
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e068      	b.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2e      	ldr	r2, [pc, #184]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d004      	beq.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2d      	ldr	r2, [pc, #180]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d108      	bne.n	8004436 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800442a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d01d      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004462:	d018      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d013      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d00e      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d009      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d004      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40013400 	.word	0x40013400
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800
 80044e0:	40000c00 	.word	0x40000c00
 80044e4:	40014000 	.word	0x40014000

080044e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e040      	b.n	80045b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fcea 	bl	8006f20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2224      	movs	r2, #36	; 0x24
 8004550:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8c0 	bl	80046e8 <UART_SetConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e022      	b.n	80045b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fb3e 	bl	8004bfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800458e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fbc5 	bl	8004d40 <UART_CheckIdleState>
 80045b6:	4603      	mov	r3, r0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	603b      	str	r3, [r7, #0]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	f040 8081 	bne.w	80046dc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <HAL_UART_Transmit+0x26>
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e079      	b.n	80046de <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Transmit+0x38>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e072      	b.n	80046de <HAL_UART_Transmit+0x11e>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2221      	movs	r2, #33	; 0x21
 800460a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800460c:	f7fc fa54 	bl	8000ab8 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d108      	bne.n	800463e <HAL_UART_Transmit+0x7e>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e003      	b.n	8004646 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800464e:	e02d      	b.n	80046ac <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fbb5 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e039      	b.n	80046de <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	881a      	ldrh	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	b292      	uxth	r2, r2
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	3302      	adds	r3, #2
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	e008      	b.n	800469a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	781a      	ldrb	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b292      	uxth	r2, r2
 8004692:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3301      	adds	r3, #1
 8004698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1cb      	bne.n	8004650 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	2200      	movs	r2, #0
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fb81 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e005      	b.n	80046de <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
  }
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	4313      	orrs	r3, r2
 800470c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4bac      	ldr	r3, [pc, #688]	; (80049c8 <UART_SetConfig+0x2e0>)
 8004716:	4013      	ands	r3, r2
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	69f9      	ldr	r1, [r7, #28]
 800471e:	430b      	orrs	r3, r1
 8004720:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4aa2      	ldr	r2, [pc, #648]	; (80049cc <UART_SetConfig+0x2e4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d004      	beq.n	8004752 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	4313      	orrs	r3, r2
 8004750:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	430a      	orrs	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a99      	ldr	r2, [pc, #612]	; (80049d0 <UART_SetConfig+0x2e8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d121      	bne.n	80047b4 <UART_SetConfig+0xcc>
 8004770:	4b98      	ldr	r3, [pc, #608]	; (80049d4 <UART_SetConfig+0x2ec>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	2b03      	cmp	r3, #3
 800477c:	d816      	bhi.n	80047ac <UART_SetConfig+0xc4>
 800477e:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0x9c>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	08004795 	.word	0x08004795
 8004788:	080047a1 	.word	0x080047a1
 800478c:	0800479b 	.word	0x0800479b
 8004790:	080047a7 	.word	0x080047a7
 8004794:	2301      	movs	r3, #1
 8004796:	76fb      	strb	r3, [r7, #27]
 8004798:	e0e8      	b.n	800496c <UART_SetConfig+0x284>
 800479a:	2302      	movs	r3, #2
 800479c:	76fb      	strb	r3, [r7, #27]
 800479e:	e0e5      	b.n	800496c <UART_SetConfig+0x284>
 80047a0:	2304      	movs	r3, #4
 80047a2:	76fb      	strb	r3, [r7, #27]
 80047a4:	e0e2      	b.n	800496c <UART_SetConfig+0x284>
 80047a6:	2308      	movs	r3, #8
 80047a8:	76fb      	strb	r3, [r7, #27]
 80047aa:	e0df      	b.n	800496c <UART_SetConfig+0x284>
 80047ac:	2310      	movs	r3, #16
 80047ae:	76fb      	strb	r3, [r7, #27]
 80047b0:	bf00      	nop
 80047b2:	e0db      	b.n	800496c <UART_SetConfig+0x284>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a87      	ldr	r2, [pc, #540]	; (80049d8 <UART_SetConfig+0x2f0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d134      	bne.n	8004828 <UART_SetConfig+0x140>
 80047be:	4b85      	ldr	r3, [pc, #532]	; (80049d4 <UART_SetConfig+0x2ec>)
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	2b0c      	cmp	r3, #12
 80047ca:	d829      	bhi.n	8004820 <UART_SetConfig+0x138>
 80047cc:	a201      	add	r2, pc, #4	; (adr r2, 80047d4 <UART_SetConfig+0xec>)
 80047ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d2:	bf00      	nop
 80047d4:	08004809 	.word	0x08004809
 80047d8:	08004821 	.word	0x08004821
 80047dc:	08004821 	.word	0x08004821
 80047e0:	08004821 	.word	0x08004821
 80047e4:	08004815 	.word	0x08004815
 80047e8:	08004821 	.word	0x08004821
 80047ec:	08004821 	.word	0x08004821
 80047f0:	08004821 	.word	0x08004821
 80047f4:	0800480f 	.word	0x0800480f
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004821 	.word	0x08004821
 8004804:	0800481b 	.word	0x0800481b
 8004808:	2300      	movs	r3, #0
 800480a:	76fb      	strb	r3, [r7, #27]
 800480c:	e0ae      	b.n	800496c <UART_SetConfig+0x284>
 800480e:	2302      	movs	r3, #2
 8004810:	76fb      	strb	r3, [r7, #27]
 8004812:	e0ab      	b.n	800496c <UART_SetConfig+0x284>
 8004814:	2304      	movs	r3, #4
 8004816:	76fb      	strb	r3, [r7, #27]
 8004818:	e0a8      	b.n	800496c <UART_SetConfig+0x284>
 800481a:	2308      	movs	r3, #8
 800481c:	76fb      	strb	r3, [r7, #27]
 800481e:	e0a5      	b.n	800496c <UART_SetConfig+0x284>
 8004820:	2310      	movs	r3, #16
 8004822:	76fb      	strb	r3, [r7, #27]
 8004824:	bf00      	nop
 8004826:	e0a1      	b.n	800496c <UART_SetConfig+0x284>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <UART_SetConfig+0x2f4>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d120      	bne.n	8004874 <UART_SetConfig+0x18c>
 8004832:	4b68      	ldr	r3, [pc, #416]	; (80049d4 <UART_SetConfig+0x2ec>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800483c:	2b10      	cmp	r3, #16
 800483e:	d00f      	beq.n	8004860 <UART_SetConfig+0x178>
 8004840:	2b10      	cmp	r3, #16
 8004842:	d802      	bhi.n	800484a <UART_SetConfig+0x162>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0x16c>
 8004848:	e010      	b.n	800486c <UART_SetConfig+0x184>
 800484a:	2b20      	cmp	r3, #32
 800484c:	d005      	beq.n	800485a <UART_SetConfig+0x172>
 800484e:	2b30      	cmp	r3, #48	; 0x30
 8004850:	d009      	beq.n	8004866 <UART_SetConfig+0x17e>
 8004852:	e00b      	b.n	800486c <UART_SetConfig+0x184>
 8004854:	2300      	movs	r3, #0
 8004856:	76fb      	strb	r3, [r7, #27]
 8004858:	e088      	b.n	800496c <UART_SetConfig+0x284>
 800485a:	2302      	movs	r3, #2
 800485c:	76fb      	strb	r3, [r7, #27]
 800485e:	e085      	b.n	800496c <UART_SetConfig+0x284>
 8004860:	2304      	movs	r3, #4
 8004862:	76fb      	strb	r3, [r7, #27]
 8004864:	e082      	b.n	800496c <UART_SetConfig+0x284>
 8004866:	2308      	movs	r3, #8
 8004868:	76fb      	strb	r3, [r7, #27]
 800486a:	e07f      	b.n	800496c <UART_SetConfig+0x284>
 800486c:	2310      	movs	r3, #16
 800486e:	76fb      	strb	r3, [r7, #27]
 8004870:	bf00      	nop
 8004872:	e07b      	b.n	800496c <UART_SetConfig+0x284>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a59      	ldr	r2, [pc, #356]	; (80049e0 <UART_SetConfig+0x2f8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d120      	bne.n	80048c0 <UART_SetConfig+0x1d8>
 800487e:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <UART_SetConfig+0x2ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d00f      	beq.n	80048ac <UART_SetConfig+0x1c4>
 800488c:	2b40      	cmp	r3, #64	; 0x40
 800488e:	d802      	bhi.n	8004896 <UART_SetConfig+0x1ae>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <UART_SetConfig+0x1b8>
 8004894:	e010      	b.n	80048b8 <UART_SetConfig+0x1d0>
 8004896:	2b80      	cmp	r3, #128	; 0x80
 8004898:	d005      	beq.n	80048a6 <UART_SetConfig+0x1be>
 800489a:	2bc0      	cmp	r3, #192	; 0xc0
 800489c:	d009      	beq.n	80048b2 <UART_SetConfig+0x1ca>
 800489e:	e00b      	b.n	80048b8 <UART_SetConfig+0x1d0>
 80048a0:	2300      	movs	r3, #0
 80048a2:	76fb      	strb	r3, [r7, #27]
 80048a4:	e062      	b.n	800496c <UART_SetConfig+0x284>
 80048a6:	2302      	movs	r3, #2
 80048a8:	76fb      	strb	r3, [r7, #27]
 80048aa:	e05f      	b.n	800496c <UART_SetConfig+0x284>
 80048ac:	2304      	movs	r3, #4
 80048ae:	76fb      	strb	r3, [r7, #27]
 80048b0:	e05c      	b.n	800496c <UART_SetConfig+0x284>
 80048b2:	2308      	movs	r3, #8
 80048b4:	76fb      	strb	r3, [r7, #27]
 80048b6:	e059      	b.n	800496c <UART_SetConfig+0x284>
 80048b8:	2310      	movs	r3, #16
 80048ba:	76fb      	strb	r3, [r7, #27]
 80048bc:	bf00      	nop
 80048be:	e055      	b.n	800496c <UART_SetConfig+0x284>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a47      	ldr	r2, [pc, #284]	; (80049e4 <UART_SetConfig+0x2fc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d124      	bne.n	8004914 <UART_SetConfig+0x22c>
 80048ca:	4b42      	ldr	r3, [pc, #264]	; (80049d4 <UART_SetConfig+0x2ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d8:	d012      	beq.n	8004900 <UART_SetConfig+0x218>
 80048da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048de:	d802      	bhi.n	80048e6 <UART_SetConfig+0x1fe>
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <UART_SetConfig+0x20c>
 80048e4:	e012      	b.n	800490c <UART_SetConfig+0x224>
 80048e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ea:	d006      	beq.n	80048fa <UART_SetConfig+0x212>
 80048ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048f0:	d009      	beq.n	8004906 <UART_SetConfig+0x21e>
 80048f2:	e00b      	b.n	800490c <UART_SetConfig+0x224>
 80048f4:	2300      	movs	r3, #0
 80048f6:	76fb      	strb	r3, [r7, #27]
 80048f8:	e038      	b.n	800496c <UART_SetConfig+0x284>
 80048fa:	2302      	movs	r3, #2
 80048fc:	76fb      	strb	r3, [r7, #27]
 80048fe:	e035      	b.n	800496c <UART_SetConfig+0x284>
 8004900:	2304      	movs	r3, #4
 8004902:	76fb      	strb	r3, [r7, #27]
 8004904:	e032      	b.n	800496c <UART_SetConfig+0x284>
 8004906:	2308      	movs	r3, #8
 8004908:	76fb      	strb	r3, [r7, #27]
 800490a:	e02f      	b.n	800496c <UART_SetConfig+0x284>
 800490c:	2310      	movs	r3, #16
 800490e:	76fb      	strb	r3, [r7, #27]
 8004910:	bf00      	nop
 8004912:	e02b      	b.n	800496c <UART_SetConfig+0x284>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <UART_SetConfig+0x2e4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d124      	bne.n	8004968 <UART_SetConfig+0x280>
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <UART_SetConfig+0x2ec>)
 8004920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800492c:	d012      	beq.n	8004954 <UART_SetConfig+0x26c>
 800492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004932:	d802      	bhi.n	800493a <UART_SetConfig+0x252>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <UART_SetConfig+0x260>
 8004938:	e012      	b.n	8004960 <UART_SetConfig+0x278>
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d006      	beq.n	800494e <UART_SetConfig+0x266>
 8004940:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004944:	d009      	beq.n	800495a <UART_SetConfig+0x272>
 8004946:	e00b      	b.n	8004960 <UART_SetConfig+0x278>
 8004948:	2300      	movs	r3, #0
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e00e      	b.n	800496c <UART_SetConfig+0x284>
 800494e:	2302      	movs	r3, #2
 8004950:	76fb      	strb	r3, [r7, #27]
 8004952:	e00b      	b.n	800496c <UART_SetConfig+0x284>
 8004954:	2304      	movs	r3, #4
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e008      	b.n	800496c <UART_SetConfig+0x284>
 800495a:	2308      	movs	r3, #8
 800495c:	76fb      	strb	r3, [r7, #27]
 800495e:	e005      	b.n	800496c <UART_SetConfig+0x284>
 8004960:	2310      	movs	r3, #16
 8004962:	76fb      	strb	r3, [r7, #27]
 8004964:	bf00      	nop
 8004966:	e001      	b.n	800496c <UART_SetConfig+0x284>
 8004968:	2310      	movs	r3, #16
 800496a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <UART_SetConfig+0x2e4>)
 8004972:	4293      	cmp	r3, r2
 8004974:	f040 8087 	bne.w	8004a86 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004978:	7efb      	ldrb	r3, [r7, #27]
 800497a:	2b08      	cmp	r3, #8
 800497c:	d836      	bhi.n	80049ec <UART_SetConfig+0x304>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x29c>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049ed 	.word	0x080049ed
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049ed 	.word	0x080049ed
 8004994:	080049b7 	.word	0x080049b7
 8004998:	080049ed 	.word	0x080049ed
 800499c:	080049ed 	.word	0x080049ed
 80049a0:	080049ed 	.word	0x080049ed
 80049a4:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fbac 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 80049ac:	6178      	str	r0, [r7, #20]
        break;
 80049ae:	e022      	b.n	80049f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <UART_SetConfig+0x300>)
 80049b2:	617b      	str	r3, [r7, #20]
        break;
 80049b4:	e01f      	b.n	80049f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fb0f 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 80049ba:	6178      	str	r0, [r7, #20]
        break;
 80049bc:	e01b      	b.n	80049f6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	617b      	str	r3, [r7, #20]
        break;
 80049c4:	e017      	b.n	80049f6 <UART_SetConfig+0x30e>
 80049c6:	bf00      	nop
 80049c8:	efff69f3 	.word	0xefff69f3
 80049cc:	40008000 	.word	0x40008000
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40004400 	.word	0x40004400
 80049dc:	40004800 	.word	0x40004800
 80049e0:	40004c00 	.word	0x40004c00
 80049e4:	40005000 	.word	0x40005000
 80049e8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	76bb      	strb	r3, [r7, #26]
        break;
 80049f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80f1 	beq.w	8004be0 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d305      	bcc.n	8004a1a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d902      	bls.n	8004a20 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	76bb      	strb	r3, [r7, #26]
 8004a1e:	e0df      	b.n	8004be0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	4619      	mov	r1, r3
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	f04f 0400 	mov.w	r4, #0
 8004a30:	0214      	lsls	r4, r2, #8
 8004a32:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004a36:	020b      	lsls	r3, r1, #8
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	6852      	ldr	r2, [r2, #4]
 8004a3c:	0852      	lsrs	r2, r2, #1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	eb13 0b01 	adds.w	fp, r3, r1
 8004a48:	eb44 0c02 	adc.w	ip, r4, r2
 8004a4c:	4658      	mov	r0, fp
 8004a4e:	4661      	mov	r1, ip
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	f7fb fbc0 	bl	80001e0 <__aeabi_uldivmod>
 8004a60:	4603      	mov	r3, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6c:	d308      	bcc.n	8004a80 <UART_SetConfig+0x398>
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a74:	d204      	bcs.n	8004a80 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	e0af      	b.n	8004be0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	76bb      	strb	r3, [r7, #26]
 8004a84:	e0ac      	b.n	8004be0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a8e:	d15b      	bne.n	8004b48 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8004a90:	7efb      	ldrb	r3, [r7, #27]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d827      	bhi.n	8004ae6 <UART_SetConfig+0x3fe>
 8004a96:	a201      	add	r2, pc, #4	; (adr r2, 8004a9c <UART_SetConfig+0x3b4>)
 8004a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ad1 	.word	0x08004ad1
 8004aa8:	08004ae7 	.word	0x08004ae7
 8004aac:	08004ad7 	.word	0x08004ad7
 8004ab0:	08004ae7 	.word	0x08004ae7
 8004ab4:	08004ae7 	.word	0x08004ae7
 8004ab8:	08004ae7 	.word	0x08004ae7
 8004abc:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ac0:	f7fe fb20 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004ac4:	6178      	str	r0, [r7, #20]
        break;
 8004ac6:	e013      	b.n	8004af0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe fb32 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8004acc:	6178      	str	r0, [r7, #20]
        break;
 8004ace:	e00f      	b.n	8004af0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <UART_SetConfig+0x510>)
 8004ad2:	617b      	str	r3, [r7, #20]
        break;
 8004ad4:	e00c      	b.n	8004af0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe fa7f 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8004ada:	6178      	str	r0, [r7, #20]
        break;
 8004adc:	e008      	b.n	8004af0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	617b      	str	r3, [r7, #20]
        break;
 8004ae4:	e004      	b.n	8004af0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	76bb      	strb	r3, [r7, #26]
        break;
 8004aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d074      	beq.n	8004be0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	005a      	lsls	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	441a      	add	r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b0f      	cmp	r3, #15
 8004b12:	d916      	bls.n	8004b42 <UART_SetConfig+0x45a>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1a:	d212      	bcs.n	8004b42 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	f023 030f 	bic.w	r3, r3, #15
 8004b24:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	89fa      	ldrh	r2, [r7, #14]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e04e      	b.n	8004be0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	76bb      	strb	r3, [r7, #26]
 8004b46:	e04b      	b.n	8004be0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b48:	7efb      	ldrb	r3, [r7, #27]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d827      	bhi.n	8004b9e <UART_SetConfig+0x4b6>
 8004b4e:	a201      	add	r2, pc, #4	; (adr r2, 8004b54 <UART_SetConfig+0x46c>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7fe fac4 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8004b7c:	6178      	str	r0, [r7, #20]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7fe fad6 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8004b84:	6178      	str	r0, [r7, #20]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <UART_SetConfig+0x510>)
 8004b8a:	617b      	str	r3, [r7, #20]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7fe fa23 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8004b92:	6178      	str	r0, [r7, #20]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b9a:	617b      	str	r3, [r7, #20]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	76bb      	strb	r3, [r7, #26]
        break;
 8004ba6:	bf00      	nop
    }

    if (pclk != 0U)
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	085a      	lsrs	r2, r3, #1
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d908      	bls.n	8004bdc <UART_SetConfig+0x4f4>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd0:	d204      	bcs.n	8004bdc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	60da      	str	r2, [r3, #12]
 8004bda:	e001      	b.n	8004be0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004bec:	7ebb      	ldrb	r3, [r7, #26]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3720      	adds	r7, #32
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004bf8:	00f42400 	.word	0x00f42400

08004bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cfa:	d10a      	bne.n	8004d12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af02      	add	r7, sp, #8
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d4e:	f7fb feb3 	bl	8000ab8 <HAL_GetTick>
 8004d52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d10e      	bne.n	8004d80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f82a 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e020      	b.n	8004dc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d10e      	bne.n	8004dac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f814 	bl	8004dca <UART_WaitOnFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e00a      	b.n	8004dc2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2220      	movs	r2, #32
 8004db0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b084      	sub	sp, #16
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	60b9      	str	r1, [r7, #8]
 8004dd4:	603b      	str	r3, [r7, #0]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dda:	e05d      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d059      	beq.n	8004e98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de4:	f7fb fe68 	bl	8000ab8 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d302      	bcc.n	8004dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d11b      	bne.n	8004e32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e042      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02b      	beq.n	8004e98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d123      	bne.n	8004e98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e00f      	b.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d092      	beq.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ed2:	2b84      	cmp	r3, #132	; 0x84
 8004ed4:	d005      	beq.n	8004ee2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ed6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	3303      	adds	r3, #3
 8004ee0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ef4:	f000 fada 	bl	80054ac <vTaskStartScheduler>
  
  return osOK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}

08004efe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f00:	b089      	sub	sp, #36	; 0x24
 8004f02:	af04      	add	r7, sp, #16
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d020      	beq.n	8004f52 <osThreadCreate+0x54>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d01c      	beq.n	8004f52 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685c      	ldr	r4, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681d      	ldr	r5, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691e      	ldr	r6, [r3, #16]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ffc8 	bl	8004ec0 <makeFreeRtosPriority>
 8004f30:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f3a:	9202      	str	r2, [sp, #8]
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	9100      	str	r1, [sp, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4632      	mov	r2, r6
 8004f44:	4629      	mov	r1, r5
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 f8ed 	bl	8005126 <xTaskCreateStatic>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e01c      	b.n	8004f8c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685c      	ldr	r4, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004f5e:	b29e      	uxth	r6, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7ff ffaa 	bl	8004ec0 <makeFreeRtosPriority>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	f107 030c 	add.w	r3, r7, #12
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	9200      	str	r2, [sp, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f000 f92c 	bl	80051da <xTaskCreate>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d001      	beq.n	8004f8c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f96 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <osDelay+0x16>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	e000      	b.n	8004fae <osDelay+0x18>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fa48 	bl	8005444 <vTaskDelay>
  
  return osOK;
 8004fb4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f103 0208 	add.w	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f103 0208 	add.w	r2, r3, #8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f103 0208 	add.w	r2, r3, #8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
}
 8005054:	bf00      	nop
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d103      	bne.n	8005080 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	60fb      	str	r3, [r7, #12]
 800507e:	e00c      	b.n	800509a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3308      	adds	r3, #8
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	e002      	b.n	800508e <vListInsert+0x2e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	429a      	cmp	r2, r3
 8005098:	d2f6      	bcs.n	8005088 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	1c5a      	adds	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6892      	ldr	r2, [r2, #8]
 80050e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	6852      	ldr	r2, [r2, #4]
 80050f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d103      	bne.n	8005106 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005126:	b580      	push	{r7, lr}
 8005128:	b08e      	sub	sp, #56	; 0x38
 800512a:	af04      	add	r7, sp, #16
 800512c:	60f8      	str	r0, [r7, #12]
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	623b      	str	r3, [r7, #32]
 800514c:	e7fe      	b.n	800514c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d109      	bne.n	8005168 <xTaskCreateStatic+0x42>
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	e7fe      	b.n	8005166 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005168:	2354      	movs	r3, #84	; 0x54
 800516a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b54      	cmp	r3, #84	; 0x54
 8005170:	d009      	beq.n	8005186 <xTaskCreateStatic+0x60>
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	e7fe      	b.n	8005184 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005186:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01e      	beq.n	80051cc <xTaskCreateStatic+0xa6>
 800518e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800519c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80051a6:	2300      	movs	r3, #0
 80051a8:	9303      	str	r3, [sp, #12]
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9302      	str	r3, [sp, #8]
 80051ae:	f107 0314 	add.w	r3, r7, #20
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f850 	bl	8005264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051c6:	f000 f8d3 	bl	8005370 <prvAddNewTaskToReadyList>
 80051ca:	e001      	b.n	80051d0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80051d0:	697b      	ldr	r3, [r7, #20]
	}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3728      	adds	r7, #40	; 0x28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b08c      	sub	sp, #48	; 0x30
 80051de:	af04      	add	r7, sp, #16
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80051ea:	88fb      	ldrh	r3, [r7, #6]
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 feb0 	bl	8005f54 <pvPortMalloc>
 80051f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051fc:	2054      	movs	r0, #84	; 0x54
 80051fe:	f000 fea9 	bl	8005f54 <pvPortMalloc>
 8005202:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
 8005210:	e005      	b.n	800521e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005212:	6978      	ldr	r0, [r7, #20]
 8005214:	f000 ff60 	bl	80060d8 <vPortFree>
 8005218:	e001      	b.n	800521e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800521a:	2300      	movs	r3, #0
 800521c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d017      	beq.n	8005254 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800522c:	88fa      	ldrh	r2, [r7, #6]
 800522e:	2300      	movs	r3, #0
 8005230:	9303      	str	r3, [sp, #12]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	9302      	str	r3, [sp, #8]
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	68b9      	ldr	r1, [r7, #8]
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 f80e 	bl	8005264 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005248:	69f8      	ldr	r0, [r7, #28]
 800524a:	f000 f891 	bl	8005370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800524e:	2301      	movs	r3, #1
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	e002      	b.n	800525a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005254:	f04f 33ff 	mov.w	r3, #4294967295
 8005258:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800525a:	69bb      	ldr	r3, [r7, #24]
	}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800527c:	3b01      	subs	r3, #1
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f023 0307 	bic.w	r3, r3, #7
 800528a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <prvInitialiseNewTask+0x46>
 8005296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	617b      	str	r3, [r7, #20]
 80052a8:	e7fe      	b.n	80052a8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01f      	beq.n	80052f0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052b0:	2300      	movs	r3, #0
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e012      	b.n	80052dc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	7819      	ldrb	r1, [r3, #0]
 80052be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	3334      	adds	r3, #52	; 0x34
 80052c6:	460a      	mov	r2, r1
 80052c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	3301      	adds	r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d9e9      	bls.n	80052b6 <prvInitialiseNewTask+0x52>
 80052e2:	e000      	b.n	80052e6 <prvInitialiseNewTask+0x82>
			{
				break;
 80052e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ee:	e003      	b.n	80052f8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d901      	bls.n	8005302 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052fe:	2306      	movs	r3, #6
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2200      	movs	r2, #0
 8005312:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	3304      	adds	r3, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fe70 	bl	8004ffe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	3318      	adds	r3, #24
 8005322:	4618      	mov	r0, r3
 8005324:	f7ff fe6b 	bl	8004ffe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f1c3 0207 	rsb	r2, r3, #7
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2200      	movs	r2, #0
 8005342:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	69b8      	ldr	r0, [r7, #24]
 8005352:	f000 fbfd 	bl	8005b50 <pxPortInitialiseStack>
 8005356:	4602      	mov	r2, r0
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d002      	beq.n	8005368 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005366:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005368:	bf00      	nop
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005378:	f000 fd10 	bl	8005d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800537c:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <prvAddNewTaskToReadyList+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	4a29      	ldr	r2, [pc, #164]	; (8005428 <prvAddNewTaskToReadyList+0xb8>)
 8005384:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005386:	4b29      	ldr	r3, [pc, #164]	; (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800538e:	4a27      	ldr	r2, [pc, #156]	; (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005394:	4b24      	ldr	r3, [pc, #144]	; (8005428 <prvAddNewTaskToReadyList+0xb8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d110      	bne.n	80053be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800539c:	f000 fab8 	bl	8005910 <prvInitialiseTaskLists>
 80053a0:	e00d      	b.n	80053be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <prvAddNewTaskToReadyList+0xc0>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053aa:	4b20      	ldr	r3, [pc, #128]	; (800542c <prvAddNewTaskToReadyList+0xbc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d802      	bhi.n	80053be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80053b8:	4a1c      	ldr	r2, [pc, #112]	; (800542c <prvAddNewTaskToReadyList+0xbc>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <prvAddNewTaskToReadyList+0xc4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	4a1b      	ldr	r2, [pc, #108]	; (8005434 <prvAddNewTaskToReadyList+0xc4>)
 80053c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	4b19      	ldr	r3, [pc, #100]	; (8005438 <prvAddNewTaskToReadyList+0xc8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <prvAddNewTaskToReadyList+0xc8>)
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <prvAddNewTaskToReadyList+0xcc>)
 80053e8:	441a      	add	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7ff fe11 	bl	8005018 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80053f6:	f000 fcff 	bl	8005df8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <prvAddNewTaskToReadyList+0xc0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005402:	4b0a      	ldr	r3, [pc, #40]	; (800542c <prvAddNewTaskToReadyList+0xbc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540c:	429a      	cmp	r2, r3
 800540e:	d207      	bcs.n	8005420 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005410:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <prvAddNewTaskToReadyList+0xd0>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000164 	.word	0x20000164
 800542c:	20000064 	.word	0x20000064
 8005430:	20000170 	.word	0x20000170
 8005434:	20000180 	.word	0x20000180
 8005438:	2000016c 	.word	0x2000016c
 800543c:	20000068 	.word	0x20000068
 8005440:	e000ed04 	.word	0xe000ed04

08005444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005456:	4b13      	ldr	r3, [pc, #76]	; (80054a4 <vTaskDelay+0x60>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <vTaskDelay+0x2e>
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	e7fe      	b.n	8005470 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005472:	f000 f879 	bl	8005568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005476:	2100      	movs	r1, #0
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fb03 	bl	8005a84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800547e:	f000 f881 	bl	8005584 <xTaskResumeAll>
 8005482:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d107      	bne.n	800549a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <vTaskDelay+0x64>)
 800548c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800549a:	bf00      	nop
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	2000018c 	.word	0x2000018c
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80054ba:	463a      	mov	r2, r7
 80054bc:	1d39      	adds	r1, r7, #4
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 ff1c 	bl	8006300 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054c8:	6839      	ldr	r1, [r7, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	9202      	str	r2, [sp, #8]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	2300      	movs	r3, #0
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	2300      	movs	r3, #0
 80054d8:	460a      	mov	r2, r1
 80054da:	491d      	ldr	r1, [pc, #116]	; (8005550 <vTaskStartScheduler+0xa4>)
 80054dc:	481d      	ldr	r0, [pc, #116]	; (8005554 <vTaskStartScheduler+0xa8>)
 80054de:	f7ff fe22 	bl	8005126 <xTaskCreateStatic>
 80054e2:	4602      	mov	r2, r0
 80054e4:	4b1c      	ldr	r3, [pc, #112]	; (8005558 <vTaskStartScheduler+0xac>)
 80054e6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054e8:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <vTaskStartScheduler+0xac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054f0:	2301      	movs	r3, #1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	e001      	b.n	80054fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d115      	bne.n	800552c <vTaskStartScheduler+0x80>
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005512:	4b12      	ldr	r3, [pc, #72]	; (800555c <vTaskStartScheduler+0xb0>)
 8005514:	f04f 32ff 	mov.w	r2, #4294967295
 8005518:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800551a:	4b11      	ldr	r3, [pc, #68]	; (8005560 <vTaskStartScheduler+0xb4>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005520:	4b10      	ldr	r3, [pc, #64]	; (8005564 <vTaskStartScheduler+0xb8>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005526:	f000 fb9b 	bl	8005c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800552a:	e00d      	b.n	8005548 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d109      	bne.n	8005548 <vTaskStartScheduler+0x9c>
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e7fe      	b.n	8005546 <vTaskStartScheduler+0x9a>
}
 8005548:	bf00      	nop
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	08007214 	.word	0x08007214
 8005554:	080058e1 	.word	0x080058e1
 8005558:	20000188 	.word	0x20000188
 800555c:	20000184 	.word	0x20000184
 8005560:	20000170 	.word	0x20000170
 8005564:	20000168 	.word	0x20000168

08005568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <vTaskSuspendAll+0x18>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	4a03      	ldr	r2, [pc, #12]	; (8005580 <vTaskSuspendAll+0x18>)
 8005574:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005576:	bf00      	nop
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	2000018c 	.word	0x2000018c

08005584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005592:	4b41      	ldr	r3, [pc, #260]	; (8005698 <xTaskResumeAll+0x114>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <xTaskResumeAll+0x2a>
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	e7fe      	b.n	80055ac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055ae:	f000 fbf5 	bl	8005d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055b2:	4b39      	ldr	r3, [pc, #228]	; (8005698 <xTaskResumeAll+0x114>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	4a37      	ldr	r2, [pc, #220]	; (8005698 <xTaskResumeAll+0x114>)
 80055ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055bc:	4b36      	ldr	r3, [pc, #216]	; (8005698 <xTaskResumeAll+0x114>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d161      	bne.n	8005688 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <xTaskResumeAll+0x118>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d05d      	beq.n	8005688 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055cc:	e02e      	b.n	800562c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055ce:	4b34      	ldr	r3, [pc, #208]	; (80056a0 <xTaskResumeAll+0x11c>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3318      	adds	r3, #24
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fd79 	bl	80050d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fd74 	bl	80050d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	2201      	movs	r2, #1
 80055f0:	409a      	lsls	r2, r3
 80055f2:	4b2c      	ldr	r3, [pc, #176]	; (80056a4 <xTaskResumeAll+0x120>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <xTaskResumeAll+0x120>)
 80055fa:	6013      	str	r3, [r2, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005600:	4613      	mov	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4a27      	ldr	r2, [pc, #156]	; (80056a8 <xTaskResumeAll+0x124>)
 800560a:	441a      	add	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	3304      	adds	r3, #4
 8005610:	4619      	mov	r1, r3
 8005612:	4610      	mov	r0, r2
 8005614:	f7ff fd00 	bl	8005018 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	4b23      	ldr	r3, [pc, #140]	; (80056ac <xTaskResumeAll+0x128>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005626:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <xTaskResumeAll+0x12c>)
 8005628:	2201      	movs	r2, #1
 800562a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800562c:	4b1c      	ldr	r3, [pc, #112]	; (80056a0 <xTaskResumeAll+0x11c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1cc      	bne.n	80055ce <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800563a:	f000 fa03 	bl	8005a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <xTaskResumeAll+0x130>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d010      	beq.n	800566c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800564a:	f000 f837 	bl	80056bc <xTaskIncrementTick>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <xTaskResumeAll+0x12c>)
 8005656:	2201      	movs	r2, #1
 8005658:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3b01      	subs	r3, #1
 800565e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f1      	bne.n	800564a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <xTaskResumeAll+0x130>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800566c:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <xTaskResumeAll+0x12c>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d009      	beq.n	8005688 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005674:	2301      	movs	r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005678:	4b0f      	ldr	r3, [pc, #60]	; (80056b8 <xTaskResumeAll+0x134>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005688:	f000 fbb6 	bl	8005df8 <vPortExitCritical>

	return xAlreadyYielded;
 800568c:	68bb      	ldr	r3, [r7, #8]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000018c 	.word	0x2000018c
 800569c:	20000164 	.word	0x20000164
 80056a0:	20000124 	.word	0x20000124
 80056a4:	2000016c 	.word	0x2000016c
 80056a8:	20000068 	.word	0x20000068
 80056ac:	20000064 	.word	0x20000064
 80056b0:	20000178 	.word	0x20000178
 80056b4:	20000174 	.word	0x20000174
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056c6:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <xTaskIncrementTick+0x144>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 8087 	bne.w	80057de <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056d0:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <xTaskIncrementTick+0x148>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056d8:	4a4a      	ldr	r2, [pc, #296]	; (8005804 <xTaskIncrementTick+0x148>)
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11f      	bne.n	8005724 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80056e4:	4b48      	ldr	r3, [pc, #288]	; (8005808 <xTaskIncrementTick+0x14c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <xTaskIncrementTick+0x46>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	e7fe      	b.n	8005700 <xTaskIncrementTick+0x44>
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <xTaskIncrementTick+0x14c>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	4b40      	ldr	r3, [pc, #256]	; (800580c <xTaskIncrementTick+0x150>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3e      	ldr	r2, [pc, #248]	; (8005808 <xTaskIncrementTick+0x14c>)
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	4a3e      	ldr	r2, [pc, #248]	; (800580c <xTaskIncrementTick+0x150>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b3e      	ldr	r3, [pc, #248]	; (8005810 <xTaskIncrementTick+0x154>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	3301      	adds	r3, #1
 800571c:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <xTaskIncrementTick+0x154>)
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	f000 f990 	bl	8005a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <xTaskIncrementTick+0x158>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	429a      	cmp	r2, r3
 800572c:	d348      	bcc.n	80057c0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800572e:	4b36      	ldr	r3, [pc, #216]	; (8005808 <xTaskIncrementTick+0x14c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005738:	4b36      	ldr	r3, [pc, #216]	; (8005814 <xTaskIncrementTick+0x158>)
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	601a      	str	r2, [r3, #0]
					break;
 8005740:	e03e      	b.n	80057c0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <xTaskIncrementTick+0x14c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	429a      	cmp	r2, r3
 8005758:	d203      	bcs.n	8005762 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800575a:	4a2e      	ldr	r2, [pc, #184]	; (8005814 <xTaskIncrementTick+0x158>)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005760:	e02e      	b.n	80057c0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fcb3 	bl	80050d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	3318      	adds	r3, #24
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff fcaa 	bl	80050d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b24      	ldr	r3, [pc, #144]	; (8005818 <xTaskIncrementTick+0x15c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <xTaskIncrementTick+0x15c>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4a1f      	ldr	r2, [pc, #124]	; (800581c <xTaskIncrementTick+0x160>)
 800579e:	441a      	add	r2, r3
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	3304      	adds	r3, #4
 80057a4:	4619      	mov	r1, r3
 80057a6:	4610      	mov	r0, r2
 80057a8:	f7ff fc36 	bl	8005018 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4b1b      	ldr	r3, [pc, #108]	; (8005820 <xTaskIncrementTick+0x164>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d3b9      	bcc.n	800572e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057be:	e7b6      	b.n	800572e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057c0:	4b17      	ldr	r3, [pc, #92]	; (8005820 <xTaskIncrementTick+0x164>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4915      	ldr	r1, [pc, #84]	; (800581c <xTaskIncrementTick+0x160>)
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d907      	bls.n	80057e8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	e004      	b.n	80057e8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <xTaskIncrementTick+0x168>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	4a0f      	ldr	r2, [pc, #60]	; (8005824 <xTaskIncrementTick+0x168>)
 80057e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057e8:	4b0f      	ldr	r3, [pc, #60]	; (8005828 <xTaskIncrementTick+0x16c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80057f0:	2301      	movs	r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057f4:	697b      	ldr	r3, [r7, #20]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	2000018c 	.word	0x2000018c
 8005804:	20000168 	.word	0x20000168
 8005808:	2000011c 	.word	0x2000011c
 800580c:	20000120 	.word	0x20000120
 8005810:	2000017c 	.word	0x2000017c
 8005814:	20000184 	.word	0x20000184
 8005818:	2000016c 	.word	0x2000016c
 800581c:	20000068 	.word	0x20000068
 8005820:	20000064 	.word	0x20000064
 8005824:	20000174 	.word	0x20000174
 8005828:	20000178 	.word	0x20000178

0800582c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005832:	4b26      	ldr	r3, [pc, #152]	; (80058cc <vTaskSwitchContext+0xa0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800583a:	4b25      	ldr	r3, [pc, #148]	; (80058d0 <vTaskSwitchContext+0xa4>)
 800583c:	2201      	movs	r2, #1
 800583e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005840:	e03e      	b.n	80058c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8005842:	4b23      	ldr	r3, [pc, #140]	; (80058d0 <vTaskSwitchContext+0xa4>)
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005848:	4b22      	ldr	r3, [pc, #136]	; (80058d4 <vTaskSwitchContext+0xa8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	f1c3 031f 	rsb	r3, r3, #31
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	491e      	ldr	r1, [pc, #120]	; (80058d8 <vTaskSwitchContext+0xac>)
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d109      	bne.n	8005886 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	607b      	str	r3, [r7, #4]
 8005884:	e7fe      	b.n	8005884 <vTaskSwitchContext+0x58>
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <vTaskSwitchContext+0xac>)
 8005892:	4413      	add	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	3308      	adds	r3, #8
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d104      	bne.n	80058b6 <vTaskSwitchContext+0x8a>
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	605a      	str	r2, [r3, #4]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a07      	ldr	r2, [pc, #28]	; (80058dc <vTaskSwitchContext+0xb0>)
 80058be:	6013      	str	r3, [r2, #0]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	2000018c 	.word	0x2000018c
 80058d0:	20000178 	.word	0x20000178
 80058d4:	2000016c 	.word	0x2000016c
 80058d8:	20000068 	.word	0x20000068
 80058dc:	20000064 	.word	0x20000064

080058e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058e8:	f000 f852 	bl	8005990 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <prvIdleTask+0x28>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d9f9      	bls.n	80058e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <prvIdleTask+0x2c>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005904:	e7f0      	b.n	80058e8 <prvIdleTask+0x8>
 8005906:	bf00      	nop
 8005908:	20000068 	.word	0x20000068
 800590c:	e000ed04 	.word	0xe000ed04

08005910 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005916:	2300      	movs	r3, #0
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	e00c      	b.n	8005936 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4a12      	ldr	r2, [pc, #72]	; (8005970 <prvInitialiseTaskLists+0x60>)
 8005928:	4413      	add	r3, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff fb47 	bl	8004fbe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3301      	adds	r3, #1
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b06      	cmp	r3, #6
 800593a:	d9ef      	bls.n	800591c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800593c:	480d      	ldr	r0, [pc, #52]	; (8005974 <prvInitialiseTaskLists+0x64>)
 800593e:	f7ff fb3e 	bl	8004fbe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005942:	480d      	ldr	r0, [pc, #52]	; (8005978 <prvInitialiseTaskLists+0x68>)
 8005944:	f7ff fb3b 	bl	8004fbe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005948:	480c      	ldr	r0, [pc, #48]	; (800597c <prvInitialiseTaskLists+0x6c>)
 800594a:	f7ff fb38 	bl	8004fbe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800594e:	480c      	ldr	r0, [pc, #48]	; (8005980 <prvInitialiseTaskLists+0x70>)
 8005950:	f7ff fb35 	bl	8004fbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005954:	480b      	ldr	r0, [pc, #44]	; (8005984 <prvInitialiseTaskLists+0x74>)
 8005956:	f7ff fb32 	bl	8004fbe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <prvInitialiseTaskLists+0x78>)
 800595c:	4a05      	ldr	r2, [pc, #20]	; (8005974 <prvInitialiseTaskLists+0x64>)
 800595e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <prvInitialiseTaskLists+0x7c>)
 8005962:	4a05      	ldr	r2, [pc, #20]	; (8005978 <prvInitialiseTaskLists+0x68>)
 8005964:	601a      	str	r2, [r3, #0]
}
 8005966:	bf00      	nop
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000068 	.word	0x20000068
 8005974:	200000f4 	.word	0x200000f4
 8005978:	20000108 	.word	0x20000108
 800597c:	20000124 	.word	0x20000124
 8005980:	20000138 	.word	0x20000138
 8005984:	20000150 	.word	0x20000150
 8005988:	2000011c 	.word	0x2000011c
 800598c:	20000120 	.word	0x20000120

08005990 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005996:	e019      	b.n	80059cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005998:	f000 fa00 	bl	8005d9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	4b0f      	ldr	r3, [pc, #60]	; (80059dc <prvCheckTasksWaitingTermination+0x4c>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fb92 	bl	80050d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ae:	4b0c      	ldr	r3, [pc, #48]	; (80059e0 <prvCheckTasksWaitingTermination+0x50>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	4a0a      	ldr	r2, [pc, #40]	; (80059e0 <prvCheckTasksWaitingTermination+0x50>)
 80059b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059b8:	4b0a      	ldr	r3, [pc, #40]	; (80059e4 <prvCheckTasksWaitingTermination+0x54>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <prvCheckTasksWaitingTermination+0x54>)
 80059c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059c2:	f000 fa19 	bl	8005df8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f80e 	bl	80059e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059cc:	4b05      	ldr	r3, [pc, #20]	; (80059e4 <prvCheckTasksWaitingTermination+0x54>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e1      	bne.n	8005998 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20000138 	.word	0x20000138
 80059e0:	20000164 	.word	0x20000164
 80059e4:	2000014c 	.word	0x2000014c

080059e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fb6a 	bl	80060d8 <vPortFree>
				vPortFree( pxTCB );
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb67 	bl	80060d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a0a:	e017      	b.n	8005a3c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d103      	bne.n	8005a1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb5e 	bl	80060d8 <vPortFree>
	}
 8005a1c:	e00e      	b.n	8005a3c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d009      	beq.n	8005a3c <prvDeleteTCB+0x54>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e7fe      	b.n	8005a3a <prvDeleteTCB+0x52>
	}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a5c:	e008      	b.n	8005a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	2000011c 	.word	0x2000011c
 8005a80:	20000184 	.word	0x20000184

08005a84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a8e:	4b29      	ldr	r3, [pc, #164]	; (8005b34 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a94:	4b28      	ldr	r3, [pc, #160]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fb19 	bl	80050d2 <uxListRemove>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10b      	bne.n	8005abe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005aa6:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	2201      	movs	r2, #1
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	4b21      	ldr	r3, [pc, #132]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005abc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d10a      	bne.n	8005adc <prvAddCurrentTaskToDelayedList+0x58>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3304      	adds	r3, #4
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	481a      	ldr	r0, [pc, #104]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ad6:	f7ff fa9f 	bl	8005018 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ada:	e026      	b.n	8005b2a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ae4:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d209      	bcs.n	8005b08 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005af4:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f7ff faad 	bl	8005060 <vListInsert>
}
 8005b06:	e010      	b.n	8005b2a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b08:	4b0f      	ldr	r3, [pc, #60]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4619      	mov	r1, r3
 8005b14:	4610      	mov	r0, r2
 8005b16:	f7ff faa3 	bl	8005060 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b1a:	4b0c      	ldr	r3, [pc, #48]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d202      	bcs.n	8005b2a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b24:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6013      	str	r3, [r2, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000168 	.word	0x20000168
 8005b38:	20000064 	.word	0x20000064
 8005b3c:	2000016c 	.word	0x2000016c
 8005b40:	20000150 	.word	0x20000150
 8005b44:	20000120 	.word	0x20000120
 8005b48:	2000011c 	.word	0x2000011c
 8005b4c:	20000184 	.word	0x20000184

08005b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3b04      	subs	r3, #4
 8005b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3b04      	subs	r3, #4
 8005b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f023 0201 	bic.w	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3b04      	subs	r3, #4
 8005b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b80:	4a0c      	ldr	r2, [pc, #48]	; (8005bb4 <pxPortInitialiseStack+0x64>)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b14      	subs	r3, #20
 8005b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f06f 0202 	mvn.w	r2, #2
 8005b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3b20      	subs	r3, #32
 8005ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	08005bb9 	.word	0x08005bb9

08005bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bc2:	4b11      	ldr	r3, [pc, #68]	; (8005c08 <prvTaskExitError+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bca:	d009      	beq.n	8005be0 <prvTaskExitError+0x28>
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e7fe      	b.n	8005bde <prvTaskExitError+0x26>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bf2:	bf00      	nop
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0fc      	beq.n	8005bf4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	2000003c 	.word	0x2000003c
 8005c0c:	00000000 	.word	0x00000000

08005c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <pxCurrentTCBConst2>)
 8005c12:	6819      	ldr	r1, [r3, #0]
 8005c14:	6808      	ldr	r0, [r1, #0]
 8005c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1a:	f380 8809 	msr	PSP, r0
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8811 	msr	BASEPRI, r0
 8005c2a:	4770      	bx	lr
 8005c2c:	f3af 8000 	nop.w

08005c30 <pxCurrentTCBConst2>:
 8005c30:	20000064 	.word	0x20000064
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop

08005c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c38:	4808      	ldr	r0, [pc, #32]	; (8005c5c <prvPortStartFirstTask+0x24>)
 8005c3a:	6800      	ldr	r0, [r0, #0]
 8005c3c:	6800      	ldr	r0, [r0, #0]
 8005c3e:	f380 8808 	msr	MSP, r0
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8814 	msr	CONTROL, r0
 8005c4a:	b662      	cpsie	i
 8005c4c:	b661      	cpsie	f
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	df00      	svc	0
 8005c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c5a:	bf00      	nop
 8005c5c:	e000ed08 	.word	0xe000ed08

08005c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c66:	4b44      	ldr	r3, [pc, #272]	; (8005d78 <xPortStartScheduler+0x118>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a44      	ldr	r2, [pc, #272]	; (8005d7c <xPortStartScheduler+0x11c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d109      	bne.n	8005c84 <xPortStartScheduler+0x24>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e7fe      	b.n	8005c82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c84:	4b3c      	ldr	r3, [pc, #240]	; (8005d78 <xPortStartScheduler+0x118>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a3d      	ldr	r2, [pc, #244]	; (8005d80 <xPortStartScheduler+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d109      	bne.n	8005ca2 <xPortStartScheduler+0x42>
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e7fe      	b.n	8005ca0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ca2:	4b38      	ldr	r3, [pc, #224]	; (8005d84 <xPortStartScheduler+0x124>)
 8005ca4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	4b30      	ldr	r3, [pc, #192]	; (8005d88 <xPortStartScheduler+0x128>)
 8005cc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cca:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005ccc:	2207      	movs	r2, #7
 8005cce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cd0:	e009      	b.n	8005ce6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	4a2c      	ldr	r2, [pc, #176]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce6:	78fb      	ldrb	r3, [r7, #3]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cee:	2b80      	cmp	r3, #128	; 0x80
 8005cf0:	d0ef      	beq.n	8005cd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cf2:	4b26      	ldr	r3, [pc, #152]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1c3 0307 	rsb	r3, r3, #7
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d009      	beq.n	8005d12 <xPortStartScheduler+0xb2>
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	e7fe      	b.n	8005d10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d12:	4b1e      	ldr	r3, [pc, #120]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	021b      	lsls	r3, r3, #8
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d1c:	4b1b      	ldr	r3, [pc, #108]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d24:	4a19      	ldr	r2, [pc, #100]	; (8005d8c <xPortStartScheduler+0x12c>)
 8005d26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <xPortStartScheduler+0x130>)
 8005d42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d48:	f000 f8d6 	bl	8005ef8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <xPortStartScheduler+0x134>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d52:	f000 f8f5 	bl	8005f40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d56:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a0f      	ldr	r2, [pc, #60]	; (8005d98 <xPortStartScheduler+0x138>)
 8005d5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d62:	f7ff ff69 	bl	8005c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d66:	f7ff fd61 	bl	800582c <vTaskSwitchContext>
	prvTaskExitError();
 8005d6a:	f7ff ff25 	bl	8005bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	e000ed00 	.word	0xe000ed00
 8005d7c:	410fc271 	.word	0x410fc271
 8005d80:	410fc270 	.word	0x410fc270
 8005d84:	e000e400 	.word	0xe000e400
 8005d88:	20000190 	.word	0x20000190
 8005d8c:	20000194 	.word	0x20000194
 8005d90:	e000ed20 	.word	0xe000ed20
 8005d94:	2000003c 	.word	0x2000003c
 8005d98:	e000ef34 	.word	0xe000ef34

08005d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <vPortEnterCritical+0x54>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <vPortEnterCritical+0x54>)
 8005dbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <vPortEnterCritical+0x54>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10e      	bne.n	8005de4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dc6:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <vPortEnterCritical+0x58>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d009      	beq.n	8005de4 <vPortEnterCritical+0x48>
 8005dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	603b      	str	r3, [r7, #0]
 8005de2:	e7fe      	b.n	8005de2 <vPortEnterCritical+0x46>
	}
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	2000003c 	.word	0x2000003c
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d109      	bne.n	8005e1a <vPortExitCritical+0x22>
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e7fe      	b.n	8005e18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	4a08      	ldr	r2, [pc, #32]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <vPortExitCritical+0x4c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d104      	bne.n	8005e36 <vPortExitCritical+0x3e>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000003c 	.word	0x2000003c
	...

08005e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e50:	f3ef 8009 	mrs	r0, PSP
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <pxCurrentTCBConst>)
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	f01e 0f10 	tst.w	lr, #16
 8005e60:	bf08      	it	eq
 8005e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	6010      	str	r0, [r2, #0]
 8005e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e74:	f380 8811 	msr	BASEPRI, r0
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f7ff fcd4 	bl	800582c <vTaskSwitchContext>
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f380 8811 	msr	BASEPRI, r0
 8005e8c:	bc09      	pop	{r0, r3}
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	6808      	ldr	r0, [r1, #0]
 8005e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e96:	f01e 0f10 	tst.w	lr, #16
 8005e9a:	bf08      	it	eq
 8005e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ea0:	f380 8809 	msr	PSP, r0
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	f3af 8000 	nop.w

08005eb0 <pxCurrentTCBConst>:
 8005eb0:	20000064 	.word	0x20000064
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec2:	f383 8811 	msr	BASEPRI, r3
 8005ec6:	f3bf 8f6f 	isb	sy
 8005eca:	f3bf 8f4f 	dsb	sy
 8005ece:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ed0:	f7ff fbf4 	bl	80056bc <xTaskIncrementTick>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <SysTick_Handler+0x3c>)
 8005edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <vPortSetupTimerInterrupt+0x34>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <vPortSetupTimerInterrupt+0x38>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f08:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <vPortSetupTimerInterrupt+0x3c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <vPortSetupTimerInterrupt+0x40>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	099b      	lsrs	r3, r3, #6
 8005f14:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortSetupTimerInterrupt+0x44>)
 8005f16:	3b01      	subs	r3, #1
 8005f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f1a:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <vPortSetupTimerInterrupt+0x34>)
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e010 	.word	0xe000e010
 8005f30:	e000e018 	.word	0xe000e018
 8005f34:	20000040 	.word	0x20000040
 8005f38:	10624dd3 	.word	0x10624dd3
 8005f3c:	e000e014 	.word	0xe000e014

08005f40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f50 <vPortEnableVFP+0x10>
 8005f44:	6801      	ldr	r1, [r0, #0]
 8005f46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f4a:	6001      	str	r1, [r0, #0]
 8005f4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f4e:	bf00      	nop
 8005f50:	e000ed88 	.word	0xe000ed88

08005f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f60:	f7ff fb02 	bl	8005568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f64:	4b57      	ldr	r3, [pc, #348]	; (80060c4 <pvPortMalloc+0x170>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f6c:	f000 f90c 	bl	8006188 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f70:	4b55      	ldr	r3, [pc, #340]	; (80060c8 <pvPortMalloc+0x174>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f040 808c 	bne.w	8006096 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01c      	beq.n	8005fbe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005f84:	2208      	movs	r2, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d013      	beq.n	8005fbe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d009      	beq.n	8005fbe <pvPortMalloc+0x6a>
	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e7fe      	b.n	8005fbc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d068      	beq.n	8006096 <pvPortMalloc+0x142>
 8005fc4:	4b41      	ldr	r3, [pc, #260]	; (80060cc <pvPortMalloc+0x178>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d863      	bhi.n	8006096 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fce:	4b40      	ldr	r3, [pc, #256]	; (80060d0 <pvPortMalloc+0x17c>)
 8005fd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fd2:	4b3f      	ldr	r3, [pc, #252]	; (80060d0 <pvPortMalloc+0x17c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd8:	e004      	b.n	8005fe4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <pvPortMalloc+0xa2>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ff6:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <pvPortMalloc+0x170>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d04a      	beq.n	8006096 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	4413      	add	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	2308      	movs	r3, #8
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	429a      	cmp	r2, r3
 8006020:	d91e      	bls.n	8006060 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <pvPortMalloc+0xf4>
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	e7fe      	b.n	8006046 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800605a:	69b8      	ldr	r0, [r7, #24]
 800605c:	f000 f8f6 	bl	800624c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006060:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <pvPortMalloc+0x178>)
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	4a18      	ldr	r2, [pc, #96]	; (80060cc <pvPortMalloc+0x178>)
 800606c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800606e:	4b17      	ldr	r3, [pc, #92]	; (80060cc <pvPortMalloc+0x178>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <pvPortMalloc+0x180>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <pvPortMalloc+0x178>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <pvPortMalloc+0x180>)
 8006080:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <pvPortMalloc+0x174>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	431a      	orrs	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006096:	f7ff fa75 	bl	8005584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <pvPortMalloc+0x164>
 80060a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a8:	f383 8811 	msr	BASEPRI, r3
 80060ac:	f3bf 8f6f 	isb	sy
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	e7fe      	b.n	80060b6 <pvPortMalloc+0x162>
	return pvReturn;
 80060b8:	69fb      	ldr	r3, [r7, #28]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000d58 	.word	0x20000d58
 80060c8:	20000d64 	.word	0x20000d64
 80060cc:	20000d5c 	.word	0x20000d5c
 80060d0:	20000d50 	.word	0x20000d50
 80060d4:	20000d60 	.word	0x20000d60

080060d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d046      	beq.n	8006178 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ea:	2308      	movs	r3, #8
 80060ec:	425b      	negs	r3, r3
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	4413      	add	r3, r2
 80060f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4b20      	ldr	r3, [pc, #128]	; (8006180 <vPortFree+0xa8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4013      	ands	r3, r2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d109      	bne.n	800611a <vPortFree+0x42>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e7fe      	b.n	8006118 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <vPortFree+0x5e>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	e7fe      	b.n	8006134 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <vPortFree+0xa8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4013      	ands	r3, r2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d019      	beq.n	8006178 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d115      	bne.n	8006178 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <vPortFree+0xa8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	43db      	mvns	r3, r3
 8006156:	401a      	ands	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800615c:	f7ff fa04 	bl	8005568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <vPortFree+0xac>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4413      	add	r3, r2
 800616a:	4a06      	ldr	r2, [pc, #24]	; (8006184 <vPortFree+0xac>)
 800616c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800616e:	6938      	ldr	r0, [r7, #16]
 8006170:	f000 f86c 	bl	800624c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006174:	f7ff fa06 	bl	8005584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006178:	bf00      	nop
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	20000d64 	.word	0x20000d64
 8006184:	20000d5c 	.word	0x20000d5c

08006188 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800618e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006192:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006194:	4b27      	ldr	r3, [pc, #156]	; (8006234 <prvHeapInit+0xac>)
 8006196:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	3307      	adds	r3, #7
 80061a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0307 	bic.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <prvHeapInit+0xac>)
 80061b8:	4413      	add	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061c0:	4a1d      	ldr	r2, [pc, #116]	; (8006238 <prvHeapInit+0xb0>)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061c6:	4b1c      	ldr	r3, [pc, #112]	; (8006238 <prvHeapInit+0xb0>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061d4:	2208      	movs	r2, #8
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0307 	bic.w	r3, r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <prvHeapInit+0xb4>)
 80061e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <prvHeapInit+0xb4>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <prvHeapInit+0xb4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <prvHeapInit+0xb4>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <prvHeapInit+0xb8>)
 8006216:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <prvHeapInit+0xbc>)
 800621e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006220:	4b09      	ldr	r3, [pc, #36]	; (8006248 <prvHeapInit+0xc0>)
 8006222:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006226:	601a      	str	r2, [r3, #0]
}
 8006228:	bf00      	nop
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	20000198 	.word	0x20000198
 8006238:	20000d50 	.word	0x20000d50
 800623c:	20000d58 	.word	0x20000d58
 8006240:	20000d60 	.word	0x20000d60
 8006244:	20000d5c 	.word	0x20000d5c
 8006248:	20000d64 	.word	0x20000d64

0800624c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006254:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <prvInsertBlockIntoFreeList+0xac>)
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	e002      	b.n	8006260 <prvInsertBlockIntoFreeList+0x14>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	429a      	cmp	r2, r3
 8006268:	d8f7      	bhi.n	800625a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4413      	add	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d108      	bne.n	800628e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	441a      	add	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	441a      	add	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d118      	bne.n	80062d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4b15      	ldr	r3, [pc, #84]	; (80062fc <prvInsertBlockIntoFreeList+0xb0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d00d      	beq.n	80062ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	441a      	add	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e008      	b.n	80062dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062ca:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <prvInsertBlockIntoFreeList+0xb0>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e003      	b.n	80062dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d002      	beq.n	80062ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000d50 	.word	0x20000d50
 80062fc:	20000d58 	.word	0x20000d58

08006300 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4a07      	ldr	r2, [pc, #28]	; (800632c <vApplicationGetIdleTaskMemory+0x2c>)
 8006310:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	4a06      	ldr	r2, [pc, #24]	; (8006330 <vApplicationGetIdleTaskMemory+0x30>)
 8006316:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2280      	movs	r2, #128	; 0x80
 800631c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800631e:	bf00      	nop
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000d68 	.word	0x20000d68
 8006330:	20000dbc 	.word	0x20000dbc

08006334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006334:	b5b0      	push	{r4, r5, r7, lr}
 8006336:	b08e      	sub	sp, #56	; 0x38
 8006338:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800633a:	f7fa fb91 	bl	8000a60 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 800633e:	f7fa fa1f 	bl	8000780 <BSP_ACCELERO_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006342:	f000 f85b 	bl	80063fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006346:	f000 fa07 	bl	8006758 <MX_GPIO_Init>
  MX_DMA_Init();
 800634a:	f000 f9e7 	bl	800671c <MX_DMA_Init>
  MX_DAC1_Init();
 800634e:	f000 f8cf 	bl	80064f0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8006352:	f000 f965 	bl	8006620 <MX_TIM2_Init>
  MX_I2C2_Init();
 8006356:	f000 f8fd 	bl	8006554 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800635a:	f000 f93b 	bl	80065d4 <MX_QUADSPI_Init>
  MX_USART1_UART_Init();
 800635e:	f000 f9ad 	bl	80066bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Double-tap recognition(Use single-tap to simulate the plane was hit.
  //We didn't choose single-tap recognition as it is so sensitive that very easy to be triggered by mistake.
  // Turn on the accelerometer and set the sampling rate at 416Hz
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, 0x60);
 8006362:	2260      	movs	r2, #96	; 0x60
 8006364:	2110      	movs	r1, #16
 8006366:	20d4      	movs	r0, #212	; 0xd4
 8006368:	f7fa f9b4 	bl	80006d4 <SENSOR_IO_Write>
  //Enable interrupts and tap detection on X, Y, Z axis
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_CFG1, 0x8E);
 800636c:	228e      	movs	r2, #142	; 0x8e
 800636e:	2158      	movs	r1, #88	; 0x58
 8006370:	20d4      	movs	r0, #212	; 0xd4
 8006372:	f7fa f9af 	bl	80006d4 <SENSOR_IO_Write>
  //Set the value of the tap threshold at 562.5mg.
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_TAP_THS_6D, 0x8C);
 8006376:	228c      	movs	r2, #140	; 0x8c
 8006378:	2159      	movs	r1, #89	; 0x59
 800637a:	20d4      	movs	r0, #212	; 0xd4
 800637c:	f7fa f9aa 	bl	80006d4 <SENSOR_IO_Write>
  //Set the values of Quiet and Shock time windows
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT_DUR2, 0x7F);
 8006380:	227f      	movs	r2, #127	; 0x7f
 8006382:	215a      	movs	r1, #90	; 0x5a
 8006384:	20d4      	movs	r0, #212	; 0xd4
 8006386:	f7fa f9a5 	bl	80006d4 <SENSOR_IO_Write>
  //Enable the single-tap recogonition
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WAKE_UP_THS, 0x80);
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	215b      	movs	r1, #91	; 0x5b
 800638e:	20d4      	movs	r0, #212	; 0xd4
 8006390:	f7fa f9a0 	bl	80006d4 <SENSOR_IO_Write>
  //Let the interrupt generated diven to INT1 pin
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MD1_CFG, 0x08);
 8006394:	2208      	movs	r2, #8
 8006396:	215e      	movs	r1, #94	; 0x5e
 8006398:	20d4      	movs	r0, #212	; 0xd4
 800639a:	f7fa f99b 	bl	80006d4 <SENSOR_IO_Write>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of datareadingTask */
  osThreadDef(datareadingTask, StartDatareadingTask, osPriorityNormal, 0, 128);
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <main+0xb8>)
 80063a0:	f107 041c 	add.w	r4, r7, #28
 80063a4:	461d      	mov	r5, r3
 80063a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  datareadingTaskHandle = osThreadCreate(osThread(datareadingTask), NULL);
 80063b2:	f107 031c 	add.w	r3, r7, #28
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe fda0 	bl	8004efe <osThreadCreate>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <main+0xbc>)
 80063c2:	601a      	str	r2, [r3, #0]

  /* definition and creation of orientationTask */
  osThreadDef(orientationTask, StartOrientationTask, osPriorityIdle, 0, 128);
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <main+0xc0>)
 80063c6:	463c      	mov	r4, r7
 80063c8:	461d      	mov	r5, r3
 80063ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  orientationTaskHandle = osThreadCreate(osThread(orientationTask), NULL);
 80063d6:	463b      	mov	r3, r7
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fd8f 	bl	8004efe <osThreadCreate>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <main+0xc4>)
 80063e4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80063e6:	f7fe fd83 	bl	8004ef0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80063ea:	e7fe      	b.n	80063ea <main+0xb6>
 80063ec:	0800722c 	.word	0x0800722c
 80063f0:	20001090 	.word	0x20001090
 80063f4:	08007258 	.word	0x08007258
 80063f8:	200010f4 	.word	0x200010f4

080063fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b0b8      	sub	sp, #224	; 0xe0
 8006400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006402:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006406:	2244      	movs	r2, #68	; 0x44
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f000 feee 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006410:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006414:	2200      	movs	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	609a      	str	r2, [r3, #8]
 800641c:	60da      	str	r2, [r3, #12]
 800641e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006420:	463b      	mov	r3, r7
 8006422:	2288      	movs	r2, #136	; 0x88
 8006424:	2100      	movs	r1, #0
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fee0 	bl	80071ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800642c:	2310      	movs	r3, #16
 800642e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006432:	2301      	movs	r3, #1
 8006434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800643e:	2360      	movs	r3, #96	; 0x60
 8006440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006444:	2302      	movs	r3, #2
 8006446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800644a:	2301      	movs	r3, #1
 800644c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006450:	2301      	movs	r3, #1
 8006452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006456:	2328      	movs	r3, #40	; 0x28
 8006458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800645c:	2307      	movs	r3, #7
 800645e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006462:	2302      	movs	r3, #2
 8006464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006468:	2302      	movs	r3, #2
 800646a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800646e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006472:	4618      	mov	r0, r3
 8006474:	f7fc f8e8 	bl	8002648 <HAL_RCC_OscConfig>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800647e:	f000 fbdf 	bl	8006c40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006482:	230f      	movs	r3, #15
 8006484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006488:	2303      	movs	r3, #3
 800648a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800648e:	2300      	movs	r3, #0
 8006490:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80064a0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064a4:	2104      	movs	r1, #4
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fc fcb4 	bl	8002e14 <HAL_RCC_ClockConfig>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80064b2:	f000 fbc5 	bl	8006c40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 80064b6:	2381      	movs	r3, #129	; 0x81
 80064b8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80064be:	2300      	movs	r3, #0
 80064c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80064c2:	463b      	mov	r3, r7
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fedb 	bl	8003280 <HAL_RCCEx_PeriphCLKConfig>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80064d0:	f000 fbb6 	bl	8006c40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80064d4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80064d8:	f7fb ffa4 	bl	8002424 <HAL_PWREx_ControlVoltageScaling>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80064e2:	f000 fbad 	bl	8006c40 <Error_Handler>
  }
}
 80064e6:	bf00      	nop
 80064e8:	37e0      	adds	r7, #224	; 0xe0
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80064f6:	1d3b      	adds	r3, r7, #4
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fe75 	bl	80071ec <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006502:	4b12      	ldr	r3, [pc, #72]	; (800654c <MX_DAC1_Init+0x5c>)
 8006504:	4a12      	ldr	r2, [pc, #72]	; (8006550 <MX_DAC1_Init+0x60>)
 8006506:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006508:	4810      	ldr	r0, [pc, #64]	; (800654c <MX_DAC1_Init+0x5c>)
 800650a:	f7fa fbe5 	bl	8000cd8 <HAL_DAC_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006514:	f000 fb94 	bl	8006c40 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800651c:	2324      	movs	r3, #36	; 0x24
 800651e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006524:	2300      	movs	r3, #0
 8006526:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	2200      	movs	r2, #0
 8006530:	4619      	mov	r1, r3
 8006532:	4806      	ldr	r0, [pc, #24]	; (800654c <MX_DAC1_Init+0x5c>)
 8006534:	f7fa fc56 	bl	8000de4 <HAL_DAC_ConfigChannel>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800653e:	f000 fb7f 	bl	8006c40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006542:	bf00      	nop
 8006544:	3728      	adds	r7, #40	; 0x28
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001094 	.word	0x20001094
 8006550:	40007400 	.word	0x40007400

08006554 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <MX_I2C2_Init+0x74>)
 800655a:	4a1c      	ldr	r2, [pc, #112]	; (80065cc <MX_I2C2_Init+0x78>)
 800655c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006560:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <MX_I2C2_Init+0x7c>)
 8006562:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <MX_I2C2_Init+0x74>)
 800656c:	2201      	movs	r2, #1
 800656e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006570:	4b15      	ldr	r3, [pc, #84]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006572:	2200      	movs	r2, #0
 8006574:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006578:	2200      	movs	r2, #0
 800657a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800657c:	4b12      	ldr	r3, [pc, #72]	; (80065c8 <MX_I2C2_Init+0x74>)
 800657e:	2200      	movs	r2, #0
 8006580:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006584:	2200      	movs	r2, #0
 8006586:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <MX_I2C2_Init+0x74>)
 800658a:	2200      	movs	r2, #0
 800658c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800658e:	480e      	ldr	r0, [pc, #56]	; (80065c8 <MX_I2C2_Init+0x74>)
 8006590:	f7fb f99a 	bl	80018c8 <HAL_I2C_Init>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800659a:	f000 fb51 	bl	8006c40 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800659e:	2100      	movs	r1, #0
 80065a0:	4809      	ldr	r0, [pc, #36]	; (80065c8 <MX_I2C2_Init+0x74>)
 80065a2:	f7fb fe99 	bl	80022d8 <HAL_I2CEx_ConfigAnalogFilter>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80065ac:	f000 fb48 	bl	8006c40 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80065b0:	2100      	movs	r1, #0
 80065b2:	4805      	ldr	r0, [pc, #20]	; (80065c8 <MX_I2C2_Init+0x74>)
 80065b4:	f7fb fedb 	bl	800236e <HAL_I2CEx_ConfigDigitalFilter>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80065be:	f000 fb3f 	bl	8006c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	200010a8 	.word	0x200010a8
 80065cc:	40005800 	.word	0x40005800
 80065d0:	10909cec 	.word	0x10909cec

080065d4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80065d8:	4b0f      	ldr	r3, [pc, #60]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065da:	4a10      	ldr	r2, [pc, #64]	; (800661c <MX_QUADSPI_Init+0x48>)
 80065dc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80065de:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80065ea:	4b0b      	ldr	r3, [pc, #44]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80065fc:	4b06      	ldr	r3, [pc, #24]	; (8006618 <MX_QUADSPI_Init+0x44>)
 80065fe:	2200      	movs	r2, #0
 8006600:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8006602:	4805      	ldr	r0, [pc, #20]	; (8006618 <MX_QUADSPI_Init+0x44>)
 8006604:	f7fb ff64 	bl	80024d0 <HAL_QSPI_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800660e:	f000 fb17 	bl	8006c40 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8006612:	bf00      	nop
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20001214 	.word	0x20001214
 800661c:	a0001000 	.word	0xa0001000

08006620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006626:	f107 0310 	add.w	r3, r7, #16
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006634:	1d3b      	adds	r3, r7, #4
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	605a      	str	r2, [r3, #4]
 800663c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800663e:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006640:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006644:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006646:	4b1c      	ldr	r3, [pc, #112]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006648:	2200      	movs	r2, #0
 800664a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800664c:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <MX_TIM2_Init+0x98>)
 800664e:	2200      	movs	r2, #0
 8006650:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006654:	f240 7216 	movw	r2, #1814	; 0x716
 8006658:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800665a:	4b17      	ldr	r3, [pc, #92]	; (80066b8 <MX_TIM2_Init+0x98>)
 800665c:	2200      	movs	r2, #0
 800665e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006660:	4b15      	ldr	r3, [pc, #84]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006662:	2200      	movs	r2, #0
 8006664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006666:	4814      	ldr	r0, [pc, #80]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006668:	f7fd faba 	bl	8003be0 <HAL_TIM_Base_Init>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006672:	f000 fae5 	bl	8006c40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800667a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	4619      	mov	r1, r3
 8006682:	480d      	ldr	r0, [pc, #52]	; (80066b8 <MX_TIM2_Init+0x98>)
 8006684:	f7fd fc93 	bl	8003fae <HAL_TIM_ConfigClockSource>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800668e:	f000 fad7 	bl	8006c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006692:	2320      	movs	r3, #32
 8006694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800669a:	1d3b      	adds	r3, r7, #4
 800669c:	4619      	mov	r1, r3
 800669e:	4806      	ldr	r0, [pc, #24]	; (80066b8 <MX_TIM2_Init+0x98>)
 80066a0:	f7fd fe9a 	bl	80043d8 <HAL_TIMEx_MasterConfigSynchronization>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80066aa:	f000 fac9 	bl	8006c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80066ae:	bf00      	nop
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200011c8 	.word	0x200011c8

080066bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80066c0:	4b14      	ldr	r3, [pc, #80]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066c2:	4a15      	ldr	r2, [pc, #84]	; (8006718 <MX_USART1_UART_Init+0x5c>)
 80066c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80066ce:	4b11      	ldr	r3, [pc, #68]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066dc:	2200      	movs	r2, #0
 80066de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80066e0:	4b0c      	ldr	r3, [pc, #48]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066e2:	220c      	movs	r2, #12
 80066e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80066ec:	4b09      	ldr	r3, [pc, #36]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80066f2:	4b08      	ldr	r3, [pc, #32]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <MX_USART1_UART_Init+0x58>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80066fe:	4805      	ldr	r0, [pc, #20]	; (8006714 <MX_USART1_UART_Init+0x58>)
 8006700:	f7fd ff10 	bl	8004524 <HAL_UART_Init>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800670a:	f000 fa99 	bl	8006c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800670e:	bf00      	nop
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20001148 	.word	0x20001148
 8006718:	40013800 	.word	0x40013800

0800671c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <MX_DMA_Init+0x38>)
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	4a0b      	ldr	r2, [pc, #44]	; (8006754 <MX_DMA_Init+0x38>)
 8006728:	f043 0301 	orr.w	r3, r3, #1
 800672c:	6493      	str	r3, [r2, #72]	; 0x48
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <MX_DMA_Init+0x38>)
 8006730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800673a:	2200      	movs	r2, #0
 800673c:	2100      	movs	r1, #0
 800673e:	200d      	movs	r0, #13
 8006740:	f7fa faa0 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006744:	200d      	movs	r0, #13
 8006746:	f7fa fab9 	bl	8000cbc <HAL_NVIC_EnableIRQ>

}
 800674a:	bf00      	nop
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40021000 	.word	0x40021000

08006758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675e:	f107 0314 	add.w	r3, r7, #20
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	605a      	str	r2, [r3, #4]
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	60da      	str	r2, [r3, #12]
 800676c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800676e:	4b45      	ldr	r3, [pc, #276]	; (8006884 <MX_GPIO_Init+0x12c>)
 8006770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006772:	4a44      	ldr	r2, [pc, #272]	; (8006884 <MX_GPIO_Init+0x12c>)
 8006774:	f043 0310 	orr.w	r3, r3, #16
 8006778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800677a:	4b42      	ldr	r3, [pc, #264]	; (8006884 <MX_GPIO_Init+0x12c>)
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006786:	4b3f      	ldr	r3, [pc, #252]	; (8006884 <MX_GPIO_Init+0x12c>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	4a3e      	ldr	r2, [pc, #248]	; (8006884 <MX_GPIO_Init+0x12c>)
 800678c:	f043 0304 	orr.w	r3, r3, #4
 8006790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006792:	4b3c      	ldr	r3, [pc, #240]	; (8006884 <MX_GPIO_Init+0x12c>)
 8006794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	60fb      	str	r3, [r7, #12]
 800679c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800679e:	4b39      	ldr	r3, [pc, #228]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	4a38      	ldr	r2, [pc, #224]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067a4:	f043 0301 	orr.w	r3, r3, #1
 80067a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067aa:	4b36      	ldr	r3, [pc, #216]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	60bb      	str	r3, [r7, #8]
 80067b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067b6:	4b33      	ldr	r3, [pc, #204]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	4a32      	ldr	r2, [pc, #200]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067bc:	f043 0302 	orr.w	r3, r3, #2
 80067c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067c2:	4b30      	ldr	r3, [pc, #192]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	607b      	str	r3, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80067ce:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	4a2c      	ldr	r2, [pc, #176]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067da:	4b2a      	ldr	r3, [pc, #168]	; (8006884 <MX_GPIO_Init+0x12c>)
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	603b      	str	r3, [r7, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80067e6:	2200      	movs	r2, #0
 80067e8:	2108      	movs	r1, #8
 80067ea:	4827      	ldr	r0, [pc, #156]	; (8006888 <MX_GPIO_Init+0x130>)
 80067ec:	f7fb f822 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G2_GPIO_Port, LED_G2_Pin, GPIO_PIN_RESET);
 80067f0:	2200      	movs	r2, #0
 80067f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067f6:	4825      	ldr	r0, [pc, #148]	; (800688c <MX_GPIO_Init+0x134>)
 80067f8:	f7fb f81c 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80067fc:	2308      	movs	r3, #8
 80067fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006800:	2301      	movs	r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006808:	2300      	movs	r3, #0
 800680a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 800680c:	f107 0314 	add.w	r3, r7, #20
 8006810:	4619      	mov	r1, r3
 8006812:	481d      	ldr	r0, [pc, #116]	; (8006888 <MX_GPIO_Init+0x130>)
 8006814:	f7fa fd72 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8006818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800681c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800681e:	4b1c      	ldr	r3, [pc, #112]	; (8006890 <MX_GPIO_Init+0x138>)
 8006820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	4619      	mov	r1, r3
 800682c:	4819      	ldr	r0, [pc, #100]	; (8006894 <MX_GPIO_Init+0x13c>)
 800682e:	f7fa fd65 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_G2_Pin */
  GPIO_InitStruct.Pin = LED_G2_Pin;
 8006832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006838:	2301      	movs	r3, #1
 800683a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683c:	2300      	movs	r3, #0
 800683e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006840:	2300      	movs	r3, #0
 8006842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_G2_GPIO_Port, &GPIO_InitStruct);
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	4619      	mov	r1, r3
 800684a:	4810      	ldr	r0, [pc, #64]	; (800688c <MX_GPIO_Init+0x134>)
 800684c:	f7fa fd56 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006856:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <MX_GPIO_Init+0x138>)
 8006858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	4619      	mov	r1, r3
 8006864:	480c      	ldr	r0, [pc, #48]	; (8006898 <MX_GPIO_Init+0x140>)
 8006866:	f7fa fd49 	bl	80012fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800686a:	2200      	movs	r2, #0
 800686c:	2100      	movs	r1, #0
 800686e:	2028      	movs	r0, #40	; 0x28
 8006870:	f7fa fa08 	bl	8000c84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006874:	2028      	movs	r0, #40	; 0x28
 8006876:	f7fa fa21 	bl	8000cbc <HAL_NVIC_EnableIRQ>

}
 800687a:	bf00      	nop
 800687c:	3728      	adds	r7, #40	; 0x28
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40021000 	.word	0x40021000
 8006888:	48001000 	.word	0x48001000
 800688c:	48000400 	.word	0x48000400
 8006890:	10110000 	.word	0x10110000
 8006894:	48000800 	.word	0x48000800
 8006898:	48000c00 	.word	0x48000c00

0800689c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b09c      	sub	sp, #112	; 0x70
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	80fb      	strh	r3, [r7, #6]
	//Simulate the push-button press as missile was fired
    if(GPIO_Pin == PUSH_BUTTON_Pin){
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ac:	d11e      	bne.n	80068ec <HAL_GPIO_EXTI_Callback+0x50>
    	HAL_GPIO_TogglePin(GPIOB, LED_G2_Pin);
 80068ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068b2:	4825      	ldr	r0, [pc, #148]	; (8006948 <HAL_GPIO_EXTI_Callback+0xac>)
 80068b4:	f7fa ffd6 	bl	8001864 <HAL_GPIO_TogglePin>
    	char buff8[100];
    	sprintf(buff8, "Missel was fired successfully!\n");
 80068b8:	f107 030c 	add.w	r3, r7, #12
 80068bc:	4a23      	ldr	r2, [pc, #140]	; (800694c <HAL_GPIO_EXTI_Callback+0xb0>)
 80068be:	461c      	mov	r4, r3
 80068c0:	4615      	mov	r5, r2
 80068c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80068ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    	HAL_UART_Transmit(&huart1, buff8, strlen(buff8), 1000);
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7f9 fc7c 	bl	80001d0 <strlen>
 80068d8:	4603      	mov	r3, r0
 80068da:	b29a      	uxth	r2, r3
 80068dc:	f107 010c 	add.w	r1, r7, #12
 80068e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e4:	481a      	ldr	r0, [pc, #104]	; (8006950 <HAL_GPIO_EXTI_Callback+0xb4>)
 80068e6:	f7fd fe6b 	bl	80045c0 <HAL_UART_Transmit>
    	HAL_GPIO_TogglePin(GPIOE, LED_R_Pin);
    	char buff7[100];
    	sprintf(buff7, "Watch out! You got hit!\n");
    	HAL_UART_Transmit(&huart1, buff7, strlen(buff7), 1000);
    }
    }
 80068ea:	e028      	b.n	800693e <HAL_GPIO_EXTI_Callback+0xa2>
    else if(GPIO_Pin != GPIO_PIN_RESET){
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d025      	beq.n	800693e <HAL_GPIO_EXTI_Callback+0xa2>
    	hit++;
 80068f2:	4b18      	ldr	r3, [pc, #96]	; (8006954 <HAL_GPIO_EXTI_Callback+0xb8>)
 80068f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3301      	adds	r3, #1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	b21a      	sxth	r2, r3
 8006900:	4b14      	ldr	r3, [pc, #80]	; (8006954 <HAL_GPIO_EXTI_Callback+0xb8>)
 8006902:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_TogglePin(GPIOE, LED_R_Pin);
 8006904:	2108      	movs	r1, #8
 8006906:	4814      	ldr	r0, [pc, #80]	; (8006958 <HAL_GPIO_EXTI_Callback+0xbc>)
 8006908:	f7fa ffac 	bl	8001864 <HAL_GPIO_TogglePin>
    	sprintf(buff7, "Watch out! You got hit!\n");
 800690c:	f107 030c 	add.w	r3, r7, #12
 8006910:	4a12      	ldr	r2, [pc, #72]	; (800695c <HAL_GPIO_EXTI_Callback+0xc0>)
 8006912:	461c      	mov	r4, r3
 8006914:	4615      	mov	r5, r2
 8006916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800691a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800691e:	c403      	stmia	r4!, {r0, r1}
 8006920:	7022      	strb	r2, [r4, #0]
    	HAL_UART_Transmit(&huart1, buff7, strlen(buff7), 1000);
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4618      	mov	r0, r3
 8006928:	f7f9 fc52 	bl	80001d0 <strlen>
 800692c:	4603      	mov	r3, r0
 800692e:	b29a      	uxth	r2, r3
 8006930:	f107 010c 	add.w	r1, r7, #12
 8006934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006938:	4805      	ldr	r0, [pc, #20]	; (8006950 <HAL_GPIO_EXTI_Callback+0xb4>)
 800693a:	f7fd fe41 	bl	80045c0 <HAL_UART_Transmit>
    }
 800693e:	bf00      	nop
 8006940:	3770      	adds	r7, #112	; 0x70
 8006942:	46bd      	mov	sp, r7
 8006944:	bdb0      	pop	{r4, r5, r7, pc}
 8006946:	bf00      	nop
 8006948:	48000400 	.word	0x48000400
 800694c:	08007274 	.word	0x08007274
 8006950:	20001148 	.word	0x20001148
 8006954:	20000fbe 	.word	0x20000fbe
 8006958:	48001000 	.word	0x48001000
 800695c:	08007294 	.word	0x08007294

08006960 <StartDatareadingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDatareadingTask */
void StartDatareadingTask(void const * argument)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8006968:	200a      	movs	r0, #10
 800696a:	f7fe fb14 	bl	8004f96 <osDelay>
    //read from accelerometer
    BSP_ACCELERO_AccGetXYZ(aXYZ);
 800696e:	4802      	ldr	r0, [pc, #8]	; (8006978 <StartDatareadingTask+0x18>)
 8006970:	f7f9 ff44 	bl	80007fc <BSP_ACCELERO_AccGetXYZ>
    osDelay(10);
 8006974:	e7f8      	b.n	8006968 <StartDatareadingTask+0x8>
 8006976:	bf00      	nop
 8006978:	20001140 	.word	0x20001140

0800697c <StartOrientationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOrientationTask */
void StartOrientationTask(void const * argument)
{
 800697c:	b5b0      	push	{r4, r5, r7, lr}
 800697e:	b09c      	sub	sp, #112	; 0x70
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOrientationTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006984:	2064      	movs	r0, #100	; 0x64
 8006986:	f7fe fb06 	bl	8004f96 <osDelay>
    //read the value from x-axis and set tilt down condition
    if(aXYZ[0] > 300){
 800698a:	4b99      	ldr	r3, [pc, #612]	; (8006bf0 <StartOrientationTask+0x274>)
 800698c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006990:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006994:	dd16      	ble.n	80069c4 <StartOrientationTask+0x48>
    	char buff1[100];
    	sprintf(buff1, "Tilt down\n");
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	4a96      	ldr	r2, [pc, #600]	; (8006bf4 <StartOrientationTask+0x278>)
 800699c:	ca07      	ldmia	r2, {r0, r1, r2}
 800699e:	c303      	stmia	r3!, {r0, r1}
 80069a0:	801a      	strh	r2, [r3, #0]
 80069a2:	3302      	adds	r3, #2
 80069a4:	0c12      	lsrs	r2, r2, #16
 80069a6:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&huart1, buff1, strlen(buff1), 1000);
 80069a8:	f107 030c 	add.w	r3, r7, #12
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7f9 fc0f 	bl	80001d0 <strlen>
 80069b2:	4603      	mov	r3, r0
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	f107 010c 	add.w	r1, r7, #12
 80069ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069be:	488e      	ldr	r0, [pc, #568]	; (8006bf8 <StartOrientationTask+0x27c>)
 80069c0:	f7fd fdfe 	bl	80045c0 <HAL_UART_Transmit>
    }
    //read the value from x-axis and set tilt up condition
    if(aXYZ[0] < -300){
 80069c4:	4b8a      	ldr	r3, [pc, #552]	; (8006bf0 <StartOrientationTask+0x274>)
 80069c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ca:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 80069ce:	da13      	bge.n	80069f8 <StartOrientationTask+0x7c>
    	char buff2[100];
    	sprintf(buff2, "Tilt up\n");
 80069d0:	f107 030c 	add.w	r3, r7, #12
 80069d4:	4a89      	ldr	r2, [pc, #548]	; (8006bfc <StartOrientationTask+0x280>)
 80069d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80069d8:	c303      	stmia	r3!, {r0, r1}
 80069da:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(&huart1, buff2, strlen(buff2), 1000);
 80069dc:	f107 030c 	add.w	r3, r7, #12
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7f9 fbf5 	bl	80001d0 <strlen>
 80069e6:	4603      	mov	r3, r0
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	f107 010c 	add.w	r1, r7, #12
 80069ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069f2:	4881      	ldr	r0, [pc, #516]	; (8006bf8 <StartOrientationTask+0x27c>)
 80069f4:	f7fd fde4 	bl	80045c0 <HAL_UART_Transmit>
    }
    //read the value from y-axis and set turning left condition
    if(aXYZ[1] > 300){
 80069f8:	4b7d      	ldr	r3, [pc, #500]	; (8006bf0 <StartOrientationTask+0x274>)
 80069fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006a02:	dd15      	ble.n	8006a30 <StartOrientationTask+0xb4>
        char buff3[100];
        sprintf(buff3, "Turning left\n");
 8006a04:	f107 030c 	add.w	r3, r7, #12
 8006a08:	4a7d      	ldr	r2, [pc, #500]	; (8006c00 <StartOrientationTask+0x284>)
 8006a0a:	461c      	mov	r4, r3
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a10:	c407      	stmia	r4!, {r0, r1, r2}
 8006a12:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, buff3, strlen(buff3), 1000);
 8006a14:	f107 030c 	add.w	r3, r7, #12
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7f9 fbd9 	bl	80001d0 <strlen>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f107 010c 	add.w	r1, r7, #12
 8006a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2a:	4873      	ldr	r0, [pc, #460]	; (8006bf8 <StartOrientationTask+0x27c>)
 8006a2c:	f7fd fdc8 	bl	80045c0 <HAL_UART_Transmit>
        }
    //read the value from y-axis and set turning right condition
    if(aXYZ[1] < -300){
 8006a30:	4b6f      	ldr	r3, [pc, #444]	; (8006bf0 <StartOrientationTask+0x274>)
 8006a32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a36:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8006a3a:	da18      	bge.n	8006a6e <StartOrientationTask+0xf2>
        char buff4[100];
        sprintf(buff4, "Turning right\n");
 8006a3c:	f107 030c 	add.w	r3, r7, #12
 8006a40:	4a70      	ldr	r2, [pc, #448]	; (8006c04 <StartOrientationTask+0x288>)
 8006a42:	461c      	mov	r4, r3
 8006a44:	4613      	mov	r3, r2
 8006a46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006a48:	c407      	stmia	r4!, {r0, r1, r2}
 8006a4a:	8023      	strh	r3, [r4, #0]
 8006a4c:	3402      	adds	r4, #2
 8006a4e:	0c1b      	lsrs	r3, r3, #16
 8006a50:	7023      	strb	r3, [r4, #0]
        HAL_UART_Transmit(&huart1, buff4, strlen(buff4), 1000);
 8006a52:	f107 030c 	add.w	r3, r7, #12
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7f9 fbba 	bl	80001d0 <strlen>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f107 010c 	add.w	r1, r7, #12
 8006a64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a68:	4863      	ldr	r0, [pc, #396]	; (8006bf8 <StartOrientationTask+0x27c>)
 8006a6a:	f7fd fda9 	bl	80045c0 <HAL_UART_Transmit>
        }
    //Set the condition for the board droped to ground(free-fall)
    if(aXYZ[1] > -500 && aXYZ[1] < 500 && aXYZ[0] > -500 && aXYZ[0] < 500 && aXYZ[2] > -500 && aXYZ[2] < 500){
 8006a6e:	4b60      	ldr	r3, [pc, #384]	; (8006bf0 <StartOrientationTask+0x274>)
 8006a70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a74:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006a78:	dd4b      	ble.n	8006b12 <StartOrientationTask+0x196>
 8006a7a:	4b5d      	ldr	r3, [pc, #372]	; (8006bf0 <StartOrientationTask+0x274>)
 8006a7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a84:	da45      	bge.n	8006b12 <StartOrientationTask+0x196>
 8006a86:	4b5a      	ldr	r3, [pc, #360]	; (8006bf0 <StartOrientationTask+0x274>)
 8006a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a8c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006a90:	dd3f      	ble.n	8006b12 <StartOrientationTask+0x196>
 8006a92:	4b57      	ldr	r3, [pc, #348]	; (8006bf0 <StartOrientationTask+0x274>)
 8006a94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006a9c:	da39      	bge.n	8006b12 <StartOrientationTask+0x196>
 8006a9e:	4b54      	ldr	r3, [pc, #336]	; (8006bf0 <StartOrientationTask+0x274>)
 8006aa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aa4:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8006aa8:	dd33      	ble.n	8006b12 <StartOrientationTask+0x196>
 8006aaa:	4b51      	ldr	r3, [pc, #324]	; (8006bf0 <StartOrientationTask+0x274>)
 8006aac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ab0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006ab4:	da2d      	bge.n	8006b12 <StartOrientationTask+0x196>
            if(count == 1){
 8006ab6:	4b54      	ldr	r3, [pc, #336]	; (8006c08 <StartOrientationTask+0x28c>)
 8006ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d11f      	bne.n	8006b00 <StartOrientationTask+0x184>
            	char buff5[100];
            	sprintf(buff5, "Crashed! Press the reset button to restart!\n");
 8006ac0:	f107 030c 	add.w	r3, r7, #12
 8006ac4:	4a51      	ldr	r2, [pc, #324]	; (8006c0c <StartOrientationTask+0x290>)
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	4615      	mov	r5, r2
 8006aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006ad6:	c407      	stmia	r4!, {r0, r1, r2}
 8006ad8:	7023      	strb	r3, [r4, #0]
            	HAL_UART_Transmit(&huart1, buff5, strlen(buff5), 1000);
 8006ada:	f107 030c 	add.w	r3, r7, #12
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7f9 fb76 	bl	80001d0 <strlen>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	f107 010c 	add.w	r1, r7, #12
 8006aec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006af0:	4841      	ldr	r0, [pc, #260]	; (8006bf8 <StartOrientationTask+0x27c>)
 8006af2:	f7fd fd65 	bl	80045c0 <HAL_UART_Transmit>
            	count = 0;
 8006af6:	4b44      	ldr	r3, [pc, #272]	; (8006c08 <StartOrientationTask+0x28c>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	801a      	strh	r2, [r3, #0]
            	break;
 8006afc:	bf00      	nop
 8006afe:	e073      	b.n	8006be8 <StartOrientationTask+0x26c>
            }
            else{
            	count++;
 8006b00:	4b41      	ldr	r3, [pc, #260]	; (8006c08 <StartOrientationTask+0x28c>)
 8006b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3301      	adds	r3, #1
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	b21a      	sxth	r2, r3
 8006b0e:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <StartOrientationTask+0x28c>)
 8006b10:	801a      	strh	r2, [r3, #0]
            }
            }
    //If we double-tap(simulate the plane was hit) the board for 5 times,
    //the status of the board became game over.
    if(hit == 5){
 8006b12:	4b3f      	ldr	r3, [pc, #252]	; (8006c10 <StartOrientationTask+0x294>)
 8006b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b18:	2b05      	cmp	r3, #5
 8006b1a:	d123      	bne.n	8006b64 <StartOrientationTask+0x1e8>
    	char buff6[100];
    	sprintf(buff6, "Was shot down! Press the reset button to restart!\n");
 8006b1c:	f107 030c 	add.w	r3, r7, #12
 8006b20:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <StartOrientationTask+0x298>)
 8006b22:	461c      	mov	r4, r3
 8006b24:	4615      	mov	r5, r2
 8006b26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b32:	682b      	ldr	r3, [r5, #0]
 8006b34:	461a      	mov	r2, r3
 8006b36:	8022      	strh	r2, [r4, #0]
 8006b38:	3402      	adds	r4, #2
 8006b3a:	0c1b      	lsrs	r3, r3, #16
 8006b3c:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart1, buff6, strlen(buff6), 1000);
 8006b3e:	f107 030c 	add.w	r3, r7, #12
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7f9 fb44 	bl	80001d0 <strlen>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	f107 010c 	add.w	r1, r7, #12
 8006b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b54:	4828      	ldr	r0, [pc, #160]	; (8006bf8 <StartOrientationTask+0x27c>)
 8006b56:	f7fd fd33 	bl	80045c0 <HAL_UART_Transmit>
        hit = 0;
 8006b5a:	4b2d      	ldr	r3, [pc, #180]	; (8006c10 <StartOrientationTask+0x294>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	801a      	strh	r2, [r3, #0]
    	break;
 8006b60:	bf00      	nop
 8006b62:	e041      	b.n	8006be8 <StartOrientationTask+0x26c>
    }
    //If the board is placed horizontally
    if(aXYZ[1] > -200 && aXYZ[1] < 100 && aXYZ[0] > -200 && aXYZ[0] < 200 && aXYZ[2] > 800 && aXYZ[2] < 1200){
 8006b64:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <StartOrientationTask+0x274>)
 8006b66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b6a:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8006b6e:	f6ff af09 	blt.w	8006984 <StartOrientationTask+0x8>
 8006b72:	4b1f      	ldr	r3, [pc, #124]	; (8006bf0 <StartOrientationTask+0x274>)
 8006b74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b78:	2b63      	cmp	r3, #99	; 0x63
 8006b7a:	f73f af03 	bgt.w	8006984 <StartOrientationTask+0x8>
 8006b7e:	4b1c      	ldr	r3, [pc, #112]	; (8006bf0 <StartOrientationTask+0x274>)
 8006b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b84:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8006b88:	f6ff aefc 	blt.w	8006984 <StartOrientationTask+0x8>
 8006b8c:	4b18      	ldr	r3, [pc, #96]	; (8006bf0 <StartOrientationTask+0x274>)
 8006b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b92:	2bc7      	cmp	r3, #199	; 0xc7
 8006b94:	f73f aef6 	bgt.w	8006984 <StartOrientationTask+0x8>
 8006b98:	4b15      	ldr	r3, [pc, #84]	; (8006bf0 <StartOrientationTask+0x274>)
 8006b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b9e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8006ba2:	f77f aeef 	ble.w	8006984 <StartOrientationTask+0x8>
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <StartOrientationTask+0x274>)
 8006ba8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006bac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8006bb0:	f6bf aee8 	bge.w	8006984 <StartOrientationTask+0x8>
    	char buff9[100];
    	sprintf(buff9, "Smooth flight\n");
 8006bb4:	f107 030c 	add.w	r3, r7, #12
 8006bb8:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <StartOrientationTask+0x29c>)
 8006bba:	461c      	mov	r4, r3
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bc0:	c407      	stmia	r4!, {r0, r1, r2}
 8006bc2:	8023      	strh	r3, [r4, #0]
 8006bc4:	3402      	adds	r4, #2
 8006bc6:	0c1b      	lsrs	r3, r3, #16
 8006bc8:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart1, buff9, strlen(buff9), 1000);
 8006bca:	f107 030c 	add.w	r3, r7, #12
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 fafe 	bl	80001d0 <strlen>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	f107 010c 	add.w	r1, r7, #12
 8006bdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006be0:	4805      	ldr	r0, [pc, #20]	; (8006bf8 <StartOrientationTask+0x27c>)
 8006be2:	f7fd fced 	bl	80045c0 <HAL_UART_Transmit>
    osDelay(100);
 8006be6:	e6cd      	b.n	8006984 <StartOrientationTask+0x8>
    }

  }
  /* USER CODE END StartOrientationTask */
}
 8006be8:	bf00      	nop
 8006bea:	3770      	adds	r7, #112	; 0x70
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bdb0      	pop	{r4, r5, r7, pc}
 8006bf0:	20001140 	.word	0x20001140
 8006bf4:	080072b0 	.word	0x080072b0
 8006bf8:	20001148 	.word	0x20001148
 8006bfc:	080072bc 	.word	0x080072bc
 8006c00:	080072c8 	.word	0x080072c8
 8006c04:	080072d8 	.word	0x080072d8
 8006c08:	20000fbc 	.word	0x20000fbc
 8006c0c:	080072e8 	.word	0x080072e8
 8006c10:	20000fbe 	.word	0x20000fbe
 8006c14:	08007318 	.word	0x08007318
 8006c18:	0800734c 	.word	0x0800734c

08006c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a04      	ldr	r2, [pc, #16]	; (8006c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006c2e:	f7f9 ff2f 	bl	8000a90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40001000 	.word	0x40001000

08006c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c44:	bf00      	nop
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c56:	4b0f      	ldr	r3, [pc, #60]	; (8006c94 <HAL_MspInit+0x44>)
 8006c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5a:	4a0e      	ldr	r2, [pc, #56]	; (8006c94 <HAL_MspInit+0x44>)
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	6613      	str	r3, [r2, #96]	; 0x60
 8006c62:	4b0c      	ldr	r3, [pc, #48]	; (8006c94 <HAL_MspInit+0x44>)
 8006c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	607b      	str	r3, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	4b09      	ldr	r3, [pc, #36]	; (8006c94 <HAL_MspInit+0x44>)
 8006c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c72:	4a08      	ldr	r2, [pc, #32]	; (8006c94 <HAL_MspInit+0x44>)
 8006c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c78:	6593      	str	r3, [r2, #88]	; 0x58
 8006c7a:	4b06      	ldr	r3, [pc, #24]	; (8006c94 <HAL_MspInit+0x44>)
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40021000 	.word	0x40021000

08006c98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
 8006caa:	609a      	str	r2, [r3, #8]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a2e      	ldr	r2, [pc, #184]	; (8006d70 <HAL_DAC_MspInit+0xd8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d155      	bne.n	8006d66 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006cba:	4b2e      	ldr	r3, [pc, #184]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	4a2d      	ldr	r2, [pc, #180]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006cc4:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc6:	4b2b      	ldr	r3, [pc, #172]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	4b28      	ldr	r3, [pc, #160]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	4a27      	ldr	r2, [pc, #156]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cde:	4b25      	ldr	r3, [pc, #148]	; (8006d74 <HAL_DAC_MspInit+0xdc>)
 8006ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006cea:	2310      	movs	r3, #16
 8006cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cee:	2303      	movs	r3, #3
 8006cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cf6:	f107 0314 	add.w	r3, r7, #20
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d00:	f7fa fafc 	bl	80012fc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8006d04:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d06:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <HAL_DAC_MspInit+0xe4>)
 8006d08:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d12:	2210      	movs	r2, #16
 8006d14:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d16:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d1c:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d1e:	2280      	movs	r2, #128	; 0x80
 8006d20:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d22:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d28:	4b13      	ldr	r3, [pc, #76]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_NORMAL;
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006d34:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8006d3a:	480f      	ldr	r0, [pc, #60]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d3c:	f7fa f976 	bl	800102c <HAL_DMA_Init>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_DAC_MspInit+0xb2>
    {
      Error_Handler();
 8006d46:	f7ff ff7b 	bl	8006c40 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a0a      	ldr	r2, [pc, #40]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <HAL_DAC_MspInit+0xe0>)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006d56:	2200      	movs	r2, #0
 8006d58:	2100      	movs	r1, #0
 8006d5a:	2036      	movs	r0, #54	; 0x36
 8006d5c:	f7f9 ff92 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006d60:	2036      	movs	r0, #54	; 0x36
 8006d62:	f7f9 ffab 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006d66:	bf00      	nop
 8006d68:	3728      	adds	r7, #40	; 0x28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40007400 	.word	0x40007400
 8006d74:	40021000 	.word	0x40021000
 8006d78:	200010f8 	.word	0x200010f8
 8006d7c:	40020030 	.word	0x40020030

08006d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08a      	sub	sp, #40	; 0x28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	605a      	str	r2, [r3, #4]
 8006d92:	609a      	str	r2, [r3, #8]
 8006d94:	60da      	str	r2, [r3, #12]
 8006d96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <HAL_I2C_MspInit+0x7c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d128      	bne.n	8006df4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006da2:	4b17      	ldr	r3, [pc, #92]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006da8:	f043 0302 	orr.w	r3, r3, #2
 8006dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dae:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006dba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dc0:	2312      	movs	r3, #18
 8006dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006dcc:	2304      	movs	r3, #4
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	480b      	ldr	r0, [pc, #44]	; (8006e04 <HAL_I2C_MspInit+0x84>)
 8006dd8:	f7fa fa90 	bl	80012fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006ddc:	4b08      	ldr	r3, [pc, #32]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de0:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006de6:	6593      	str	r3, [r2, #88]	; 0x58
 8006de8:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_I2C_MspInit+0x80>)
 8006dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006df4:	bf00      	nop
 8006df6:	3728      	adds	r7, #40	; 0x28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40005800 	.word	0x40005800
 8006e00:	40021000 	.word	0x40021000
 8006e04:	48000400 	.word	0x48000400

08006e08 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a0b      	ldr	r2, [pc, #44]	; (8006e44 <HAL_I2C_MspDeInit+0x3c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d10f      	bne.n	8006e3a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8006e1a:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_I2C_MspDeInit+0x40>)
 8006e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1e:	4a0a      	ldr	r2, [pc, #40]	; (8006e48 <HAL_I2C_MspDeInit+0x40>)
 8006e20:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006e24:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8006e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e2a:	4808      	ldr	r0, [pc, #32]	; (8006e4c <HAL_I2C_MspDeInit+0x44>)
 8006e2c:	f7fa fc0e 	bl	800164c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8006e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e34:	4805      	ldr	r0, [pc, #20]	; (8006e4c <HAL_I2C_MspDeInit+0x44>)
 8006e36:	f7fa fc09 	bl	800164c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40005800 	.word	0x40005800
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	48000400 	.word	0x48000400

08006e50 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	609a      	str	r2, [r3, #8]
 8006e64:	60da      	str	r2, [r3, #12]
 8006e66:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <HAL_QSPI_MspInit+0x7c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d128      	bne.n	8006ec4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e76:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7c:	6513      	str	r3, [r2, #80]	; 0x50
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e90:	f043 0310 	orr.w	r3, r3, #16
 8006e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_QSPI_MspInit+0x80>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8006ea2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006ea6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006eb4:	230a      	movs	r3, #10
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006eb8:	f107 0314 	add.w	r3, r7, #20
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	4805      	ldr	r0, [pc, #20]	; (8006ed4 <HAL_QSPI_MspInit+0x84>)
 8006ec0:	f7fa fa1c 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006ec4:	bf00      	nop
 8006ec6:	3728      	adds	r7, #40	; 0x28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	a0001000 	.word	0xa0001000
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	48001000 	.word	0x48001000

08006ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee8:	d113      	bne.n	8006f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <HAL_TIM_Base_MspInit+0x44>)
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <HAL_TIM_Base_MspInit+0x44>)
 8006ef0:	f043 0301 	orr.w	r3, r3, #1
 8006ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <HAL_TIM_Base_MspInit+0x44>)
 8006ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006f02:	2200      	movs	r2, #0
 8006f04:	2100      	movs	r1, #0
 8006f06:	201c      	movs	r0, #28
 8006f08:	f7f9 febc 	bl	8000c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006f0c:	201c      	movs	r0, #28
 8006f0e:	f7f9 fed5 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006f12:	bf00      	nop
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000

08006f20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	; 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	605a      	str	r2, [r3, #4]
 8006f32:	609a      	str	r2, [r3, #8]
 8006f34:	60da      	str	r2, [r3, #12]
 8006f36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a17      	ldr	r2, [pc, #92]	; (8006f9c <HAL_UART_MspInit+0x7c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d127      	bne.n	8006f92 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f42:	4b17      	ldr	r3, [pc, #92]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f46:	4a16      	ldr	r2, [pc, #88]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8006f4e:	4b14      	ldr	r3, [pc, #80]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f5a:	4b11      	ldr	r3, [pc, #68]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f5e:	4a10      	ldr	r2, [pc, #64]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f60:	f043 0302 	orr.w	r3, r3, #2
 8006f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f66:	4b0e      	ldr	r3, [pc, #56]	; (8006fa0 <HAL_UART_MspInit+0x80>)
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f72:	23c0      	movs	r3, #192	; 0xc0
 8006f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f76:	2302      	movs	r3, #2
 8006f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f82:	2307      	movs	r3, #7
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f86:	f107 0314 	add.w	r3, r7, #20
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <HAL_UART_MspInit+0x84>)
 8006f8e:	f7fa f9b5 	bl	80012fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006f92:	bf00      	nop
 8006f94:	3728      	adds	r7, #40	; 0x28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	40013800 	.word	0x40013800
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	48000400 	.word	0x48000400

08006fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b08c      	sub	sp, #48	; 0x30
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	2036      	movs	r0, #54	; 0x36
 8006fbe:	f7f9 fe61 	bl	8000c84 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006fc2:	2036      	movs	r0, #54	; 0x36
 8006fc4:	f7f9 fe7a 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006fc8:	4b1e      	ldr	r3, [pc, #120]	; (8007044 <HAL_InitTick+0x9c>)
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	; (8007044 <HAL_InitTick+0x9c>)
 8006fce:	f043 0310 	orr.w	r3, r3, #16
 8006fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8006fd4:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <HAL_InitTick+0x9c>)
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	f003 0310 	and.w	r3, r3, #16
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006fe0:	f107 0210 	add.w	r2, r7, #16
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7fc f8b6 	bl	800315c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006ff0:	f7fc f888 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8006ff4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff8:	4a13      	ldr	r2, [pc, #76]	; (8007048 <HAL_InitTick+0xa0>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	0c9b      	lsrs	r3, r3, #18
 8007000:	3b01      	subs	r3, #1
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007004:	4b11      	ldr	r3, [pc, #68]	; (800704c <HAL_InitTick+0xa4>)
 8007006:	4a12      	ldr	r2, [pc, #72]	; (8007050 <HAL_InitTick+0xa8>)
 8007008:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800700a:	4b10      	ldr	r3, [pc, #64]	; (800704c <HAL_InitTick+0xa4>)
 800700c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007010:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007012:	4a0e      	ldr	r2, [pc, #56]	; (800704c <HAL_InitTick+0xa4>)
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8007018:	4b0c      	ldr	r3, [pc, #48]	; (800704c <HAL_InitTick+0xa4>)
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_InitTick+0xa4>)
 8007020:	2200      	movs	r2, #0
 8007022:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8007024:	4809      	ldr	r0, [pc, #36]	; (800704c <HAL_InitTick+0xa4>)
 8007026:	f7fc fddb 	bl	8003be0 <HAL_TIM_Base_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8007030:	4806      	ldr	r0, [pc, #24]	; (800704c <HAL_InitTick+0xa4>)
 8007032:	f7fc fe2d 	bl	8003c90 <HAL_TIM_Base_Start_IT>
 8007036:	4603      	mov	r3, r0
 8007038:	e000      	b.n	800703c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
}
 800703c:	4618      	mov	r0, r3
 800703e:	3730      	adds	r7, #48	; 0x30
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40021000 	.word	0x40021000
 8007048:	431bde83 	.word	0x431bde83
 800704c:	20001258 	.word	0x20001258
 8007050:	40001000 	.word	0x40001000

08007054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007058:	bf00      	nop
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007062:	b480      	push	{r7}
 8007064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007066:	e7fe      	b.n	8007066 <HardFault_Handler+0x4>

08007068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007068:	b480      	push	{r7}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800706c:	e7fe      	b.n	800706c <MemManage_Handler+0x4>

0800706e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800706e:	b480      	push	{r7}
 8007070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007072:	e7fe      	b.n	8007072 <BusFault_Handler+0x4>

08007074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007078:	e7fe      	b.n	8007078 <UsageFault_Handler+0x4>

0800707a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800707a:	b480      	push	{r7}
 800707c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800708c:	4802      	ldr	r0, [pc, #8]	; (8007098 <DMA1_Channel3_IRQHandler+0x10>)
 800708e:	f7fa f885 	bl	800119c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007092:	bf00      	nop
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	200010f8 	.word	0x200010f8

0800709c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80070a0:	4802      	ldr	r0, [pc, #8]	; (80070ac <TIM2_IRQHandler+0x10>)
 80070a2:	f7fc fe65 	bl	8003d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80070a6:	bf00      	nop
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200011c8 	.word	0x200011c8

080070b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80070b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070b8:	f7fa fbee 	bl	8001898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80070bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80070c0:	f7fa fbea 	bl	8001898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80070c4:	bf00      	nop
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80070cc:	4803      	ldr	r0, [pc, #12]	; (80070dc <TIM6_DAC_IRQHandler+0x14>)
 80070ce:	f7fc fe4f 	bl	8003d70 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80070d2:	4803      	ldr	r0, [pc, #12]	; (80070e0 <TIM6_DAC_IRQHandler+0x18>)
 80070d4:	f7f9 fe22 	bl	8000d1c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80070d8:	bf00      	nop
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20001258 	.word	0x20001258
 80070e0:	20001094 	.word	0x20001094

080070e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <SystemInit+0x64>)
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	4a16      	ldr	r2, [pc, #88]	; (8007148 <SystemInit+0x64>)
 80070f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80070f8:	4b14      	ldr	r3, [pc, #80]	; (800714c <SystemInit+0x68>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a13      	ldr	r2, [pc, #76]	; (800714c <SystemInit+0x68>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <SystemInit+0x68>)
 8007106:	2200      	movs	r2, #0
 8007108:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800710a:	4b10      	ldr	r3, [pc, #64]	; (800714c <SystemInit+0x68>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a0f      	ldr	r2, [pc, #60]	; (800714c <SystemInit+0x68>)
 8007110:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007114:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007118:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800711a:	4b0c      	ldr	r3, [pc, #48]	; (800714c <SystemInit+0x68>)
 800711c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007120:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <SystemInit+0x68>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a09      	ldr	r2, [pc, #36]	; (800714c <SystemInit+0x68>)
 8007128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800712c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <SystemInit+0x68>)
 8007130:	2200      	movs	r2, #0
 8007132:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007134:	4b04      	ldr	r3, [pc, #16]	; (8007148 <SystemInit+0x64>)
 8007136:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800713a:	609a      	str	r2, [r3, #8]
#endif
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e000ed00 	.word	0xe000ed00
 800714c:	40021000 	.word	0x40021000

08007150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007188 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007154:	f7ff ffc6 	bl	80070e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007158:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800715a:	e003      	b.n	8007164 <LoopCopyDataInit>

0800715c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800715c:	4b0b      	ldr	r3, [pc, #44]	; (800718c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800715e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007160:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007162:	3104      	adds	r1, #4

08007164 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007164:	480a      	ldr	r0, [pc, #40]	; (8007190 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007166:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007168:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800716a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800716c:	d3f6      	bcc.n	800715c <CopyDataInit>
	ldr	r2, =_sbss
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007170:	e002      	b.n	8007178 <LoopFillZerobss>

08007172 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007172:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007174:	f842 3b04 	str.w	r3, [r2], #4

08007178 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007178:	4b08      	ldr	r3, [pc, #32]	; (800719c <LoopForever+0x16>)
	cmp	r2, r3
 800717a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800717c:	d3f9      	bcc.n	8007172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800717e:	f000 f811 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007182:	f7ff f8d7 	bl	8006334 <main>

08007186 <LoopForever>:

LoopForever:
    b LoopForever
 8007186:	e7fe      	b.n	8007186 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007188:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800718c:	080073b4 	.word	0x080073b4
	ldr	r0, =_sdata
 8007190:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007194:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8007198:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 800719c:	200012a4 	.word	0x200012a4

080071a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80071a0:	e7fe      	b.n	80071a0 <ADC1_2_IRQHandler>
	...

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4e0d      	ldr	r6, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1ba4      	subs	r4, r4, r6
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2500      	movs	r5, #0
 80071b0:	42a5      	cmp	r5, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4e0b      	ldr	r6, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f000 f820 	bl	80071fc <_init>
 80071bc:	1ba4      	subs	r4, r4, r6
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2500      	movs	r5, #0
 80071c2:	42a5      	cmp	r5, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071cc:	4798      	blx	r3
 80071ce:	3501      	adds	r5, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80071d6:	4798      	blx	r3
 80071d8:	3501      	adds	r5, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	080073ac 	.word	0x080073ac
 80071e0:	080073ac 	.word	0x080073ac
 80071e4:	080073ac 	.word	0x080073ac
 80071e8:	080073b0 	.word	0x080073b0

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
